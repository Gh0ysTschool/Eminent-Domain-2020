import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as empty, a as insert_dev, n as noop, b as detach_dev, c as element, f as claim_element, g as children, h as attr_dev, j as add_location, k as append_dev, l as space, t as text, m as claim_space, o as claim_text, p as set_style, q as set_data_dev, r as validate_each_argument, u as assign, w as create_component, x as claim_component, y as mount_component, z as get_spread_update, A as get_spread_object, B as transition_in, C as transition_out, D as destroy_component, E as group_outros, F as check_outros, G as destroy_each, H as onMount, I as globals, J as run_all, K as listen_dev, L as bubble } from './client.4be5e1e1.js';

/* src\components\Icon.svelte generated by Svelte v3.20.1 */

const file = "src\\components\\Icon.svelte";

// (93:0) {:else}
function create_else_block(ctx) {
	let div;
	let img;
	let img_class_value;
	let img_src_value;
	let div_class_value;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { class: true, src: true, alt: true });
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", img_class_value = "ico-" + /*size*/ ctx[1] + " svelte-okjivu");
			if (img.src !== (img_src_value = "./images/" + /*key*/ ctx[4] + ".svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*key*/ ctx[4]);
			add_location(img, file, 94, 4, 2398);
			attr_dev(div, "class", div_class_value = "ico-cont-" + /*size*/ ctx[1] + " " + /*key*/ ctx[4] + " svelte-okjivu");
			add_location(div, file, 93, 0, 2357);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*size*/ 2 && img_class_value !== (img_class_value = "ico-" + /*size*/ ctx[1] + " svelte-okjivu")) {
				attr_dev(img, "class", img_class_value);
			}

			if (dirty & /*size*/ 2 && div_class_value !== (div_class_value = "ico-cont-" + /*size*/ ctx[1] + " " + /*key*/ ctx[4] + " svelte-okjivu")) {
				attr_dev(div, "class", div_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(93:0) {:else}",
		ctx
	});

	return block;
}

// (88:0) {#if type=='influence'}
function create_if_block(ctx) {
	let div;
	let img;
	let img_class_value;
	let img_src_value;
	let t0;
	let span;
	let t1;
	let div_class_value;
	let div_style_value;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			t0 = space();
			span = element("span");
			t1 = text(/*influence*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			img = claim_element(div_nodes, "IMG", {
				class: true,
				style: true,
				src: true,
				alt: true
			});

			t0 = claim_space(div_nodes);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, /*influence*/ ctx[2]);
			span_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", img_class_value = "ico-" + /*size*/ ctx[1] + " inf" + " svelte-okjivu");
			set_style(img, "transform", "translate(-15%, 5%)");
			if (img.src !== (img_src_value = "./images/" + /*key*/ ctx[4] + ".svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*key*/ ctx[4]);
			add_location(img, file, 89, 4, 2191);
			attr_dev(span, "class", "num svelte-okjivu");
			add_location(span, file, 90, 4, 2302);
			attr_dev(div, "class", div_class_value = "ico-cont-" + /*size*/ ctx[1] + " svelte-okjivu");
			attr_dev(div, "style", div_style_value = /*bordered*/ ctx[3] ? "border:1px solid black" : "");
			add_location(div, file, 88, 0, 2107);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t0);
			append_dev(div, span);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*size*/ 2 && img_class_value !== (img_class_value = "ico-" + /*size*/ ctx[1] + " inf" + " svelte-okjivu")) {
				attr_dev(img, "class", img_class_value);
			}

			if (dirty & /*influence*/ 4) set_data_dev(t1, /*influence*/ ctx[2]);

			if (dirty & /*size*/ 2 && div_class_value !== (div_class_value = "ico-cont-" + /*size*/ ctx[1] + " svelte-okjivu")) {
				attr_dev(div, "class", div_class_value);
			}

			if (dirty & /*bordered*/ 8 && div_style_value !== (div_style_value = /*bordered*/ ctx[3] ? "border:1px solid black" : "")) {
				attr_dev(div, "style", div_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(88:0) {#if type=='influence'}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[0] == "influence") return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { type } = $$props,
		{ size } = $$props,
		{ influence = 0 } = $$props,
		{ bordered = false } = $$props;

	let label = type.charAt(0).toUpperCase() + type.slice(1),
		key = ({
			produce: "pro",
			trade: "trd",
			politics: "pol",
			research: "res",
			survey: "sur",
			warfare: "war",
			colonize: "col",
			water: "wtr",
			food: "fud",
			silicon: "sil",
			ore: "ore",
			advanced: "adv",
			fertile: "fer",
			metallic: "met",
			influence: "inf"
		})[type];

	const writable_props = ["type", "size", "influence", "bordered"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Icon> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Icon", $$slots, []);

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(0, type = $$props.type);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
		if ("influence" in $$props) $$invalidate(2, influence = $$props.influence);
		if ("bordered" in $$props) $$invalidate(3, bordered = $$props.bordered);
	};

	$$self.$capture_state = () => ({
		type,
		size,
		influence,
		bordered,
		label,
		key
	});

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(0, type = $$props.type);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
		if ("influence" in $$props) $$invalidate(2, influence = $$props.influence);
		if ("bordered" in $$props) $$invalidate(3, bordered = $$props.bordered);
		if ("label" in $$props) label = $$props.label;
		if ("key" in $$props) $$invalidate(4, key = $$props.key);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [type, size, influence, bordered, key];
}

class Icon extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			type: 0,
			size: 1,
			influence: 2,
			bordered: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Icon",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*type*/ ctx[0] === undefined && !("type" in props)) {
			console.warn("<Icon> was created without expected prop 'type'");
		}

		if (/*size*/ ctx[1] === undefined && !("size" in props)) {
			console.warn("<Icon> was created without expected prop 'size'");
		}
	}

	get type() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get influence() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set influence(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bordered() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bordered(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\IconBar.svelte generated by Svelte v3.20.1 */
const file$1 = "src\\components\\IconBar.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (22:4) {#each icons as icon}
function create_each_block(ctx) {
	let t;
	let div;
	let current;
	const icon_spread_levels = [/*icon*/ ctx[9]];
	let icon_props = {};

	for (let i = 0; i < icon_spread_levels.length; i += 1) {
		icon_props = assign(icon_props, icon_spread_levels[i]);
	}

	const icon = new Icon({ props: icon_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
			t = space();
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
			t = claim_space(nodes);
			div = claim_element(nodes, "DIV", { style: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "min-height", "0.1vh");
			set_style(div, "max-height", "0.1vh");
			add_location(div, file$1, 23, 8, 746);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = (dirty & /*icons*/ 1)
			? get_spread_update(icon_spread_levels, [get_spread_object(/*icon*/ ctx[9])])
			: {};

			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(22:4) {#each icons as icon}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let current;
	let each_value = /*icons*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "iconbar svelte-bfkj6e");
			attr_dev(div, "style", /*size*/ ctx[1]);
			add_location(div, file$1, 20, 0, 648);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*icons*/ 1) {
				each_value = /*icons*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { survey } = $$props,
		{ warfare } = $$props,
		{ colonize } = $$props,
		{ produce } = $$props,
		{ trade } = $$props,
		{ research } = $$props;

	let icons = [];

	let f = (c, s) => {
		for (let i = 0; i < c; i++) $$invalidate(0, icons = [...icons, { size: "sm", type: s }]);
	};

	f(survey, "survey");
	f(warfare, "warfare");
	f(colonize, "colonize");
	f(produce, "produce");
	f(trade, "trade");
	f(research, "research");
	let size = `min-height: calc(${icons.length}*2em);max-height: calc(${icons.length}*2em);`;
	const writable_props = ["survey", "warfare", "colonize", "produce", "trade", "research"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<IconBar> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("IconBar", $$slots, []);

	$$self.$set = $$props => {
		if ("survey" in $$props) $$invalidate(2, survey = $$props.survey);
		if ("warfare" in $$props) $$invalidate(3, warfare = $$props.warfare);
		if ("colonize" in $$props) $$invalidate(4, colonize = $$props.colonize);
		if ("produce" in $$props) $$invalidate(5, produce = $$props.produce);
		if ("trade" in $$props) $$invalidate(6, trade = $$props.trade);
		if ("research" in $$props) $$invalidate(7, research = $$props.research);
	};

	$$self.$capture_state = () => ({
		Icon,
		survey,
		warfare,
		colonize,
		produce,
		trade,
		research,
		icons,
		f,
		size
	});

	$$self.$inject_state = $$props => {
		if ("survey" in $$props) $$invalidate(2, survey = $$props.survey);
		if ("warfare" in $$props) $$invalidate(3, warfare = $$props.warfare);
		if ("colonize" in $$props) $$invalidate(4, colonize = $$props.colonize);
		if ("produce" in $$props) $$invalidate(5, produce = $$props.produce);
		if ("trade" in $$props) $$invalidate(6, trade = $$props.trade);
		if ("research" in $$props) $$invalidate(7, research = $$props.research);
		if ("icons" in $$props) $$invalidate(0, icons = $$props.icons);
		if ("f" in $$props) f = $$props.f;
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [icons, size, survey, warfare, colonize, produce, trade, research];
}

class IconBar extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			survey: 2,
			warfare: 3,
			colonize: 4,
			produce: 5,
			trade: 6,
			research: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IconBar",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*survey*/ ctx[2] === undefined && !("survey" in props)) {
			console.warn("<IconBar> was created without expected prop 'survey'");
		}

		if (/*warfare*/ ctx[3] === undefined && !("warfare" in props)) {
			console.warn("<IconBar> was created without expected prop 'warfare'");
		}

		if (/*colonize*/ ctx[4] === undefined && !("colonize" in props)) {
			console.warn("<IconBar> was created without expected prop 'colonize'");
		}

		if (/*produce*/ ctx[5] === undefined && !("produce" in props)) {
			console.warn("<IconBar> was created without expected prop 'produce'");
		}

		if (/*trade*/ ctx[6] === undefined && !("trade" in props)) {
			console.warn("<IconBar> was created without expected prop 'trade'");
		}

		if (/*research*/ ctx[7] === undefined && !("research" in props)) {
			console.warn("<IconBar> was created without expected prop 'research'");
		}
	}

	get survey() {
		throw new Error("<IconBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set survey(value) {
		throw new Error("<IconBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get warfare() {
		throw new Error("<IconBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set warfare(value) {
		throw new Error("<IconBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get colonize() {
		throw new Error("<IconBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colonize(value) {
		throw new Error("<IconBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get produce() {
		throw new Error("<IconBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set produce(value) {
		throw new Error("<IconBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get trade() {
		throw new Error("<IconBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set trade(value) {
		throw new Error("<IconBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get research() {
		throw new Error("<IconBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set research(value) {
		throw new Error("<IconBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\PlanetCard.svelte generated by Svelte v3.20.1 */

const { console: console_1 } = globals;
const file$2 = "src\\components\\PlanetCard.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (89:8) {:else}
function create_else_block$1(ctx) {
	let div0;
	let t0;
	let t1;
	let div1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t2;
	let div2;
	let span0;
	let t3_value = /*planet*/ ctx[0].settle_cost + "";
	let t3;
	let t4;
	let t5;
	let span1;
	let t6;
	let t7_value = /*planet*/ ctx[0].conquer_cost + "";
	let t7;
	let t8;
	let div3;
	let t9_value = /*planet*/ ctx[0].type + "";
	let t9;
	let current;

	const icon0 = new Icon({
			props: { type: "colonize", size: "sm" },
			$$inline: true
		});

	const icon1 = new Icon({
			props: { type: "warfare", size: "sm" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = text("Surveying Alien World");
			t1 = space();
			div1 = element("div");
			img = element("img");
			t2 = space();
			div2 = element("div");
			span0 = element("span");
			t3 = text(t3_value);
			t4 = space();
			create_component(icon0.$$.fragment);
			t5 = space();
			span1 = element("span");
			create_component(icon1.$$.fragment);
			t6 = space();
			t7 = text(t7_value);
			t8 = space();
			div3 = element("div");
			t9 = text(t9_value);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Surveying Alien World");
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true });
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			span0 = claim_element(div2_nodes, "SPAN", { style: true });
			var span0_nodes = children(span0);
			t3 = claim_text(span0_nodes, t3_value);
			t4 = claim_space(span0_nodes);
			claim_component(icon0.$$.fragment, span0_nodes);
			span0_nodes.forEach(detach_dev);
			t5 = claim_space(div2_nodes);
			span1 = claim_element(div2_nodes, "SPAN", { style: true });
			var span1_nodes = children(span1);
			claim_component(icon1.$$.fragment, span1_nodes);
			t6 = claim_space(span1_nodes);
			t7 = claim_text(span1_nodes, t7_value);
			span1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { style: true });
			var div3_nodes = children(div3);
			t9 = claim_text(div3_nodes, t9_value);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "title svelte-1ysiaxo");
			add_location(div0, file$2, 89, 12, 2713);
			if (img.src !== (img_src_value = "./images/col.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*planet*/ ctx[0].name);
			attr_dev(img, "class", "svelte-1ysiaxo");
			add_location(img, file$2, 91, 16, 2812);
			attr_dev(div1, "class", "logo svelte-1ysiaxo");
			add_location(div1, file$2, 90, 12, 2776);
			set_style(span0, "float", "left");
			add_location(span0, file$2, 94, 16, 2946);
			set_style(span1, "float", "right");
			add_location(span1, file$2, 98, 16, 3111);
			set_style(div2, "display", "inline-block");
			add_location(div2, file$2, 93, 12, 2894);
			set_style(div3, "position", "absolute");
			set_style(div3, "bottom", "3%");
			set_style(div3, "width", "85%");
			set_style(div3, "text-align", "center");
			set_style(div3, "border", "1px solid black");
			add_location(div3, file$2, 103, 12, 3293);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, img);
			insert_dev(target, t2, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, span0);
			append_dev(span0, t3);
			append_dev(span0, t4);
			mount_component(icon0, span0, null);
			append_dev(div2, t5);
			append_dev(div2, span1);
			mount_component(icon1, span1, null);
			append_dev(span1, t6);
			append_dev(span1, t7);
			insert_dev(target, t8, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, t9);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*planet*/ 1 && img_alt_value !== (img_alt_value = /*planet*/ ctx[0].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if ((!current || dirty & /*planet*/ 1) && t3_value !== (t3_value = /*planet*/ ctx[0].settle_cost + "")) set_data_dev(t3, t3_value);
			if ((!current || dirty & /*planet*/ 1) && t7_value !== (t7_value = /*planet*/ ctx[0].conquer_cost + "")) set_data_dev(t7, t7_value);
			if ((!current || dirty & /*planet*/ 1) && t9_value !== (t9_value = /*planet*/ ctx[0].type + "")) set_data_dev(t9, t9_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div2);
			destroy_component(icon0);
			destroy_component(icon1);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(89:8) {:else}",
		ctx
	});

	return block;
}

// (72:8) {#if planet.settled}
function create_if_block$1(ctx) {
	let div0;
	let t0;
	let span;
	let t1;
	let div1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t2;
	let div2;
	let t3_value = /*planet*/ ctx[0].name + "";
	let t3;
	let t4;
	let div3;
	let current;
	const iconbar_spread_levels = [/*planet*/ ctx[0].icons];
	let iconbar_props = {};

	for (let i = 0; i < iconbar_spread_levels.length; i += 1) {
		iconbar_props = assign(iconbar_props, iconbar_spread_levels[i]);
	}

	const iconbar = new IconBar({ props: iconbar_props, $$inline: true });

	const icon = new Icon({
			props: {
				type: "influence",
				size: "sm",
				influence: /*planet*/ ctx[0].influence
			},
			$$inline: true
		});

	let each_value = /*planet*/ ctx[0].production_zones;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(iconbar.$$.fragment);
			t0 = space();
			span = element("span");
			create_component(icon.$$.fragment);
			t1 = space();
			div1 = element("div");
			img = element("img");
			t2 = space();
			div2 = element("div");
			t3 = text(t3_value);
			t4 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(iconbar.$$.fragment, div0_nodes);
			t0 = claim_space(div0_nodes);
			span = claim_element(div0_nodes, "SPAN", { style: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true });
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t3 = claim_text(div2_nodes, t3_value);
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { style: true });
			var div3_nodes = children(div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div3_nodes);
			}

			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span, "margin-left", "15vh");
			add_location(span, file$2, 74, 16, 2067);
			attr_dev(div0, "class", "title svelte-1ysiaxo");
			add_location(div0, file$2, 72, 12, 1981);
			if (img.src !== (img_src_value = "./images/" + /*key*/ ctx[4] + ".svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*planet*/ ctx[0].name);
			attr_dev(img, "class", "svelte-1ysiaxo");
			add_location(img, file$2, 80, 16, 2280);
			attr_dev(div1, "class", "logo svelte-1ysiaxo");
			add_location(div1, file$2, 79, 12, 2244);
			attr_dev(div2, "class", "name svelte-1ysiaxo");
			add_location(div2, file$2, 82, 12, 2364);
			attr_dev(div3, "style", "position:absolute; bottom:3%; width:15%; height 15%; text-align: center;");
			add_location(div3, file$2, 83, 12, 2415);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(iconbar, div0, null);
			append_dev(div0, t0);
			append_dev(div0, span);
			mount_component(icon, span, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, img);
			insert_dev(target, t2, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, div3, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbar_changes = (dirty & /*planet*/ 1)
			? get_spread_update(iconbar_spread_levels, [get_spread_object(/*planet*/ ctx[0].icons)])
			: {};

			iconbar.$set(iconbar_changes);
			const icon_changes = {};
			if (dirty & /*planet*/ 1) icon_changes.influence = /*planet*/ ctx[0].influence;
			icon.$set(icon_changes);

			if (!current || dirty & /*planet*/ 1 && img_alt_value !== (img_alt_value = /*planet*/ ctx[0].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if ((!current || dirty & /*planet*/ 1) && t3_value !== (t3_value = /*planet*/ ctx[0].name + "")) set_data_dev(t3, t3_value);

			if (dirty & /*planet*/ 1) {
				each_value = /*planet*/ ctx[0].production_zones;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div3, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbar.$$.fragment, local);
			transition_in(icon.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(iconbar.$$.fragment, local);
			transition_out(icon.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(iconbar);
			destroy_component(icon);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div2);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div3);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(72:8) {#if planet.settled}",
		ctx
	});

	return block;
}

// (85:16) {#each planet.production_zones as zone}
function create_each_block$1(ctx) {
	let current;

	const icon = new Icon({
			props: {
				type: /*zone*/ ctx[13].type,
				size: "sm",
				bordered: /*zone*/ ctx[13].filled
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*planet*/ 1) icon_changes.type = /*zone*/ ctx[13].type;
			if (dirty & /*planet*/ 1) icon_changes.bordered = /*zone*/ ctx[13].filled;
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(85:16) {#each planet.production_zones as zone}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let div_class_value;
	let current;
	let dispose;
	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*planet*/ ctx[0].settled) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "mdc-card " + (/*selectable*/ ctx[1]
			? /*planet*/ ctx[0].selected ? "selected" : "selectable"
			: "bordered") + " " + (/*mini*/ ctx[2] ? "mini" : "") + " svelte-1ysiaxo");

			attr_dev(div, "style", /*bg*/ ctx[3]);
			add_location(div, file$2, 70, 4, 1740);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler*/ ctx[7], false, false, false),
				listen_dev(div, "touch", /*touch_handler*/ ctx[8], false, false, false),
				listen_dev(div, "touchstart", /*touchstart_handler*/ ctx[9], false, false, false),
				listen_dev(div, "touchend", /*touchend_handler*/ ctx[10], false, false, false),
				listen_dev(div, "tap", /*tap_handler*/ ctx[11], false, false, false),
				listen_dev(div, "touchmove", /*touchmove_handler*/ ctx[12], false, false, false)
			];
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}

			if (!current || dirty & /*selectable, planet, mini*/ 7 && div_class_value !== (div_class_value = "mdc-card " + (/*selectable*/ ctx[1]
			? /*planet*/ ctx[0].selected ? "selected" : "selectable"
			: "bordered") + " " + (/*mini*/ ctx[2] ? "mini" : "") + " svelte-1ysiaxo")) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*bg*/ 8) {
				attr_dev(div, "style", /*bg*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { planet = { name: " " } } = $$props,
		{ selectable = false } = $$props,
		{ mini = false } = $$props;

	let key = ({
		advanced: "adv",
		fertile: "fer",
		metallic: "met"
	})[planet.type];

	let color, bg, logoBg;
	console.log(planet);

	onMount(() => {
		color = key == "fer"
		? "rgb(148, 197, 152)"
		: key == "adv" ? "rgb(231, 184, 215)" : "rgb(187, 55, 55)";

		$$invalidate(3, bg = `color:${color};background:radial-gradient(circle at 50% 33%, ${color}, rgb(80,80,80) 30%)`);
		logoBg = `background-color: ${color};`;
	});

	const writable_props = ["planet", "selectable", "mini"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<PlanetCard> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("PlanetCard", $$slots, []);

	function click_handler(event) {
		bubble($$self, event);
	}

	function touch_handler(event) {
		bubble($$self, event);
	}

	function touchstart_handler(event) {
		bubble($$self, event);
	}

	function touchend_handler(event) {
		bubble($$self, event);
	}

	function tap_handler(event) {
		bubble($$self, event);
	}

	function touchmove_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("planet" in $$props) $$invalidate(0, planet = $$props.planet);
		if ("selectable" in $$props) $$invalidate(1, selectable = $$props.selectable);
		if ("mini" in $$props) $$invalidate(2, mini = $$props.mini);
	};

	$$self.$capture_state = () => ({
		IconBar,
		Icon,
		onMount,
		planet,
		selectable,
		mini,
		key,
		color,
		bg,
		logoBg
	});

	$$self.$inject_state = $$props => {
		if ("planet" in $$props) $$invalidate(0, planet = $$props.planet);
		if ("selectable" in $$props) $$invalidate(1, selectable = $$props.selectable);
		if ("mini" in $$props) $$invalidate(2, mini = $$props.mini);
		if ("key" in $$props) $$invalidate(4, key = $$props.key);
		if ("color" in $$props) color = $$props.color;
		if ("bg" in $$props) $$invalidate(3, bg = $$props.bg);
		if ("logoBg" in $$props) logoBg = $$props.logoBg;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		planet,
		selectable,
		mini,
		bg,
		key,
		color,
		logoBg,
		click_handler,
		touch_handler,
		touchstart_handler,
		touchend_handler,
		tap_handler,
		touchmove_handler
	];
}

class PlanetCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { planet: 0, selectable: 1, mini: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PlanetCard",
			options,
			id: create_fragment$2.name
		});
	}

	get planet() {
		throw new Error("<PlanetCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set planet(value) {
		throw new Error("<PlanetCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selectable() {
		throw new Error("<PlanetCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectable(value) {
		throw new Error("<PlanetCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mini() {
		throw new Error("<PlanetCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mini(value) {
		throw new Error("<PlanetCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { IconBar as I, PlanetCard as P, Icon as a };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxhbmV0Q2FyZC43N2Q0ZjVkNy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvSWNvbi5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9JY29uQmFyLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BsYW5ldENhcmQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgbGV0IHR5cGUsc2l6ZSxpbmZsdWVuY2U9MCxib3JkZXJlZD1mYWxzZTtcclxuICAgIGxldCBsYWJlbCA9IHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpLFxyXG4gICAgICAgIGtleSA9IHtwcm9kdWNlOidwcm8nLHRyYWRlOid0cmQnLHBvbGl0aWNzOidwb2wnLHJlc2VhcmNoOidyZXMnLHN1cnZleTonc3VyJyx3YXJmYXJlOid3YXInLGNvbG9uaXplOidjb2wnLFxyXG4gICAgICAgIHdhdGVyOid3dHInLCBmb29kOidmdWQnLCBzaWxpY29uOidzaWwnLCBvcmU6J29yZScsIGFkdmFuY2VkOidhZHYnLCBmZXJ0aWxlOidmZXInLCBtZXRhbGxpYzonbWV0JyxpbmZsdWVuY2U6J2luZid9W3R5cGVdO1xyXG48L3NjcmlwdD5cclxuPHN0eWxlPlxyXG4gICAgLnBybyB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvciA6IHJnYigyNTUsIDI1NSwgMTE5KTtcclxuICAgIH1cclxuICAgIC5yZXMge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3IgOiByZ2IoMTE5LCAxODMsIDI1NSk7XHJcbiAgICB9XHJcbiAgICAudHJkIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDogcmdiKDI1NSwgMTY5LCAyNDEpO1xyXG4gICAgfVxyXG4gICAgLnBvbCB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvciA6IHJnYigyMDksIDE4NiwgMTQzKTtcclxuICAgIH1cclxuICAgIC5zdXIge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3IgOiByZ2IoMTQzLCAyNTUsIDE0Myk7XHJcbiAgICB9XHJcbiAgICAud2FyIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDogcmdiKDI1NSwgOTgsIDk4KTtcclxuICAgIH1cclxuICAgIC5jb2wge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3IgOiByZ2IoMjU1LCAxODQsIDEwMik7XHJcbiAgICB9XHJcbiAgICAuZmVyIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDogcmdiKDE0OCwgMTk3LCAxNTIpO1xyXG4gICAgfVxyXG4gICAgLmFkdiB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvciA6IHJnYigyMzEsIDE4NCwgMjE1KTtcclxuICAgIH1cclxuICAgIC5tZXQge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3IgOiByZ2IoMTg3LCA1NSwgNTUpO1xyXG4gICAgfVxyXG4gICAgLmZ1ZCB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvciA6IHJnYigyNTUsIDIxNSwgMTQyKTtcclxuICAgIH1cclxuICAgIC5vcmUge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3IgOiByZ2IoMjEyLCAxMzksIDU2KTtcclxuICAgIH1cclxuICAgIC53dHIge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3IgOiByZ2IoMTE1LCAxNDEsIDI1Myk7XHJcbiAgICB9XHJcbiAgICAuc2lsIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDogcmdiKDE2MSwgNDUsIDI1NSk7XHJcbiAgICB9XHJcbiAgICAuaWNvLXNtIHtcclxuICAgICAgICBwYWRkaW5nOi4yZW07XHJcbiAgICAgICAgaGVpZ2h0Oi44ZW07XHJcbiAgICAgICAgd2lkdGg6LjhlbTtcclxuICAgIH1cclxuICAgIC5pY28tY29udC1sZywgLmljby1jb250LXNtIHtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcclxuXHRcdGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIH1cclxuICAgIC5pY28tY29udC1zbSB7XHJcbiAgICAgICAgaGVpZ2h0OjEuMmVtO1xyXG4gICAgICAgIHdpZHRoOjEuMmVtO1xyXG4gICAgfVxyXG4gICAgLmljby1sZyB7XHJcbiAgICAgICAgaGVpZ2h0OjJlbTtcclxuICAgICAgICB3aWR0aDoyZW07XHJcbiAgICB9XHJcbiAgICAuaWNvLWNvbnQtbGcge1xyXG4gICAgICAgIGhlaWdodDoyZW07XHJcbiAgICAgICAgd2lkdGg6MmVtO1xyXG4gICAgfVxyXG4gICAgLmluZiB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGJhY2tncm91bmQ6IGdyZXk7XHJcbiAgICB9XHJcbiAgICAubnVtIHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiA1MCU7XHJcbiAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogLjV2aDtcclxuICAgIH1cclxuPC9zdHlsZT5cclxueyNpZiB0eXBlPT0naW5mbHVlbmNlJ31cclxuPGRpdiBjbGFzcz0naWNvLWNvbnQte3NpemV9JyBzdHlsZT0neyhib3JkZXJlZCk/J2JvcmRlcjoxcHggc29saWQgYmxhY2snOicnfSc+XHJcbiAgICA8aW1nICBjbGFzcz0naWNvLXtzaXplfSBpbmYnIHN0eWxlPSd0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTUlLCA1JSk7Oycgc3JjPScuL2ltYWdlcy97a2V5fS5zdmcnIGFsdD17a2V5fT5cclxuICAgIDxzcGFuIGNsYXNzPSdudW0nPntpbmZsdWVuY2V9PC9zcGFuPlxyXG48L2Rpdj5cclxuezplbHNlfVxyXG48ZGl2IGNsYXNzPSdpY28tY29udC17c2l6ZX0ge2tleX0nPlxyXG4gICAgPGltZyBjbGFzcz0naWNvLXtzaXplfScgc3JjPScuL2ltYWdlcy97a2V5fS5zdmcnIGFsdD17a2V5fT5cclxuPC9kaXY+XHJcbnsvaWZ9IiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi5zdmVsdGUnO1xyXG4gICAgZXhwb3J0IGxldCBzdXJ2ZXksIHdhcmZhcmUsIGNvbG9uaXplLCBwcm9kdWNlLCB0cmFkZSwgcmVzZWFyY2g7XHJcbiAgICBsZXQgaWNvbnMgPSBbXTtcclxuICAgIGxldCBmID0gKGMscykgPT4geyBmb3IgKGxldCBpID0gMDsgaSA8IGM7IGkrKykgaWNvbnMgPSBbLi4uaWNvbnMsIHtzaXplOidzbScsdHlwZTpzfV07IH1cclxuICAgIGYoc3VydmV5LFwic3VydmV5XCIpO1xyXG4gICAgZih3YXJmYXJlLFwid2FyZmFyZVwiKTtcclxuICAgIGYoY29sb25pemUsXCJjb2xvbml6ZVwiKTtcclxuICAgIGYocHJvZHVjZSxcInByb2R1Y2VcIik7XHJcbiAgICBmKHRyYWRlLFwidHJhZGVcIik7XHJcbiAgICBmKHJlc2VhcmNoLFwicmVzZWFyY2hcIik7XHJcbiAgICBsZXQgc2l6ZSA9IGBtaW4taGVpZ2h0OiBjYWxjKCR7aWNvbnMubGVuZ3RofSoyZW0pO21heC1oZWlnaHQ6IGNhbGMoJHtpY29ucy5sZW5ndGh9KjJlbSk7YDtcclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT5cclxuICAgIC5pY29uYmFyIHtcclxuICAgICAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcbjxkaXYgY2xhc3M9XCJpY29uYmFyXCIgc3R5bGU9e3NpemV9PlxyXG4gICAgeyNlYWNoIGljb25zIGFzIGljb259XHJcbiAgICAgICAgPEljb24gey4uLmljb259Lz5cclxuICAgICAgICA8ZGl2IHN0eWxlPVwibWluLWhlaWdodDowLjF2aDttYXgtaGVpZ2h0OjAuMXZoO1wiPjwvZGl2PlxyXG4gICAgey9lYWNofVxyXG48L2Rpdj4iLCI8c2NyaXB0PiBcclxuaW1wb3J0IEljb25CYXIgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFyLnN2ZWx0ZSc7XHJcbmltcG9ydCBJY29uIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvbi5zdmVsdGUnO1xyXG5pbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJztcclxuXHJcbiAgICBleHBvcnQgbGV0IHBsYW5ldD17bmFtZTpcIiBcIn0sIHNlbGVjdGFibGU9ZmFsc2UsIG1pbmk9ZmFsc2U7XHJcbmxldCBrZXkgPSB7YWR2YW5jZWQ6J2FkdicsIGZlcnRpbGU6J2ZlcicsIG1ldGFsbGljOidtZXQnLH1bcGxhbmV0LnR5cGVdO1xyXG4gICAgbGV0IGNvbG9yLGJnLGxvZ29CZztcclxuICAgIGNvbnNvbGUubG9nKHBsYW5ldCk7XHJcbiAgICBvbk1vdW50KCgpPT57XHJcbiAgICAgICAgY29sb3IgPSAgKGtleT09J2ZlcicpID8gJ3JnYigxNDgsIDE5NywgMTUyKScgOiAoa2V5PT0nYWR2JykgPyAncmdiKDIzMSwgMTg0LCAyMTUpJyA6ICdyZ2IoMTg3LCA1NSwgNTUpJztcclxuICAgICAgICBiZyA9IGBjb2xvcjoke2NvbG9yfTtiYWNrZ3JvdW5kOnJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgNTAlIDMzJSwgJHtjb2xvcn0sIHJnYig4MCw4MCw4MCkgMzAlKWBcclxuICAgICAgICBsb2dvQmcgPSBgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcn07YDtcclxuICAgIH0pXHJcblxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuXHRAaW1wb3J0IHVybChodHRwczovL3VucGtnLmNvbS9Ac211aS9jYXJkQGxhdGVzdC9iYXJlLmNzcyk7XHJcblx0Lm1kYy1jYXJkIHtcclxuXHRcdG92ZXJmbG93OmhpZGRlbjtcclxuXHRcdHBhZGRpbmc6MXZoO1xyXG5cdFx0bWluLWhlaWdodDogMzB2aDsgXHJcblx0XHRtaW4td2lkdGg6IDIxdmg7IFxyXG5cdFx0bWF4LWhlaWdodDogMzB2aDsgXHJcblx0XHRtYXgtd2lkdGg6IDIxdmg7IFxyXG5cdFx0bWFyZ2luLWxlZnQ6MXZoO1xyXG5cdFx0bWFyZ2luLXJpZ2h0OjF2aDtcclxuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcclxuICAgIH1cclxuICAgIC5tZGMtY2FyZC5taW5pIHtcclxuXHRcdG1pbi1oZWlnaHQ6IDE2dmg7XHJcblx0XHRtYXgtaGVpZ2h0OiAxNnZoO1xyXG4gICAgfVxyXG5cdC50aXRsZSB7XHJcblx0XHRkaXNwbGF5OmZsZXg7XHJcblx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xyXG5cdFx0bWF4LWhlaWdodDogM3ZoO1xyXG5cdFx0bWluLWhlaWdodDogM3ZoO1xyXG5cdFx0Zm9udDogMS41dmggYm9sZDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBlbmQ7XHJcblx0fVxyXG5cdC5sb2dvIHtcclxuXHRcdGhlaWdodDoxMnZoO1xyXG5cdFx0d2lkdGg6MTJ2aDtcclxuXHRcdG1hcmdpbi1sZWZ0OjN2aDtcclxuXHRcdGJvcmRlci1yYWRpdXM6IDEwdmggMHZoIDEwdmggMHZoO1xyXG5cdFx0dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7XHJcblx0fVxyXG5cdC5sb2dvIGltZ3tcclxuXHRcdG1hcmdpbi1sZWZ0OjIuMjV2aDtcclxuXHRcdG1hcmdpbi10b3A6MnZoO1xyXG5cdFx0aGVpZ2h0OjcuNXZoO1xyXG5cdFx0d2lkdGg6Ny41dmg7XHJcblx0XHR0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG5cdFx0b3ZlcmZsb3c6aGlkZGVuO1xyXG5cdH1cclxuICAgIC5uYW1lIHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOjIwJTtcclxuICAgICAgICBsZWZ0OjIlO1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcclxuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gbGVmdDtcclxuICAgICAgICBmb250LXNpemU6MS42dmg7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgICAgIGJhY2tncm91bmQ6cmdiKDEwMCwxMDAsMTAwKTtcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6MWVtO1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6MWVtO1xyXG4gICAgfVxyXG48L3N0eWxlPlxyXG4gICAgPGRpdiBjbGFzcz1cIm1kYy1jYXJkIHsoc2VsZWN0YWJsZSkgPyAocGxhbmV0LnNlbGVjdGVkKSA/ICdzZWxlY3RlZCcgOiAnc2VsZWN0YWJsZScgOiAnYm9yZGVyZWQnfSB7KG1pbmkpID8gJ21pbmknIDogJycgfVwiIHN0eWxlPXtiZ30gb246Y2xpY2sgb246dG91Y2ggb246dG91Y2hzdGFydCBvbjp0b3VjaGVuZCBvbjp0YXAgb246dG91Y2htb3ZlPlxyXG4gICAgICAgIHsjaWYgcGxhbmV0LnNldHRsZWR9XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPiBcclxuICAgICAgICAgICAgICAgIDxJY29uQmFyIHsuLi5wbGFuZXQuaWNvbnN9Lz4gIFxyXG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJtYXJnaW4tbGVmdDoxNXZoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT0naW5mbHVlbmNlJyBzaXplPSdzbScgaW5mbHVlbmNlPXtwbGFuZXQuaW5mbHVlbmNlfS8+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvZ29cIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9pbWFnZXMve2tleX0uc3ZnXCIgYWx0PVwie3BsYW5ldC5uYW1lfVwiPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFtZSc+e3BsYW5ldC5uYW1lfTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IGJvdHRvbTozJTsgd2lkdGg6MTUlOyBoZWlnaHQgMTUlOyB0ZXh0LWFsaWduOiBjZW50ZXI7XCI+XHJcbiAgICAgICAgICAgICAgICB7I2VhY2ggcGxhbmV0LnByb2R1Y3Rpb25fem9uZXMgYXMgem9uZX1cclxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPXt6b25lLnR5cGV9IHNpemU9XCJzbVwiIGJvcmRlcmVkPXt6b25lLmZpbGxlZH0vPlxyXG4gICAgICAgICAgICAgICAgey9lYWNofVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICB7OmVsc2V9XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPiBTdXJ2ZXlpbmcgQWxpZW4gV29ybGQgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9nb1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuL2ltYWdlcy9jb2wuc3ZnXCIgYWx0PVwie3BsYW5ldC5uYW1lfVwiPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6aW5saW5lLWJsb2NrXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cImZsb2F0OmxlZnRcIj5cclxuICAgICAgICAgICAgICAgICAgICB7cGxhbmV0LnNldHRsZV9jb3N0fVxyXG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJjb2xvbml6ZVwiIHNpemU9XCJzbVwiLz5cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiZmxvYXQ6cmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwid2FyZmFyZVwiIHNpemU9XCJzbVwiLz5cclxuICAgICAgICAgICAgICAgICAgICB7cGxhbmV0LmNvbnF1ZXJfY29zdH1cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgYm90dG9tOjMlOyB3aWR0aDo4NSU7IHRleHQtYWxpZ246IGNlbnRlcjsgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+e3BsYW5ldC50eXBlfTwvZGl2PlxyXG4gICAgey9pZn1cclxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OERBOEZxQixHQUFJOzBEQUFrQixHQUFHO2dDQUFZLEdBQUc7O21FQUR2QyxHQUFJLG9CQUFHLEdBQUc7Ozs7Ozs7O3NGQUNYLEdBQUk7Ozs7MkZBREgsR0FBSSxvQkFBRyxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFIVCxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs2Q0FBVCxHQUFTOzs7Ozs7OERBRFYsR0FBSTs7MERBQStELEdBQUc7Z0NBQVksR0FBRzs7OzttRUFEckYsR0FBSTt5REFBWSxHQUFRLE1BQUUsd0JBQXdCLEdBQUMsRUFBRTs7Ozs7Ozs7Ozs7c0ZBQ3JELEdBQUk7Ozs7K0RBQ0gsR0FBUzs7MkZBRlYsR0FBSTs7OztxRkFBWSxHQUFRLE1BQUUsd0JBQXdCLEdBQUMsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBRHRFLEdBQUksT0FBRSxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXRGUCxJQUFJO0lBQUMsSUFBSTtJQUFDLFNBQVMsR0FBQyxDQUFDO0lBQUMsUUFBUSxHQUFDLEtBQUs7O0tBQzNDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENB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
