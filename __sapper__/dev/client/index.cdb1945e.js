import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, u as assign, H as onMount, v as validate_slots, I as globals, c as element, f as claim_element, g as children, b as detach_dev, h as attr_dev, j as add_location, a as insert_dev, B as transition_in, E as group_outros, C as transition_out, F as check_outros, r as validate_each_argument, G as destroy_each, e as empty, w as create_component, l as space, t as text, x as claim_component, m as claim_space, o as claim_text, k as append_dev, y as mount_component, J as run_all, K as listen_dev, z as get_spread_update, A as get_spread_object, q as set_data_dev, D as destroy_component, L as bubble, n as noop, M as beforeUpdate, p as set_style, N as afterUpdate, O as validate_each_keys, P as null_to_empty, Q as update_keyed_each, R as set_input_value, T as outro_and_destroy_block } from './client.7cc661bc.js';
import { I as IconBar, a as Icon, P as PlanetCard } from './PlanetCard.bba5bab8.js';

/* src\components\Tech.svelte generated by Svelte v3.20.1 */

const { console: console_1 } = globals;
const file = "src\\components\\Tech.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (203:4) {#if !mini}
function create_if_block(ctx) {
	let div;
	let current;
	let if_block = /*desc*/ ctx[5][/*card*/ ctx[0].type] !== undefined && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "desc svelte-4d9gi8");
			add_location(div, file, 203, 8, 7818);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*desc*/ ctx[5][/*card*/ ctx[0].type] !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(203:4) {#if !mini}",
		ctx
	});

	return block;
}

// (205:8) {#if desc[card.type] !== undefined}
function create_if_block_1(ctx) {
	let p;
	let current;
	let each_value = /*desc*/ ctx[5][/*card*/ ctx[0].type].desc.action.split("<icon>");
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			p = element("p");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(p_nodes);
			}

			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "action svelte-4d9gi8");
			add_location(p, file, 205, 12, 7895);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(p, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*desc, card*/ 33) {
				each_value = /*desc*/ ctx[5][/*card*/ ctx[0].type].desc.action.split("<icon>");
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(p, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(205:8) {#if desc[card.type] !== undefined}",
		ctx
	});

	return block;
}

// (209:20) {:else}
function create_else_block(ctx) {
	let t_value = /*piece*/ ctx[15] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*card*/ 1 && t_value !== (t_value = /*piece*/ ctx[15] + "")) set_data_dev(t, t_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(209:20) {:else}",
		ctx
	});

	return block;
}

// (208:20) {#if ['survey','warfare','colonize','research','produce','trade'].includes(piece)}
function create_if_block_2(ctx) {
	let current;

	const icon = new Icon({
			props: { type: /*piece*/ ctx[15], size: "sm" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*card*/ 1) icon_changes.type = /*piece*/ ctx[15];
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(208:20) {#if ['survey','warfare','colonize','research','produce','trade'].includes(piece)}",
		ctx
	});

	return block;
}

// (207:16) {#each desc[card.type].desc.action.split('<icon>') as piece}
function create_each_block(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*card*/ 1) show_if = !!["survey", "warfare", "colonize", "research", "produce", "trade"].includes(/*piece*/ ctx[15]);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(207:16) {#each desc[card.type].desc.action.split('<icon>') as piece}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let t0;
	let p;
	let t1_value = /*card*/ ctx[0].name + "";
	let t1;
	let t2;
	let div1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t3;
	let div2_class_value;
	let current;
	let dispose;
	const iconbar_spread_levels = [/*card*/ ctx[0].icons];
	let iconbar_props = {};

	for (let i = 0; i < iconbar_spread_levels.length; i += 1) {
		iconbar_props = assign(iconbar_props, iconbar_spread_levels[i]);
	}

	const iconbar = new IconBar({ props: iconbar_props, $$inline: true });
	let if_block = !/*mini*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			create_component(iconbar.$$.fragment);
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			img = element("img");
			t3 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(iconbar.$$.fragment, div0_nodes);
			t0 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true });
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div2_nodes);
			if (if_block) if_block.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-4d9gi8");
			add_location(p, file, 197, 8, 7652);
			attr_dev(div0, "class", "title svelte-4d9gi8");
			add_location(div0, file, 195, 4, 7587);
			if (img.src !== (img_src_value = "./images/tech.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[0].name);
			attr_dev(img, "class", "svelte-4d9gi8");
			add_location(img, file, 200, 8, 7732);
			attr_dev(div1, "class", "logo svelte-4d9gi8");
			attr_dev(div1, "style", /*logoBg*/ ctx[4]);
			add_location(div1, file, 199, 4, 7688);

			attr_dev(div2, "class", div2_class_value = "mdc-card " + (/*selectable*/ ctx[1]
			? /*card*/ ctx[0].selected ? "selected" : "selectable"
			: "bordered") + " " + (/*mini*/ ctx[2] ? "mini" : "") + " svelte-4d9gi8");

			attr_dev(div2, "style", /*bg*/ ctx[3]);
			add_location(div2, file, 194, 0, 7386);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			mount_component(iconbar, div0, null);
			append_dev(div0, t0);
			append_dev(div0, p);
			append_dev(p, t1);
			append_dev(div2, t2);
			append_dev(div2, div1);
			append_dev(div1, img);
			append_dev(div2, t3);
			if (if_block) if_block.m(div2, null);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div2, "click", /*click_handler*/ ctx[9], false, false, false),
				listen_dev(div2, "touch", /*touch_handler*/ ctx[10], false, false, false),
				listen_dev(div2, "touchstart", /*touchstart_handler*/ ctx[11], false, false, false),
				listen_dev(div2, "touchend", /*touchend_handler*/ ctx[12], false, false, false),
				listen_dev(div2, "tap", /*tap_handler*/ ctx[13], false, false, false),
				listen_dev(div2, "touchmove", /*touchmove_handler*/ ctx[14], false, false, false)
			];
		},
		p: function update(ctx, [dirty]) {
			const iconbar_changes = (dirty & /*card*/ 1)
			? get_spread_update(iconbar_spread_levels, [get_spread_object(/*card*/ ctx[0].icons)])
			: {};

			iconbar.$set(iconbar_changes);
			if ((!current || dirty & /*card*/ 1) && t1_value !== (t1_value = /*card*/ ctx[0].name + "")) set_data_dev(t1, t1_value);

			if (!current || dirty & /*card*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[0].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (!current || dirty & /*logoBg*/ 16) {
				attr_dev(div1, "style", /*logoBg*/ ctx[4]);
			}

			if (!/*mini*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div2, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*selectable, card, mini*/ 7 && div2_class_value !== (div2_class_value = "mdc-card " + (/*selectable*/ ctx[1]
			? /*card*/ ctx[0].selected ? "selected" : "selectable"
			: "bordered") + " " + (/*mini*/ ctx[2] ? "mini" : "") + " svelte-4d9gi8")) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (!current || dirty & /*bg*/ 8) {
				attr_dev(div2, "style", /*bg*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbar.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbar.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(iconbar);
			if (if_block) if_block.d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const desc = {
		" ": { "desc": { "role": "", "action": "" } },
		"survey": {
			"desc": {
				"role": "Look at <icon>survey<icon> -1 planet cards, keep 1 \n Leader: Look at 1 additional card",
				"action": "Draw 3 cards"
			}
		},
		"warfare": {
			"desc": {
				"role": "Collect 1 fighter per <icon>warfare<icon> \n Leader: May attack 1 planet instead",
				"action": "Attack 1 planet OR collect 1 fighter"
			}
		},
		"colonize": {
			"desc": {
				"action": "Settle 1 planet OR +1 colony",
				"role": "+1 colony per <icon>colonize<icon> \n Leader: May settle 1 planet instead"
			}
		},
		"producetrade": {
			"desc": {
				"action": "Produce 1 resource OR Trade 1 resource",
				"role": "Produce 1 resource per <icon>produce<icon> OR Trade 1 resource per <icon>trade<icon> \n Leader: +<icon>produce<icon> OR <icon>trade<icon>"
			}
		},
		"research": {
			"desc": {
				"action": "Remove up to 3 cards in your and from the game",
				"role": "Auire 1 technology card after satisfying <icon>research<icon> costs and planet requirements \n Leader: +<icon>research<icon>"
			}
		},
		"politics": {
			"desc": {
				"action": "Remove tis card from the game. Place any 1 role card from the stacks into your hand",
				"role": ""
			}
		},
		"improved_trade": {
			"desc": {
				"action": "Collect 1 influence from the supply",
				"role": ""
			}
		},
		"improved_research": {
			"desc": {
				"action": "Draw 1 card. Remove up to 3 cards in your hand from the game",
				"role": ""
			}
		},
		"improved_production": {
			"desc": {
				"action": "Produce 2 resources",
				"role": ""
			}
		},
		"improved_warfare": {
			"desc": {
				"action": "Collect 2 fighter OR Attack 1 planet",
				"role": ""
			}
		},
		"improved_colonize": {
			"desc": {
				"action": "Settle 1 planet (optional). \n Settle another planet OR +1 colony",
				"role": ""
			}
		},
		"improved_survey": {
			"desc": { "action": "Draw 3 cards", "role": "" }
		},
		"survey_team": {
			"desc": {
				"action": "Take the top card of the planet deck and put it face down into your empire",
				"role": ""
			}
		},
		"war_path": {
			"desc": {
				"action": "Attack up to 2 planets",
				"role": ""
			}
		},
		"terraforming": {
			"desc": {
				"action": "Add this card to a planet as 2 colonies. If that fulfills the printed colonize cost, settle the planet \n (ignore colonize cost discounts)",
				"role": ""
			}
		},
		"genetic_engineering": {
			"desc": {
				"action": "Collect +1 influence for each TYPE of resource you produce this turn",
				"role": ""
			}
		},
		"artificial_intelligence'": {
			"desc": {
				"action": "Place any 2 role cards from the stacks into your hand",
				"role": ""
			}
		},
		"diverse_markets": {
			"desc": {
				"action": "Collect +1 influence for each TYPE of resource you trade this turn",
				"role": ""
			}
		},
		"specialization": {
			"desc": {
				"action": "Choose 1 resource TYPE. Collect +1 influence for each resource of that TYPE you trade this turn",
				"role": ""
			}
		},
		"mobilization": {
			"desc": {
				"action": "Collect 2 fighter. You may attack 1 planet after your role phase this turn",
				"role": ""
			}
		},
		"data_network": {
			"desc": {
				"action": "Draw 2 cards. Remove any number of cards in your hand from the game",
				"role": ""
			}
		},
		"abundance": {
			"desc": {
				"action": "Planets you settle or attack come into play with all resource slots filled",
				"role": ""
			}
		},
		"adaptability": {
			"desc": {
				"action": "Your standard research role cards gain all symboles. They can be used to boost or follow any role",
				"role": ""
			}
		},
		"bureaucracy": {
			"desc": {
				"action": "You may use the leader bonus when following the colonize or warfare roles",
				"role": ""
			}
		},
		"dissension": {
			"desc": {
				"action": "Draw 1 dditional card when dissenting",
				"role": ""
			}
		},
		"hyperefficiency": {
			"desc": {
				"action": "You may remove any number of cards in your hand form the game each turn",
				"role": ""
			}
		},
		"imperialism": {
			"desc": {
				"action": "<icon>survey<icon> <icon>trade<icon> <icon>warfare<icon>",
				"role": ""
			}
		},
		"logistics": {
			"desc": {
				"action": "Play the action and role phases of your turn in any order",
				"role": ""
			}
		},
		"productivity": {
			"desc": {
				"action": "You may play an additional card for its action effect during your action phase",
				"role": ""
			}
		},
		"scorched_earth_policy": {
			"desc": {
				"action": "-2 to our warfare costs. When you attack a planet, leave a fight on it. that planet cannot store resources",
				"role": ""
			}
		},
		"streamlining": {
			"desc": {
				"action": "You may remove 1 card in your hand from the game each turn",
				"role": ""
			}
		},
		"weapons_emporium": {
			"desc": {
				"action": "You may trade fighters as if they were resources (fighter is not a resource TYPE)",
				"role": ""
			}
		},
		"fertile_grounds": {
			"desc": {
				"role": "<icon>colonize<icon> <icon>produce<icon> <icon>research<icon>",
				"action": ""
			}
		}
	};

	let hashCode = (str, i = 0) => {
		console.log("str", str);
		console.log("length", str.length);

		return i >= str.length
		? 0
		: hashCode(str, i + 1) + ((str.charCodeAt(i) << 5) - str.charCodeAt(i));
	};

	let intToARGB = i => {
		let rgb = (i >> 24 & 255).toString(16) + (i >> 16 & 255).toString(16) + (i >> 8 & 255).toString(16) + (i & 255).toString(16);
		rgb += "000000";
		return rgb.substring(0, 6);
	};

	String.prototype.toHexColour = () => intToARGB(hashCode(this));

	let { card = { name: " " } } = $$props,
		{ selectable = false } = $$props,
		{ mini = false } = $$props;

	let color, bg, logoBg;

	onMount(() => {
		console.log("card name", card.name);
		color = "#" + intToARGB(hashCode(card.name));
		$$invalidate(3, bg = `color:${color};background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  ${color} 8vh,  ${color} 8vh,  ${color} 12vh,  ${color} 12vh,  rgb(80,80,80) 16vh );`);
		$$invalidate(4, logoBg = `background-color: ${color};`);
	});

	const writable_props = ["card", "selectable", "mini"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Tech> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Tech", $$slots, []);

	function click_handler(event) {
		bubble($$self, event);
	}

	function touch_handler(event) {
		bubble($$self, event);
	}

	function touchstart_handler(event) {
		bubble($$self, event);
	}

	function touchend_handler(event) {
		bubble($$self, event);
	}

	function tap_handler(event) {
		bubble($$self, event);
	}

	function touchmove_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("card" in $$props) $$invalidate(0, card = $$props.card);
		if ("selectable" in $$props) $$invalidate(1, selectable = $$props.selectable);
		if ("mini" in $$props) $$invalidate(2, mini = $$props.mini);
	};

	$$self.$capture_state = () => ({
		IconBar,
		Icon,
		onMount,
		desc,
		hashCode,
		intToARGB,
		card,
		selectable,
		mini,
		color,
		bg,
		logoBg
	});

	$$self.$inject_state = $$props => {
		if ("hashCode" in $$props) hashCode = $$props.hashCode;
		if ("intToARGB" in $$props) intToARGB = $$props.intToARGB;
		if ("card" in $$props) $$invalidate(0, card = $$props.card);
		if ("selectable" in $$props) $$invalidate(1, selectable = $$props.selectable);
		if ("mini" in $$props) $$invalidate(2, mini = $$props.mini);
		if ("color" in $$props) color = $$props.color;
		if ("bg" in $$props) $$invalidate(3, bg = $$props.bg);
		if ("logoBg" in $$props) $$invalidate(4, logoBg = $$props.logoBg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		card,
		selectable,
		mini,
		bg,
		logoBg,
		desc,
		color,
		hashCode,
		intToARGB,
		click_handler,
		touch_handler,
		touchstart_handler,
		touchend_handler,
		tap_handler,
		touchmove_handler
	];
}

class Tech extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { card: 0, selectable: 1, mini: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tech",
			options,
			id: create_fragment.name
		});
	}

	get card() {
		throw new Error("<Tech>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set card(value) {
		throw new Error("<Tech>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selectable() {
		throw new Error("<Tech>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectable(value) {
		throw new Error("<Tech>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mini() {
		throw new Error("<Tech>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mini(value) {
		throw new Error("<Tech>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\Card.svelte generated by Svelte v3.20.1 */
const file$1 = "src\\components\\Card.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (144:0) {:else}
function create_else_block$1(ctx) {
	let div2;
	let div0;
	let current_block_type_index;
	let if_block0;
	let t0;
	let p;
	let t1;
	let t2;
	let div1;
	let current_block_type_index_1;
	let if_block1;
	let t3;
	let div2_class_value;
	let current;
	let dispose;
	const if_block_creators = [create_if_block_7, create_else_block_4];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (!/*key*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const if_block_creators_1 = [create_if_block_6, create_else_block_3];
	const if_blocks_1 = [];

	function select_block_type_2(ctx, dirty) {
		if (!/*key*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_2(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	let if_block2 = !/*mini*/ ctx[3] && create_if_block_2$1(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			if_block0.c();
			t0 = space();
			p = element("p");
			t1 = text(/*label*/ ctx[4]);
			t2 = space();
			div1 = element("div");
			if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if_block0.l(div0_nodes);
			t0 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, /*label*/ ctx[4]);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			if_block1.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div2_nodes);
			if (if_block2) if_block2.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-103yabx");
			add_location(p, file$1, 152, 2, 4856);
			attr_dev(div0, "class", "title svelte-103yabx");
			add_location(div0, file$1, 145, 2, 4692);
			attr_dev(div1, "class", "logo svelte-103yabx");
			attr_dev(div1, "style", /*logoBg*/ ctx[7]);
			add_location(div1, file$1, 154, 2, 4882);

			attr_dev(div2, "class", div2_class_value = "mdc-card " + (/*selectable*/ ctx[1]
			? /*card*/ ctx[0].selected ? "selected" : "selectable"
			: "bordered") + " " + (/*mini*/ ctx[3] ? "mini" : "") + " svelte-103yabx");

			attr_dev(div2, "style", /*bg*/ ctx[6]);
			add_location(div2, file$1, 144, 1, 4494);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			if_blocks[current_block_type_index].m(div0, null);
			append_dev(div0, t0);
			append_dev(div0, p);
			append_dev(p, t1);
			append_dev(div2, t2);
			append_dev(div2, div1);
			if_blocks_1[current_block_type_index_1].m(div1, null);
			append_dev(div2, t3);
			if (if_block2) if_block2.m(div2, null);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div2, "click", /*click_handler*/ ctx[9], false, false, false),
				listen_dev(div2, "touch", /*touch_handler*/ ctx[10], false, false, false),
				listen_dev(div2, "touchstart", /*touchstart_handler*/ ctx[11], false, false, false),
				listen_dev(div2, "touchend", /*touchend_handler*/ ctx[12], false, false, false),
				listen_dev(div2, "tap", /*tap_handler*/ ctx[13], false, false, false),
				listen_dev(div2, "touchmove", /*touchmove_handler*/ ctx[14], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(div0, t0);
			}

			if (!current || dirty & /*label*/ 16) set_data_dev(t1, /*label*/ ctx[4]);
			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_2(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div1, null);
			}

			if (!current || dirty & /*logoBg*/ 128) {
				attr_dev(div1, "style", /*logoBg*/ ctx[7]);
			}

			if (!/*mini*/ ctx[3]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
					transition_in(if_block2, 1);
				} else {
					if_block2 = create_if_block_2$1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div2, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*selectable, card, mini*/ 11 && div2_class_value !== (div2_class_value = "mdc-card " + (/*selectable*/ ctx[1]
			? /*card*/ ctx[0].selected ? "selected" : "selectable"
			: "bordered") + " " + (/*mini*/ ctx[3] ? "mini" : "") + " svelte-103yabx")) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (!current || dirty & /*bg*/ 64) {
				attr_dev(div2, "style", /*bg*/ ctx[6]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if_blocks[current_block_type_index].d();
			if_blocks_1[current_block_type_index_1].d();
			if (if_block2) if_block2.d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(144:0) {:else}",
		ctx
	});

	return block;
}

// (142:100) 
function create_if_block_1$1(ctx) {
	let current;

	const tech = new Tech({
			props: {
				card: /*card*/ ctx[0],
				selectable: /*selectable*/ ctx[1],
				mini: /*mini*/ ctx[3]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tech.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tech.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tech, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tech_changes = {};
			if (dirty & /*card*/ 1) tech_changes.card = /*card*/ ctx[0];
			if (dirty & /*selectable*/ 2) tech_changes.selectable = /*selectable*/ ctx[1];
			if (dirty & /*mini*/ 8) tech_changes.mini = /*mini*/ ctx[3];
			tech.$set(tech_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tech.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tech.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tech, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(142:100) ",
		ctx
	});

	return block;
}

// (140:0) {#if (card.type=='planet'||card.type=='advanced'||card.type=='metallic'||card.type=='fertile')}
function create_if_block$1(ctx) {
	let current;

	const planetcard = new PlanetCard({
			props: {
				planet: /*card*/ ctx[0],
				selectable: /*selectable*/ ctx[1],
				mini: /*mini*/ ctx[3]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(planetcard.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(planetcard.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(planetcard, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const planetcard_changes = {};
			if (dirty & /*card*/ 1) planetcard_changes.planet = /*card*/ ctx[0];
			if (dirty & /*selectable*/ 2) planetcard_changes.selectable = /*selectable*/ ctx[1];
			if (dirty & /*mini*/ 8) planetcard_changes.mini = /*mini*/ ctx[3];
			planetcard.$set(planetcard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(planetcard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(planetcard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(planetcard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(140:0) {#if (card.type=='planet'||card.type=='advanced'||card.type=='metallic'||card.type=='fertile')}",
		ctx
	});

	return block;
}

// (150:2) {:else}
function create_else_block_4(ctx) {
	let current;

	const icon = new Icon({
			props: { type: /*card*/ ctx[0].type, size: "sm" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*card*/ 1) icon_changes.type = /*card*/ ctx[0].type;
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_4.name,
		type: "else",
		source: "(150:2) {:else}",
		ctx
	});

	return block;
}

// (147:2) {#if (!key)}
function create_if_block_7(ctx) {
	let t;
	let current;

	const icon0 = new Icon({
			props: { type: "produce", size: "sm" },
			$$inline: true
		});

	const icon1 = new Icon({
			props: { type: "trade", size: "sm" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon0.$$.fragment);
			t = space();
			create_component(icon1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(icon1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(icon1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(icon1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(147:2) {#if (!key)}",
		ctx
	});

	return block;
}

// (161:2) {:else}
function create_else_block_3(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "./images/" + /*key*/ ctx[5] + ".svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*key*/ ctx[5]);
			attr_dev(img, "class", "svelte-103yabx");
			add_location(img, file$1, 161, 3, 5078);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*key*/ 32 && img.src !== (img_src_value = "./images/" + /*key*/ ctx[5] + ".svg")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*key*/ 32) {
				attr_dev(img, "alt", /*key*/ ctx[5]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(161:2) {:else}",
		ctx
	});

	return block;
}

// (156:2) {#if (!key)}
function create_if_block_6(ctx) {
	let div;
	let t;
	let current;

	const icon0 = new Icon({
			props: { type: "produce", size: "sm" },
			$$inline: true
		});

	const icon1 = new Icon({
			props: { type: "trade", size: "sm" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(icon0.$$.fragment);
			t = space();
			create_component(icon1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			claim_component(icon0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(icon1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "display", "flex");
			set_style(div, "flex-direction", "row");
			attr_dev(div, "class", "svelte-103yabx");
			add_location(div, file$1, 156, 3, 4936);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(icon0, div, null);
			append_dev(div, t);
			mount_component(icon1, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(icon0);
			destroy_component(icon1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(156:2) {#if (!key)}",
		ctx
	});

	return block;
}

// (166:2) {#if !mini}
function create_if_block_2$1(ctx) {
	let div0;
	let t0;
	let div1;
	let t1;
	let t2;
	let current;
	let if_block = /*desc*/ ctx[8][/*card*/ ctx[0].type] !== undefined && create_if_block_3(ctx);

	const block = {
		c: function create() {
			div0 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div1 = element("div");
			t1 = text(/*pilecount*/ ctx[2]);
			t2 = text(" remaining");
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (if_block) if_block.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, /*pilecount*/ ctx[2]);
			t2 = claim_text(div1_nodes, " remaining");
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "desc svelte-103yabx");
			add_location(div0, file$1, 166, 3, 5158);
			attr_dev(div1, "class", "pilecount svelte-103yabx");
			add_location(div1, file$1, 184, 3, 5804);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			if (if_block) if_block.m(div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, t1);
			append_dev(div1, t2);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*desc*/ ctx[8][/*card*/ ctx[0].type] !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div0, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*pilecount*/ 4) set_data_dev(t1, /*pilecount*/ ctx[2]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (if_block) if_block.d();
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(166:2) {#if !mini}",
		ctx
	});

	return block;
}

// (168:4) {#if desc[card.type] !== undefined}
function create_if_block_3(ctx) {
	let p0;
	let t;
	let p1;
	let current;
	let each_value_1 = /*desc*/ ctx[8][/*card*/ ctx[0].type].desc.action.split("<icon>");
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let each_value = /*desc*/ ctx[8][/*card*/ ctx[0].type].desc.role.split("<icon>");
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			p0 = element("p");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();
			p1 = element("p");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(p0_nodes);
			}

			p0_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			p1 = claim_element(nodes, "P", { class: true });
			var p1_nodes = children(p1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(p1_nodes);
			}

			p1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "action svelte-103yabx");
			add_location(p0, file$1, 168, 5, 5222);
			attr_dev(p1, "class", "role svelte-103yabx");
			add_location(p1, file$1, 175, 5, 5506);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p0, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(p0, null);
			}

			insert_dev(target, t, anchor);
			insert_dev(target, p1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(p1, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*desc, card*/ 257) {
				each_value_1 = /*desc*/ ctx[8][/*card*/ ctx[0].type].desc.action.split("<icon>");
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(p0, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*desc, card*/ 257) {
				each_value = /*desc*/ ctx[8][/*card*/ ctx[0].type].desc.role.split("<icon>");
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(p1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(p1);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(168:4) {#if desc[card.type] !== undefined}",
		ctx
	});

	return block;
}

// (172:7) {:else}
function create_else_block_2(ctx) {
	let t_value = /*piece*/ ctx[15] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*card*/ 1 && t_value !== (t_value = /*piece*/ ctx[15] + "")) set_data_dev(t, t_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(172:7) {:else}",
		ctx
	});

	return block;
}

// (171:7) {#if ['survey','warfare','colonize','research','produce','trade','politics'].includes(piece)}
function create_if_block_5(ctx) {
	let current;

	const icon = new Icon({
			props: { type: /*piece*/ ctx[15], size: "sm" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*card*/ 1) icon_changes.type = /*piece*/ ctx[15];
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(171:7) {#if ['survey','warfare','colonize','research','produce','trade','politics'].includes(piece)}",
		ctx
	});

	return block;
}

// (170:6) {#each desc[card.type].desc.action.split('<icon>') as piece}
function create_each_block_1(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_5, create_else_block_2];
	const if_blocks = [];

	function select_block_type_3(ctx, dirty) {
		if (dirty & /*card*/ 1) show_if = !!["survey", "warfare", "colonize", "research", "produce", "trade", "politics"].includes(/*piece*/ ctx[15]);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_3(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_3(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(170:6) {#each desc[card.type].desc.action.split('<icon>') as piece}",
		ctx
	});

	return block;
}

// (179:7) {:else}
function create_else_block_1(ctx) {
	let t_value = /*piece*/ ctx[15] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*card*/ 1 && t_value !== (t_value = /*piece*/ ctx[15] + "")) set_data_dev(t, t_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(179:7) {:else}",
		ctx
	});

	return block;
}

// (178:7) {#if ['survey','warfare','colonize','research','produce','trade','politics'].includes(piece)}
function create_if_block_4(ctx) {
	let current;

	const icon = new Icon({
			props: { type: /*piece*/ ctx[15], size: "sm" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*card*/ 1) icon_changes.type = /*piece*/ ctx[15];
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(178:7) {#if ['survey','warfare','colonize','research','produce','trade','politics'].includes(piece)}",
		ctx
	});

	return block;
}

// (177:6) {#each desc[card.type].desc.role.split('<icon>') as piece}
function create_each_block$1(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_4, create_else_block_1];
	const if_blocks = [];

	function select_block_type_4(ctx, dirty) {
		if (dirty & /*card*/ 1) show_if = !!["survey", "warfare", "colonize", "research", "produce", "trade", "politics"].includes(/*piece*/ ctx[15]);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_4(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_4(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(177:6) {#each desc[card.type].desc.role.split('<icon>') as piece}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_if_block_1$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*card*/ ctx[0].type == "planet" || /*card*/ ctx[0].type == "advanced" || /*card*/ ctx[0].type == "metallic" || /*card*/ ctx[0].type == "fertile") return 0;
		if (dirty & /*card*/ 1) show_if = !!!["survey", "warfare", "colonize", "research", "producetrade", "politics"].includes(/*card*/ ctx[0].type);
		if (show_if) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { card } = $$props,
		{ selectable = false } = $$props,
		{ pilecount = "" } = $$props,
		{ mini = false } = $$props;

	let label, key, bg, logoBg;

	let desc = {
		"survey": {
			"desc": {
				"role": "Look at <icon>survey<icon> -1 planet cards, keep 1 \n Leader: Look at 1 additional card",
				"action": "Draw 3 cards"
			}
		},
		"warfare": {
			"desc": {
				"role": "Collect 1 fighter per <icon>warfare<icon> \n Leader: May attack 1 planet instead",
				"action": "Attack 1 planet OR collect 1 fighter"
			}
		},
		"colonize": {
			"desc": {
				"action": "Settle 1 planet OR +1 colony",
				"role": "+1 colony per <icon>colonize<icon> \n Leader: May settle 1 planet instead"
			}
		},
		"producetrade": {
			"desc": {
				"action": "Produce 1 resource OR Trade 1 resource",
				"role": "Produce 1 resource per <icon>produce<icon> OR Trade 1 resource per <icon>trade<icon> \n Leader: +<icon>produce<icon> OR <icon>trade<icon>"
			}
		},
		"research": {
			"desc": {
				"action": "Remove up to 3 cards in your and from the game",
				"role": "Aquire 1 technology card after satisfying <icon>research<icon> costs and planet requirements \n Leader: +<icon>research<icon>"
			}
		},
		"politics": {
			"desc": {
				"action": "Remove tis card from the game. Place any 1 role card from the stacks into your hand",
				"role": ""
			}
		}
	};

	beforeUpdate(() => {
		$$invalidate(0, card.type = card.type + "", card);
	});

	const writable_props = ["card", "selectable", "pilecount", "mini"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Card", $$slots, []);

	function click_handler(event) {
		bubble($$self, event);
	}

	function touch_handler(event) {
		bubble($$self, event);
	}

	function touchstart_handler(event) {
		bubble($$self, event);
	}

	function touchend_handler(event) {
		bubble($$self, event);
	}

	function tap_handler(event) {
		bubble($$self, event);
	}

	function touchmove_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("card" in $$props) $$invalidate(0, card = $$props.card);
		if ("selectable" in $$props) $$invalidate(1, selectable = $$props.selectable);
		if ("pilecount" in $$props) $$invalidate(2, pilecount = $$props.pilecount);
		if ("mini" in $$props) $$invalidate(3, mini = $$props.mini);
	};

	$$self.$capture_state = () => ({
		Icon,
		Tech,
		PlanetCard,
		beforeUpdate,
		card,
		selectable,
		pilecount,
		mini,
		label,
		key,
		bg,
		logoBg,
		desc
	});

	$$self.$inject_state = $$props => {
		if ("card" in $$props) $$invalidate(0, card = $$props.card);
		if ("selectable" in $$props) $$invalidate(1, selectable = $$props.selectable);
		if ("pilecount" in $$props) $$invalidate(2, pilecount = $$props.pilecount);
		if ("mini" in $$props) $$invalidate(3, mini = $$props.mini);
		if ("label" in $$props) $$invalidate(4, label = $$props.label);
		if ("key" in $$props) $$invalidate(5, key = $$props.key);
		if ("bg" in $$props) $$invalidate(6, bg = $$props.bg);
		if ("logoBg" in $$props) $$invalidate(7, logoBg = $$props.logoBg);
		if ("desc" in $$props) $$invalidate(8, desc = $$props.desc);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*card, key*/ 33) {
			 {
				($$invalidate(4, label = card.type.charAt(0).toUpperCase() + card.type.slice(1)), $$invalidate(5, key = ({
					producetrade: false,
					produce: "pro",
					trade: "trd",
					research: "res",
					politics: "pol",
					survey: "sur",
					warfare: "war",
					colonize: "col"
				})[card.type]), $$invalidate(6, bg = !key
				? `color:var(--pro-color);background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  var(--pro-color) 8vh,  var(--pro-color) 8vh,  var(--trd-color) 12vh,  var(--trd-color) 12vh,  rgb(80,80,80) 16vh );`
				: `color:var(--${key}-color);background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  var(--${key}-color) 8vh,  var(--${key}-color) 8vh,  var(--${key}-color) 12vh,  var(--${key}-color) 12vh,  rgb(80,80,80) 16vh );`), $$invalidate(7, logoBg = !key
				? `background: var(--pro-trd-clr);`
				: `background-color: var(--${key}-color);`));
			}
		}
	};

	return [
		card,
		selectable,
		pilecount,
		mini,
		label,
		key,
		bg,
		logoBg,
		desc,
		click_handler,
		touch_handler,
		touchstart_handler,
		touchend_handler,
		tap_handler,
		touchmove_handler
	];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			card: 0,
			selectable: 1,
			pilecount: 2,
			mini: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*card*/ ctx[0] === undefined && !("card" in props)) {
			console.warn("<Card> was created without expected prop 'card'");
		}
	}

	get card() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set card(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selectable() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectable(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pilecount() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pilecount(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mini() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mini(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\App.svelte generated by Svelte v3.20.1 */

const { Object: Object_1, console: console_1$1 } = globals;
const file$2 = "src\\components\\App.svelte";

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[177] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[183] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[183] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[188] = list[i];
	return child_ctx;
}

function get_each_context_6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[188] = list[i];
	return child_ctx;
}

function get_each_context_8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[183] = list[i];
	return child_ctx;
}

function get_each_context_7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[183] = list[i];
	return child_ctx;
}

function get_each_context_9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[197] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[180] = list[i];
	return child_ctx;
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[174] = list[i];
	return child_ctx;
}

// (2126:0) {#if mounted}
function create_if_block$2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	const if_block_creators = [
		create_if_block_1$2,
		create_if_block_2$2,
		create_if_block_3$1,
		create_if_block_4$1,
		create_if_block_5$1,
		create_if_block_6$1,
		create_else_block$2
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*game*/ ctx[0].currentphase == -4) return 0;
		if (/*game*/ ctx[0].currentphase == -3) return 1;
		if (/*game*/ ctx[0].currentphase == -2) return 2;
		if (/*game*/ ctx[0].currentphase == -1) return 3;
		if (/*game*/ ctx[0].passtoplayer && !/*lobby*/ ctx[1].online) return 4;
		if (!!/*game*/ ctx[0].winner) return 5;
		return 6;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(2126:0) {#if mounted}",
		ctx
	});

	return block;
}

// (2161:1) {:else}
function create_else_block$2(ctx) {
	let div0;
	let t0;
	let div1;
	let t1;
	let current;
	let each_value_2 = /*game*/ ctx[0].players;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block = /*game*/ ctx[0].displayinfo.selectionzone == "options" && create_if_block_7$1(ctx);

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { id: true, style: true, class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			t1 = claim_space(div1_nodes);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "stars svelte-iqexfp");
			add_location(div0, file$2, 2161, 2, 93520);
			attr_dev(div1, "id", "screen");
			set_style(div1, "height", "100%");
			set_style(div1, "width", "100%");
			attr_dev(div1, "class", "flex svelte-iqexfp");
			add_location(div1, file$2, 2162, 2, 93549);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append_dev(div1, t1);
			if (if_block) if_block.m(div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, drag, drop, move, log, choosewrapper, pass_priority, pass_turn, choose, unchoose, toggle_center_or_planets, lobby*/ 238075) {
				each_value_2 = /*game*/ ctx[0].players;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, t1);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*game*/ ctx[0].displayinfo.selectionzone == "options") {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_7$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(2161:1) {:else}",
		ctx
	});

	return block;
}

// (2157:25) 
function create_if_block_6$1(ctx) {
	let div;
	let t0_value = /*game*/ ctx[0].winner + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text(" WON!!!!");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_text(div_nodes, " WON!!!!");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "passtoplayer svelte-iqexfp");
			add_location(div, file$2, 2157, 2, 93444);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && t0_value !== (t0_value = /*game*/ ctx[0].winner + "")) set_data_dev(t0, t0_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6$1.name,
		type: "if",
		source: "(2157:25) ",
		ctx
	});

	return block;
}

// (2153:46) 
function create_if_block_5$1(ctx) {
	let div;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text("pass to next player");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "pass to next player");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "passtoplayer svelte-iqexfp");
			add_location(div, file$2, 2153, 2, 93279);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_8*/ ctx[138], false, false, false),
				listen_dev(div, "tap", /*tap_handler_8*/ ctx[139], false, false, false)
			];
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$1.name,
		type: "if",
		source: "(2153:46) ",
		ctx
	});

	return block;
}

// (2146:33) 
function create_if_block_4$1(ctx) {
	let div;
	let p;
	let t0;
	let t1;
	let each_value = /*lobby*/ ctx[1].existinggames;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t0 = text("Choose a Game to Join");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Choose a Game to Join");
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-iqexfp");
			add_location(p, file$2, 2147, 3, 93034);
			attr_dev(div, "class", "playercountselector svelte-iqexfp");
			add_location(div, file$2, 2146, 2, 92996);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t0);
			append_dev(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*enterexistinggame, lobby*/ 4098) {
				each_value = /*lobby*/ ctx[1].existinggames;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(2146:33) ",
		ctx
	});

	return block;
}

// (2139:33) 
function create_if_block_3$1(ctx) {
	let div;
	let p0;
	let t0;
	let t1;
	let p1;
	let t2;
	let t3;
	let p2;
	let t4;
	let t5;
	let p3;
	let t6;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text("Choose your Game's number of Players");
			t1 = space();
			p1 = element("p");
			t2 = text("2");
			t3 = space();
			p2 = element("p");
			t4 = text("3");
			t5 = space();
			p3 = element("p");
			t6 = text("4");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Choose your Game's number of Players");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, "2");
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, "3");
			p2_nodes.forEach(detach_dev);
			t5 = claim_space(div_nodes);
			p3 = claim_element(div_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t6 = claim_text(p3_nodes, "4");
			p3_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "svelte-iqexfp");
			add_location(p0, file$2, 2140, 2, 92700);
			attr_dev(p1, "class", "svelte-iqexfp");
			add_location(p1, file$2, 2141, 2, 92748);
			attr_dev(p2, "class", "svelte-iqexfp");
			add_location(p2, file$2, 2142, 2, 92816);
			attr_dev(p3, "class", "svelte-iqexfp");
			add_location(p3, file$2, 2143, 2, 92884);
			attr_dev(div, "class", "playercountselector svelte-iqexfp");
			add_location(div, file$2, 2139, 1, 92663);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
			append_dev(div, t3);
			append_dev(div, p2);
			append_dev(p2, t4);
			append_dev(div, t5);
			append_dev(div, p3);
			append_dev(p3, t6);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(p1, "click", /*click_handler_4*/ ctx[130], false, false, false),
				listen_dev(p1, "tap", /*tap_handler_4*/ ctx[131], false, false, false),
				listen_dev(p2, "click", /*click_handler_5*/ ctx[132], false, false, false),
				listen_dev(p2, "tap", /*tap_handler_5*/ ctx[133], false, false, false),
				listen_dev(p3, "click", /*click_handler_6*/ ctx[134], false, false, false),
				listen_dev(p3, "tap", /*tap_handler_6*/ ctx[135], false, false, false)
			];
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(2139:33) ",
		ctx
	});

	return block;
}

// (2133:33) 
function create_if_block_2$2(ctx) {
	let div;
	let p0;
	let t0;
	let t1;
	let p1;
	let t2;
	let t3;
	let p2;
	let t4;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text("Start a New Online Game");
			t1 = space();
			p1 = element("p");
			t2 = text("Join an Existing Online Game");
			t3 = space();
			p2 = element("p");
			t4 = text("Start a New Offline Game");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Start a New Online Game");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, "Join an Existing Online Game");
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, "Start a New Offline Game");
			p2_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "svelte-iqexfp");
			add_location(p0, file$2, 2134, 2, 92314);
			attr_dev(p1, "class", "svelte-iqexfp");
			add_location(p1, file$2, 2135, 2, 92414);
			attr_dev(p2, "class", "svelte-iqexfp");
			add_location(p2, file$2, 2136, 2, 92527);
			attr_dev(div, "class", "playercountselector svelte-iqexfp");
			add_location(div, file$2, 2133, 1, 92277);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
			append_dev(div, t3);
			append_dev(div, p2);
			append_dev(p2, t4);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(p0, "click", /*click_handler_1*/ ctx[124], false, false, false),
				listen_dev(p0, "tap", /*tap_handler_1*/ ctx[125], false, false, false),
				listen_dev(p1, "click", /*click_handler_2*/ ctx[126], false, false, false),
				listen_dev(p1, "tap", /*tap_handler_2*/ ctx[127], false, false, false),
				listen_dev(p2, "click", /*click_handler_3*/ ctx[128], false, false, false),
				listen_dev(p2, "tap", /*tap_handler_3*/ ctx[129], false, false, false)
			];
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$2.name,
		type: "if",
		source: "(2133:33) ",
		ctx
	});

	return block;
}

// (2127:1) {#if game.currentphase==-4}
function create_if_block_1$2(ctx) {
	let div;
	let p0;
	let t0;
	let t1;
	let input;
	let t2;
	let p1;
	let t3;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text("Choose your Screen Name");
			t1 = space();
			input = element("input");
			t2 = space();
			p1 = element("p");
			t3 = text("Finished");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Choose your Screen Name");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			input = claim_element(div_nodes, "INPUT", { type: true, class: true });
			t2 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "Finished");
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "svelte-iqexfp");
			add_location(p0, file$2, 2128, 2, 91957);
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "svelte-iqexfp");
			add_location(input, file$2, 2129, 2, 91993);
			attr_dev(p1, "class", "svelte-iqexfp");
			add_location(p1, file$2, 2130, 2, 92119);
			attr_dev(div, "class", "playercountselector svelte-iqexfp");
			add_location(div, file$2, 2127, 1, 91920);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, input);
			set_input_value(input, /*lobby*/ ctx[1].screenname);
			append_dev(div, t2);
			append_dev(div, p1);
			append_dev(p1, t3);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(input, "input", /*input_input_handler*/ ctx[120]),
				listen_dev(input, "keypress", /*keypress_handler*/ ctx[121], false, false, false),
				listen_dev(p1, "click", /*click_handler*/ ctx[122], false, false, false),
				listen_dev(p1, "tap", /*tap_handler*/ ctx[123], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*lobby*/ 2 && input.value !== /*lobby*/ ctx[1].screenname) {
				set_input_value(input, /*lobby*/ ctx[1].screenname);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(2127:1) {#if game.currentphase==-4}",
		ctx
	});

	return block;
}

// (2165:4) {#if game.players[game.acting_player_index]!==undefined && ((lobby.screenname==player.name && lobby.online) || (game.players[game.acting_player_index].id==player.id && !lobby.online)) }
function create_if_block_9(ctx) {
	let div9;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;

	let t3_value = (/*game*/ ctx[0].displayinfo.center_or_planets
	? "planets"
	: "center row") + "";

	let t3;
	let t4;
	let current_block_type_index;
	let if_block0;
	let t5;
	let t6;
	let div3;
	let t7;
	let each_blocks_1 = [];
	let each1_lookup = new Map();
	let t8;
	let t9;
	let div4;
	let t10_value = /*game*/ ctx[0].messagetoplayer[/*game*/ ctx[0].messagetoplayer.length - 1] + "";
	let t10;
	let t11;
	let div8;
	let div5;
	let t12;
	let t13_value = /*player*/ ctx[180].deck.length + "";
	let t13;
	let t14;
	let div6;
	let each_blocks = [];
	let each2_lookup = new Map();
	let t15;
	let div7;
	let t16;
	let t17_value = /*player*/ ctx[180].discard.length + "";
	let t17;
	let t18;
	let current;
	let dispose;
	let each_value_9 = /*game*/ ctx[0].players;
	validate_each_argument(each_value_9);
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_9.length; i += 1) {
		each_blocks_2[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
	}

	const if_block_creators = [create_if_block_15, create_if_block_16];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*game*/ ctx[0].displayinfo.selectionzone == "research") return 0;
		if (/*game*/ ctx[0].displayinfo.center_or_planets) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block1 = !/*game*/ ctx[0].displayinfo.center_or_planets && create_if_block_14(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*game*/ ctx[0].displayinfo.showoptiontoskip) return create_if_block_13;
		return create_else_block_3$1;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block2 = current_block_type(ctx);
	let each_value_4 = /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].limbo;
	validate_each_argument(each_value_4);
	const get_key = ctx => /*card*/ ctx[183].id;
	validate_each_keys(ctx, each_value_4, get_each_context_4, get_key);

	for (let i = 0; i < each_value_4.length; i += 1) {
		let child_ctx = get_each_context_4(ctx, each_value_4, i);
		let key = get_key(child_ctx);
		each1_lookup.set(key, each_blocks_1[i] = create_each_block_4(key, child_ctx));
	}

	function select_block_type_3(ctx, dirty) {
		if (/*game*/ ctx[0].passp) return create_if_block_10;
		if (/*game*/ ctx[0].passt) return create_if_block_11;
		if (/*game*/ ctx[0].displayinfo.allowformultipleselections && /*game*/ ctx[0].choices.length > 0) return create_if_block_12;
		return create_else_block_2$1;
	}

	let current_block_type_1 = select_block_type_3(ctx);
	let if_block3 = current_block_type_1(ctx);
	let each_value_3 = /*player*/ ctx[180].hand;
	validate_each_argument(each_value_3);
	const get_key_1 = ctx => /*card*/ ctx[183].id;
	validate_each_keys(ctx, each_value_3, get_each_context_3, get_key_1);

	for (let i = 0; i < each_value_3.length; i += 1) {
		let child_ctx = get_each_context_3(ctx, each_value_3, i);
		let key = get_key_1(child_ctx);
		each2_lookup.set(key, each_blocks[i] = create_each_block_3(key, child_ctx));
	}

	const block = {
		c: function create() {
			div9 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t1 = space();
			div2 = element("div");
			t2 = text("show ");
			t3 = text(t3_value);
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			if (if_block1) if_block1.c();
			t6 = space();
			div3 = element("div");
			if_block2.c();
			t7 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t8 = space();
			if_block3.c();
			t9 = space();
			div4 = element("div");
			t10 = text(t10_value);
			t11 = space();
			div8 = element("div");
			div5 = element("div");
			t12 = text("cards remaining in deck: ");
			t13 = text(t13_value);
			t14 = space();
			div6 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t15 = space();
			div7 = element("div");
			t16 = text("cards in discard pile: ");
			t17 = text(t17_value);
			t18 = space();
			this.h();
		},
		l: function claim(nodes) {
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div0 = claim_element(div9_nodes, "DIV", { id: true, class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div9_nodes);
			div1 = claim_element(div9_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div9_nodes);
			div2 = claim_element(div9_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t2 = claim_text(div2_nodes, "show ");
			t3 = claim_text(div2_nodes, t3_value);
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(div9_nodes);
			if (if_block0) if_block0.l(div9_nodes);
			t5 = claim_space(div9_nodes);
			if (if_block1) if_block1.l(div9_nodes);
			t6 = claim_space(div9_nodes);
			div3 = claim_element(div9_nodes, "DIV", { id: true, class: true });
			var div3_nodes = children(div3);
			if_block2.l(div3_nodes);
			t7 = claim_space(div3_nodes);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div3_nodes);
			}

			t8 = claim_space(div3_nodes);
			if_block3.l(div3_nodes);
			div3_nodes.forEach(detach_dev);
			t9 = claim_space(div9_nodes);
			div4 = claim_element(div9_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t10 = claim_text(div4_nodes, t10_value);
			div4_nodes.forEach(detach_dev);
			t11 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div5 = claim_element(div8_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t12 = claim_text(div5_nodes, "cards remaining in deck: ");
			t13 = claim_text(div5_nodes, t13_value);
			div5_nodes.forEach(detach_dev);
			t14 = claim_space(div8_nodes);
			div6 = claim_element(div8_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div6_nodes);
			}

			div6_nodes.forEach(detach_dev);
			t15 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			t16 = claim_text(div7_nodes, "cards in discard pile: ");
			t17 = claim_text(div7_nodes, t17_value);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			t18 = claim_space(div9_nodes);
			div9_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "dragged");
			attr_dev(div0, "class", "svelte-iqexfp");
			add_location(div0, file$2, 2166, 6, 93887);
			attr_dev(div1, "class", "playerinfo bordered svelte-iqexfp");
			add_location(div1, file$2, 2167, 6, 93919);
			attr_dev(div2, "class", "svelte-iqexfp");
			add_location(div2, file$2, 2178, 6, 94767);
			attr_dev(div3, "id", "playedcards");
			attr_dev(div3, "class", "flex zone playedcards svelte-iqexfp");
			add_location(div3, file$2, 2206, 6, 96683);
			attr_dev(div4, "class", "messagetoplayer bordered svelte-iqexfp");
			add_location(div4, file$2, 2235, 6, 98964);
			attr_dev(div5, "class", "bordered deck svelte-iqexfp");
			add_location(div5, file$2, 2238, 7, 99133);
			attr_dev(div6, "class", "hand svelte-iqexfp");
			add_location(div6, file$2, 2239, 7, 99221);
			attr_dev(div7, "class", "bordered discard svelte-iqexfp");
			add_location(div7, file$2, 2244, 7, 99665);
			attr_dev(div8, "class", "flex zone ownedcards svelte-iqexfp");
			add_location(div8, file$2, 2237, 6, 99090);
			attr_dev(div9, "class", "bordered playingfield svelte-iqexfp");
			add_location(div9, file$2, 2165, 5, 93844);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div9, anchor);
			append_dev(div9, div0);
			append_dev(div9, t0);
			append_dev(div9, div1);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div1, null);
			}

			append_dev(div9, t1);
			append_dev(div9, div2);
			append_dev(div2, t2);
			append_dev(div2, t3);
			append_dev(div9, t4);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div9, null);
			}

			append_dev(div9, t5);
			if (if_block1) if_block1.m(div9, null);
			append_dev(div9, t6);
			append_dev(div9, div3);
			if_block2.m(div3, null);
			append_dev(div3, t7);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div3, null);
			}

			append_dev(div3, t8);
			if_block3.m(div3, null);
			append_dev(div9, t9);
			append_dev(div9, div4);
			append_dev(div4, t10);
			append_dev(div9, t11);
			append_dev(div9, div8);
			append_dev(div8, div5);
			append_dev(div5, t12);
			append_dev(div5, t13);
			append_dev(div8, t14);
			append_dev(div8, div6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div6, null);
			}

			append_dev(div8, t15);
			append_dev(div8, div7);
			append_dev(div7, t16);
			append_dev(div7, t17);
			append_dev(div9, t18);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div2, "click", /*click_handler_9*/ ctx[140], false, false, false),
				listen_dev(div2, "tap", /*tap_handler_9*/ ctx[141], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1) {
				each_value_9 = /*game*/ ctx[0].players;
				validate_each_argument(each_value_9);
				let i;

				for (i = 0; i < each_value_9.length; i += 1) {
					const child_ctx = get_each_context_9(ctx, each_value_9, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_9(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div1, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_9.length;
			}

			if ((!current || dirty[0] & /*game*/ 1) && t3_value !== (t3_value = (/*game*/ ctx[0].displayinfo.center_or_planets
			? "planets"
			: "center row") + "")) set_data_dev(t3, t3_value);

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					}

					transition_in(if_block0, 1);
					if_block0.m(div9, t5);
				} else {
					if_block0 = null;
				}
			}

			if (!/*game*/ ctx[0].displayinfo.center_or_planets) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
					transition_in(if_block1, 1);
				} else {
					if_block1 = create_if_block_14(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div9, t6);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div3, t7);
				}
			}

			if (dirty[0] & /*game, unchoose*/ 65) {
				const each_value_4 = /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].limbo;
				validate_each_argument(each_value_4);
				group_outros();
				validate_each_keys(ctx, each_value_4, get_each_context_4, get_key);
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_4, each1_lookup, div3, outro_and_destroy_block, create_each_block_4, t8, get_each_context_4);
				check_outros();
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_3(ctx)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_1(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(div3, null);
				}
			}

			if ((!current || dirty[0] & /*game*/ 1) && t10_value !== (t10_value = /*game*/ ctx[0].messagetoplayer[/*game*/ ctx[0].messagetoplayer.length - 1] + "")) set_data_dev(t10, t10_value);
			if ((!current || dirty[0] & /*game*/ 1) && t13_value !== (t13_value = /*player*/ ctx[180].deck.length + "")) set_data_dev(t13, t13_value);

			if (dirty[0] & /*game, drag, drop, move, log, choosewrapper*/ 229401) {
				const each_value_3 = /*player*/ ctx[180].hand;
				validate_each_argument(each_value_3);
				group_outros();
				validate_each_keys(ctx, each_value_3, get_each_context_3, get_key_1);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value_3, each2_lookup, div6, outro_and_destroy_block, create_each_block_3, null, get_each_context_3);
				check_outros();
			}

			if ((!current || dirty[0] & /*game*/ 1) && t17_value !== (t17_value = /*player*/ ctx[180].discard.length + "")) set_data_dev(t17, t17_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);

			for (let i = 0; i < each_value_4.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div9);
			destroy_each(each_blocks_2, detaching);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (if_block1) if_block1.d();
			if_block2.d();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			if_block3.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(2165:4) {#if game.players[game.acting_player_index]!==undefined && ((lobby.screenname==player.name && lobby.online) || (game.players[game.acting_player_index].id==player.id && !lobby.online)) }",
		ctx
	});

	return block;
}

// (2169:7) {#each game.players as p}
function create_each_block_9(ctx) {
	let div3;
	let div0;
	let t0;
	let t1_value = /*p*/ ctx[197].starfighters.small + "";
	let t1;
	let t2;
	let div1;
	let t3;
	let t4_value = /*p*/ ctx[197].influence.length + "";
	let t4;
	let t5;
	let div2;
	let t6_value = /*p*/ ctx[197].name + "";
	let t6;
	let t7;
	let div3_class_value;

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = text("Military Might ");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			t3 = text("Galactic Influence ");
			t4 = text(t4_value);
			t5 = space();
			div2 = element("div");
			t6 = text(t6_value);
			t7 = space();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { style: true, class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { style: true, class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Military Might ");
			t1 = claim_text(div0_nodes, t1_value);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { style: true, class: true });
			var div1_nodes = children(div1);
			t3 = claim_text(div1_nodes, "Galactic Influence ");
			t4 = claim_text(div1_nodes, t4_value);
			div1_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { style: true, class: true });
			var div2_nodes = children(div2);
			t6 = claim_text(div2_nodes, t6_value);
			div2_nodes.forEach(detach_dev);
			t7 = claim_space(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "width", "33%");
			set_style(div0, "text-align", "center");
			attr_dev(div0, "class", "bordered svelte-iqexfp");
			add_location(div0, file$2, 2170, 9, 94211);
			set_style(div1, "width", "33%");
			set_style(div1, "text-align", "center");
			attr_dev(div1, "class", "bordered svelte-iqexfp");
			add_location(div1, file$2, 2171, 9, 94327);
			set_style(div2, "width", "33%");
			set_style(div2, "text-align", "center");
			attr_dev(div2, "class", "bordered svelte-iqexfp");
			add_location(div2, file$2, 2172, 9, 94445);
			set_style(div3, "width", 100 / /*game*/ ctx[0].number_of_players + "%");

			attr_dev(div3, "class", div3_class_value = "flex " + (/*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index] !== undefined && /*p*/ ctx[197].name == /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].name
			? "selectable"
			: "bordered") + " svelte-iqexfp");

			add_location(div3, file$2, 2169, 8, 93996);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, t0);
			append_dev(div0, t1);
			append_dev(div3, t2);
			append_dev(div3, div1);
			append_dev(div1, t3);
			append_dev(div1, t4);
			append_dev(div3, t5);
			append_dev(div3, div2);
			append_dev(div2, t6);
			append_dev(div3, t7);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && t1_value !== (t1_value = /*p*/ ctx[197].starfighters.small + "")) set_data_dev(t1, t1_value);
			if (dirty[0] & /*game*/ 1 && t4_value !== (t4_value = /*p*/ ctx[197].influence.length + "")) set_data_dev(t4, t4_value);
			if (dirty[0] & /*game*/ 1 && t6_value !== (t6_value = /*p*/ ctx[197].name + "")) set_data_dev(t6, t6_value);

			if (dirty[0] & /*game*/ 1) {
				set_style(div3, "width", 100 / /*game*/ ctx[0].number_of_players + "%");
			}

			if (dirty[0] & /*game*/ 1 && div3_class_value !== (div3_class_value = "flex " + (/*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index] !== undefined && /*p*/ ctx[197].name == /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].name
			? "selectable"
			: "bordered") + " svelte-iqexfp")) {
				attr_dev(div3, "class", div3_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_9.name,
		type: "each",
		source: "(2169:7) {#each game.players as p}",
		ctx
	});

	return block;
}

// (2189:51) 
function create_if_block_16(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value_8 = /*game*/ ctx[0].stacks.rolecards;
	validate_each_argument(each_value_8);
	const get_key = ctx => /*card*/ ctx[183].name;
	validate_each_keys(ctx, each_value_8, get_each_context_8, get_key);

	for (let i = 0; i < each_value_8.length; i += 1) {
		let child_ctx = get_each_context_8(ctx, each_value_8, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_8(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "flex zone centerrow svelte-iqexfp");
			add_location(div, file$2, 2189, 7, 95390);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, choosewrapper, move, drag, drop*/ 229393) {
				const each_value_8 = /*game*/ ctx[0].stacks.rolecards;
				validate_each_argument(each_value_8);
				group_outros();
				validate_each_keys(ctx, each_value_8, get_each_context_8, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_8, each_1_lookup, div, outro_and_destroy_block, create_each_block_8, null, get_each_context_8);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_8.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_16.name,
		type: "if",
		source: "(2189:51) ",
		ctx
	});

	return block;
}

// (2183:6) {#if game.displayinfo.selectionzone=='research'}
function create_if_block_15(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value_7 = /*game*/ ctx[0].research_deck;
	validate_each_argument(each_value_7);
	const get_key = ctx => /*card*/ ctx[183].id;
	validate_each_keys(ctx, each_value_7, get_each_context_7, get_key);

	for (let i = 0; i < each_value_7.length; i += 1) {
		let child_ctx = get_each_context_7(ctx, each_value_7, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_7(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "zone researchrow svelte-iqexfp");
			add_location(div, file$2, 2183, 7, 95035);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, choosewrapper*/ 17) {
				const each_value_7 = /*game*/ ctx[0].research_deck;
				validate_each_argument(each_value_7);
				group_outros();
				validate_each_keys(ctx, each_value_7, get_each_context_7, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_7, each_1_lookup, div, outro_and_destroy_block, create_each_block_7, null, get_each_context_7);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_7.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_15.name,
		type: "if",
		source: "(2183:6) {#if game.displayinfo.selectionzone=='research'}",
		ctx
	});

	return block;
}

// (2191:8) {#each game.stacks.rolecards as card (card.name)}
function create_each_block_8(key_1, ctx) {
	let first;
	let current;

	function click_handler_11(...args) {
		return /*click_handler_11*/ ctx[144](/*card*/ ctx[183], ...args);
	}

	function tap_handler_11(...args) {
		return /*tap_handler_11*/ ctx[145](/*card*/ ctx[183], ...args);
	}

	function touchmove_handler(...args) {
		return /*touchmove_handler*/ ctx[146](/*card*/ ctx[183], ...args);
	}

	function touchstart_handler(...args) {
		return /*touchstart_handler*/ ctx[147](/*card*/ ctx[183], ...args);
	}

	const card = new Card({
			props: {
				card: /*card*/ ctx[183],
				selectable: /*game*/ ctx[0].displayinfo.selectionzone == "rolecards",
				pilecount: /*game*/ ctx[0].stacks.pilecount[/*card*/ ctx[183].type]
			},
			$$inline: true
		});

	card.$on("click", click_handler_11);
	card.$on("tap", tap_handler_11);
	card.$on("touchmove", touchmove_handler);
	card.$on("touchstart", touchstart_handler);
	card.$on("touchend", /*touchend_handler*/ ctx[148]);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(card.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(card.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const card_changes = {};
			if (dirty[0] & /*game*/ 1) card_changes.card = /*card*/ ctx[183];
			if (dirty[0] & /*game*/ 1) card_changes.selectable = /*game*/ ctx[0].displayinfo.selectionzone == "rolecards";
			if (dirty[0] & /*game*/ 1) card_changes.pilecount = /*game*/ ctx[0].stacks.pilecount[/*card*/ ctx[183].type];
			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_8.name,
		type: "each",
		source: "(2191:8) {#each game.stacks.rolecards as card (card.name)}",
		ctx
	});

	return block;
}

// (2185:8) {#each game.research_deck as card (card.id)}
function create_each_block_7(key_1, ctx) {
	let first;
	let current;

	function click_handler_10(...args) {
		return /*click_handler_10*/ ctx[142](/*card*/ ctx[183], ...args);
	}

	function tap_handler_10(...args) {
		return /*tap_handler_10*/ ctx[143](/*card*/ ctx[183], ...args);
	}

	const card = new Card({
			props: {
				selectable: /*game*/ ctx[0].displayinfo.selectionzone == "research",
				card: /*card*/ ctx[183]
			},
			$$inline: true
		});

	card.$on("click", click_handler_10);
	card.$on("tap", tap_handler_10);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(card.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(card.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const card_changes = {};
			if (dirty[0] & /*game*/ 1) card_changes.selectable = /*game*/ ctx[0].displayinfo.selectionzone == "research";
			if (dirty[0] & /*game*/ 1) card_changes.card = /*card*/ ctx[183];
			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_7.name,
		type: "each",
		source: "(2185:8) {#each game.research_deck as card (card.id)}",
		ctx
	});

	return block;
}

// (2196:6) {#if !game.displayinfo.center_or_planets}
function create_if_block_14(ctx) {
	let div;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t;
	let each_blocks = [];
	let each1_lookup = new Map();
	let current;
	let each_value_6 = /*player*/ ctx[180].unsettled_planets;
	validate_each_argument(each_value_6);
	const get_key = ctx => /*planet*/ ctx[188].id;
	validate_each_keys(ctx, each_value_6, get_each_context_6, get_key);

	for (let i = 0; i < each_value_6.length; i += 1) {
		let child_ctx = get_each_context_6(ctx, each_value_6, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_6(key, child_ctx));
	}

	let each_value_5 = [
		.../*player*/ ctx[180].settled_planets,
		.../*player*/ ctx[180].conquered_planets
	];

	validate_each_argument(each_value_5);
	const get_key_1 = ctx => /*planet*/ ctx[188].id;
	validate_each_keys(ctx, each_value_5, get_each_context_5, get_key_1);

	for (let i = 0; i < each_value_5.length; i += 1) {
		let child_ctx = get_each_context_5(ctx, each_value_5, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks[i] = create_each_block_5(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div_nodes);
			}

			t = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "flex zone centerrow svelte-iqexfp");
			add_location(div, file$2, 2196, 7, 95994);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div, null);
			}

			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, choosewrapper*/ 17) {
				const each_value_6 = /*player*/ ctx[180].unsettled_planets;
				validate_each_argument(each_value_6);
				group_outros();
				validate_each_keys(ctx, each_value_6, get_each_context_6, get_key);
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_6, each0_lookup, div, outro_and_destroy_block, create_each_block_6, t, get_each_context_6);
				check_outros();
			}

			if (dirty[0] & /*game, choosewrapper*/ 17) {
				const each_value_5 = [
					.../*player*/ ctx[180].settled_planets,
					.../*player*/ ctx[180].conquered_planets
				];

				validate_each_argument(each_value_5);
				group_outros();
				validate_each_keys(ctx, each_value_5, get_each_context_5, get_key_1);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value_5, each1_lookup, div, outro_and_destroy_block, create_each_block_5, null, get_each_context_5);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_6.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value_5.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_14.name,
		type: "if",
		source: "(2196:6) {#if !game.displayinfo.center_or_planets}",
		ctx
	});

	return block;
}

// (2198:8) {#each player.unsettled_planets as planet (planet.id)}
function create_each_block_6(key_1, ctx) {
	let first;
	let current;

	function click_handler_12(...args) {
		return /*click_handler_12*/ ctx[149](/*planet*/ ctx[188], ...args);
	}

	function tap_handler_12(...args) {
		return /*tap_handler_12*/ ctx[150](/*planet*/ ctx[188], ...args);
	}

	const planetcard = new PlanetCard({
			props: { planet: /*planet*/ ctx[188] },
			$$inline: true
		});

	planetcard.$on("click", click_handler_12);
	planetcard.$on("tap", tap_handler_12);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(planetcard.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(planetcard.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(planetcard, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const planetcard_changes = {};
			if (dirty[0] & /*game*/ 1) planetcard_changes.planet = /*planet*/ ctx[188];
			planetcard.$set(planetcard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(planetcard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(planetcard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(planetcard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_6.name,
		type: "each",
		source: "(2198:8) {#each player.unsettled_planets as planet (planet.id)}",
		ctx
	});

	return block;
}

// (2201:8) {#each [...player.settled_planets, ...player.conquered_planets] as planet (planet.id)}
function create_each_block_5(key_1, ctx) {
	let first;
	let current;

	function click_handler_13(...args) {
		return /*click_handler_13*/ ctx[151](/*planet*/ ctx[188], ...args);
	}

	function tap_handler_13(...args) {
		return /*tap_handler_13*/ ctx[152](/*planet*/ ctx[188], ...args);
	}

	const planetcard = new PlanetCard({
			props: {
				planet: /*planet*/ ctx[188],
				selected: /*game*/ ctx[0].displayinfo.selectionzone == "settled_&_conquered_planets"
			},
			$$inline: true
		});

	planetcard.$on("click", click_handler_13);
	planetcard.$on("tap", tap_handler_13);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(planetcard.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(planetcard.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(planetcard, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const planetcard_changes = {};
			if (dirty[0] & /*game*/ 1) planetcard_changes.planet = /*planet*/ ctx[188];
			if (dirty[0] & /*game*/ 1) planetcard_changes.selected = /*game*/ ctx[0].displayinfo.selectionzone == "settled_&_conquered_planets";
			planetcard.$set(planetcard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(planetcard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(planetcard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(planetcard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_5.name,
		type: "each",
		source: "(2201:8) {#each [...player.settled_planets, ...player.conquered_planets] as planet (planet.id)}",
		ctx
	});

	return block;
}

// (2212:7) {:else}
function create_else_block_3$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[____]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[____]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-right", "auto");
			attr_dev(div, "class", "bordered pass svelte-iqexfp");
			add_location(div, file$2, 2213, 8, 97270);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3$1.name,
		type: "else",
		source: "(2212:7) {:else}",
		ctx
	});

	return block;
}

// (2208:7) {#if game.displayinfo.showoptiontoskip}
function create_if_block_13(ctx) {
	let div;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[Choose None]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[Choose None]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-right", "auto");
			attr_dev(div, "class", "selectable pass svelte-iqexfp");
			add_location(div, file$2, 2210, 8, 96988);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_14*/ ctx[153], false, false, false),
				listen_dev(div, "tap", /*tap_handler_14*/ ctx[154], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_13.name,
		type: "if",
		source: "(2208:7) {#if game.displayinfo.showoptiontoskip}",
		ctx
	});

	return block;
}

// (2216:7) {#each game.players[game.acting_player_index].limbo as card (card.id)}
function create_each_block_4(key_1, ctx) {
	let first;
	let current;

	function click_handler_15(...args) {
		return /*click_handler_15*/ ctx[155](/*card*/ ctx[183], ...args);
	}

	function tap_handler_15(...args) {
		return /*tap_handler_15*/ ctx[156](/*card*/ ctx[183], ...args);
	}

	const card = new Card({
			props: { mini: true, card: /*card*/ ctx[183] },
			$$inline: true
		});

	card.$on("click", click_handler_15);
	card.$on("tap", tap_handler_15);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(card.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(card.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const card_changes = {};
			if (dirty[0] & /*game*/ 1) card_changes.card = /*card*/ ctx[183];
			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(2216:7) {#each game.players[game.acting_player_index].limbo as card (card.id)}",
		ctx
	});

	return block;
}

// (2230:7) {:else}
function create_else_block_2$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[______]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[______]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "bordered pass svelte-iqexfp");
			add_location(div, file$2, 2232, 8, 98886);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2$1.name,
		type: "else",
		source: "(2230:7) {:else}",
		ctx
	});

	return block;
}

// (2226:86) 
function create_if_block_12(ctx) {
	let div;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[Choose Selected]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[Choose Selected]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-left", "auto");
			attr_dev(div, "class", "selectable pass svelte-iqexfp");
			add_location(div, file$2, 2228, 8, 98553);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_18*/ ctx[161], false, false, false),
				listen_dev(div, "tap", /*tap_handler_18*/ ctx[162], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_12.name,
		type: "if",
		source: "(2226:86) ",
		ctx
	});

	return block;
}

// (2222:28) 
function create_if_block_11(ctx) {
	let div;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[End Turn]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[End Turn]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-left", "auto");
			attr_dev(div, "class", "selectable pass svelte-iqexfp");
			add_location(div, file$2, 2224, 8, 98098);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_17*/ ctx[159], false, false, false),
				listen_dev(div, "tap", /*tap_handler_17*/ ctx[160], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_11.name,
		type: "if",
		source: "(2222:28) ",
		ctx
	});

	return block;
}

// (2219:7) {#if game.passp }
function create_if_block_10(ctx) {
	let div;
	let t0;
	let br;
	let t1;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("[Pass to ");
			br = element("br");
			t1 = text(" Next Player]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "[Pass to ");
			br = claim_element(div_nodes, "BR", { class: true });
			t1 = claim_text(div_nodes, " Next Player]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(br, "class", "svelte-iqexfp");
			add_location(br, file$2, 2220, 134, 97866);
			set_style(div, "margin-left", "auto");
			attr_dev(div, "class", "selectable pass svelte-iqexfp");
			add_location(div, file$2, 2220, 8, 97740);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, br);
			append_dev(div, t1);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_16*/ ctx[157], false, false, false),
				listen_dev(div, "tap", /*tap_handler_16*/ ctx[158], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(2219:7) {#if game.passp }",
		ctx
	});

	return block;
}

// (2241:8) {#each player.hand as card (card.id)}
function create_each_block_3(key_1, ctx) {
	let first;
	let current;

	function touchstart_handler_1(...args) {
		return /*touchstart_handler_1*/ ctx[163](/*card*/ ctx[183], ...args);
	}

	function touchmove_handler_1(...args) {
		return /*touchmove_handler_1*/ ctx[165](/*card*/ ctx[183], ...args);
	}

	function click_handler_19(...args) {
		return /*click_handler_19*/ ctx[166](/*card*/ ctx[183], ...args);
	}

	function tap_handler_19(...args) {
		return /*tap_handler_19*/ ctx[167](/*card*/ ctx[183], ...args);
	}

	const card = new Card({
			props: {
				card: /*card*/ ctx[183],
				mini: true,
				selectable: /*game*/ ctx[0].displayinfo.selectionzone == "hand"
			},
			$$inline: true
		});

	card.$on("touchstart", touchstart_handler_1);
	card.$on("touchend", /*touchend_handler_1*/ ctx[164]);
	card.$on("touchmove", touchmove_handler_1);
	card.$on("click", click_handler_19);
	card.$on("tap", tap_handler_19);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(card.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(card.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const card_changes = {};
			if (dirty[0] & /*game*/ 1) card_changes.card = /*card*/ ctx[183];
			if (dirty[0] & /*game*/ 1) card_changes.selectable = /*game*/ ctx[0].displayinfo.selectionzone == "hand";
			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(2241:8) {#each player.hand as card (card.id)}",
		ctx
	});

	return block;
}

// (2164:3) {#each game.players as player}
function create_each_block_2(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index] !== undefined && (/*lobby*/ ctx[1].screenname == /*player*/ ctx[180].name && /*lobby*/ ctx[1].online || /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].id == /*player*/ ctx[180].id && !/*lobby*/ ctx[1].online) && create_if_block_9(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index] !== undefined && (/*lobby*/ ctx[1].screenname == /*player*/ ctx[180].name && /*lobby*/ ctx[1].online || /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].id == /*player*/ ctx[180].id && !/*lobby*/ ctx[1].online)) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_9(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(2164:3) {#each game.players as player}",
		ctx
	});

	return block;
}

// (2251:3) {#if game.displayinfo.selectionzone=='options'}
function create_if_block_7$1(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let div_class_value;
	let current;
	let each_value_1 = /*game*/ ctx[0].options;
	validate_each_argument(each_value_1);
	const get_key = ctx => /*option*/ ctx[177].name;
	validate_each_keys(ctx, each_value_1, get_each_context_1$1, get_key);

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1$1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$1(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*game*/ ctx[0].options[0] !== undefined && /*game*/ ctx[0].options[0].type !== undefined
			? "talloptions"
			: "options") + " svelte-iqexfp"));

			add_location(div, file$2, 2251, 4, 99882);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, choosewrapper*/ 17) {
				const each_value_1 = /*game*/ ctx[0].options;
				validate_each_argument(each_value_1);
				group_outros();
				validate_each_keys(ctx, each_value_1, get_each_context_1$1, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div, outro_and_destroy_block, create_each_block_1$1, null, get_each_context_1$1);
				check_outros();
			}

			if (!current || dirty[0] & /*game*/ 1 && div_class_value !== (div_class_value = "" + (null_to_empty(/*game*/ ctx[0].options[0] !== undefined && /*game*/ ctx[0].options[0].type !== undefined
			? "talloptions"
			: "options") + " svelte-iqexfp"))) {
				attr_dev(div, "class", div_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7$1.name,
		type: "if",
		source: "(2251:3) {#if game.displayinfo.selectionzone=='options'}",
		ctx
	});

	return block;
}

// (2257:6) {:else}
function create_else_block_1$1(ctx) {
	let div;
	let t0_value = /*option*/ ctx[177].name + "";
	let t0;
	let t1;
	let div_class_value;
	let dispose;

	function click_handler_22(...args) {
		return /*click_handler_22*/ ctx[172](/*option*/ ctx[177], ...args);
	}

	function tap_handler_22(...args) {
		return /*tap_handler_22*/ ctx[173](/*option*/ ctx[177], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "pass " + (/*game*/ ctx[0].displayinfo.selectionzone == "options"
			? /*option*/ ctx[177].selected ? "selected" : "selectable"
			: "bordered") + " svelte-iqexfp");

			add_location(div, file$2, 2257, 7, 100498);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", click_handler_22, false, false, false),
				listen_dev(div, "tap", tap_handler_22, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*game*/ 1 && t0_value !== (t0_value = /*option*/ ctx[177].name + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*game*/ 1 && div_class_value !== (div_class_value = "pass " + (/*game*/ ctx[0].displayinfo.selectionzone == "options"
			? /*option*/ ctx[177].selected ? "selected" : "selectable"
			: "bordered") + " svelte-iqexfp")) {
				attr_dev(div, "class", div_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$1.name,
		type: "else",
		source: "(2257:6) {:else}",
		ctx
	});

	return block;
}

// (2254:6) {#if option.type !== undefined}
function create_if_block_8(ctx) {
	let t;
	let current;

	function click_handler_20(...args) {
		return /*click_handler_20*/ ctx[168](/*option*/ ctx[177], ...args);
	}

	function tap_handler_20(...args) {
		return /*tap_handler_20*/ ctx[169](/*option*/ ctx[177], ...args);
	}

	const planetcard0 = new PlanetCard({
			props: {
				planet: /*option*/ ctx[177],
				selectable: /*game*/ ctx[0].displayinfo.selectionzone == "options"
			},
			$$inline: true
		});

	planetcard0.$on("click", click_handler_20);
	planetcard0.$on("tap", tap_handler_20);

	function click_handler_21(...args) {
		return /*click_handler_21*/ ctx[170](/*option*/ ctx[177], ...args);
	}

	function tap_handler_21(...args) {
		return /*tap_handler_21*/ ctx[171](/*option*/ ctx[177], ...args);
	}

	const planetcard1 = new PlanetCard({
			props: {
				planet: { .../*option*/ ctx[177], settled: true },
				selectable: /*game*/ ctx[0].displayinfo.selectionzone == "options"
			},
			$$inline: true
		});

	planetcard1.$on("click", click_handler_21);
	planetcard1.$on("tap", tap_handler_21);

	const block = {
		c: function create() {
			create_component(planetcard0.$$.fragment);
			t = space();
			create_component(planetcard1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(planetcard0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(planetcard1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(planetcard0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(planetcard1, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const planetcard0_changes = {};
			if (dirty[0] & /*game*/ 1) planetcard0_changes.planet = /*option*/ ctx[177];
			if (dirty[0] & /*game*/ 1) planetcard0_changes.selectable = /*game*/ ctx[0].displayinfo.selectionzone == "options";
			planetcard0.$set(planetcard0_changes);
			const planetcard1_changes = {};
			if (dirty[0] & /*game*/ 1) planetcard1_changes.planet = { .../*option*/ ctx[177], settled: true };
			if (dirty[0] & /*game*/ 1) planetcard1_changes.selectable = /*game*/ ctx[0].displayinfo.selectionzone == "options";
			planetcard1.$set(planetcard1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(planetcard0.$$.fragment, local);
			transition_in(planetcard1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(planetcard0.$$.fragment, local);
			transition_out(planetcard1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(planetcard0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(planetcard1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(2254:6) {#if option.type !== undefined}",
		ctx
	});

	return block;
}

// (2253:5) {#each game.options as option (option.name)}
function create_each_block_1$1(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_8, create_else_block_1$1];
	const if_blocks = [];

	function select_block_type_4(ctx, dirty) {
		if (/*option*/ ctx[177].type !== undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_4(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_4(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1$1.name,
		type: "each",
		source: "(2253:5) {#each game.options as option (option.name)}",
		ctx
	});

	return block;
}

// (2149:3) {#each lobby.existinggames as g}
function create_each_block$2(ctx) {
	let p;
	let t_value = /*g*/ ctx[174].label + "'s Game" + "";
	let t;
	let dispose;

	function click_handler_7(...args) {
		return /*click_handler_7*/ ctx[136](/*g*/ ctx[174], ...args);
	}

	function tap_handler_7(...args) {
		return /*tap_handler_7*/ ctx[137](/*g*/ ctx[174], ...args);
	}

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-iqexfp");
			add_location(p, file$2, 2149, 4, 93105);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(p, "click", click_handler_7, false, false, false),
				listen_dev(p, "tap", tap_handler_7, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*lobby*/ 2 && t_value !== (t_value = /*g*/ ctx[174].label + "'s Game" + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(2149:3) {#each lobby.existinggames as g}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*mounted*/ ctx[2] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*mounted*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let game,
		lobby,
		phases,
		corephases,
		actioncardphases,
		mounted = false,
		ws,
		jstr = JSON.stringify,
		jprs = JSON.parse,
		log = console.log;

	beforeUpdate(() => {
		
	});

	afterUpdate(() => {
		console.log(getActPlyr());
	}); // console.log('hand',game.players[0].hand.reduce((acc,cur) => acc+cur.name,''));
	// let card = game.players[0].hand[0];
	// console.log('removing ',card.name);
	// handToLimbo(game.players[0],card);

	// console.log('hand',game.players[0].hand.reduce((acc,cur) => acc+cur.name,''));
	onMount(() => {
		////////////////////////////////////////////////////////////////////////////////
		corephases = [
			/*colonize:*/
			{
				actn: [
					genActionPhase("Choose between Settling or Colonizing a Planet", ["colonize"], wrappedOffer(["Colonize", "Settle Colonies"])),
					genActionPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offer(false, false, ["unsettled_planets"], "subchoices", finish), ["Settle Colonies"]),
					genActionPhase("Settling your Planet", ["colonize"], () => settle_colonies(getSubChoice(), getActPlyr()), ["Settle Colonies"]),
					genActionPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offer(false, false, ["unsettled_planets"], "subchoices", finish), ["Colonize"]),
					genActionPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							colonize(getSubChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				lead: [
					genLeadPhase("Choose between Settling or Colonizing a Planet", ["colonize"], wrappedOffer(["Colonize", "Settle Colonies"])),
					genLeadPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offerUnsettled(), ["Settle Colonies"]),
					genLeadPhase(
						"Settling your Planet",
						["colonize"],
						() => {
							settle_colonies(getSubChoice(), getActPlyr());
							finish();
						},
						["Settle Colonies"]
					),
					genLeadPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offerUnsettled(), ["Colonize"]),
					genLeadPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							if (getSubChoice().name == "Skip") finish();
							let planet = getSubChoice();
							if (planet.hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize, 0) >= planet.settle_cost) colonize(planet, getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				fllw: [
					genFollowPhase("Choose between Settling or Colonizing a Planet", ["colonize"], () => {
						if (0 == getActPlyr().permanents.filter(e => "bureaucracy" == e.type).length) {
							$$invalidate(0, game.choices = [{ name: "Colonize" }], game);
							finish(!0);
						} else simpleOffer(["Colonize", "Settle Colonies"]);
					}),
					genFollowPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offerUnsettled(), ["Settle Colonies"]),
					genFollowPhase(
						"Settling your Planet",
						["colonize"],
						() => {
							settle_colonies(getSubChoice(), getActPlyr());
							finish(!0);
						},
						["Settle Colonies"]
					),
					genFollowPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offerUnsettled(), ["Colonize"]),
					genFollowPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							let planet = getSubChoices().find(planet => planet.hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize) >= planet.settle_cost);
							colonize(planet, getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				clnp: []
			},
			/*/producetrade:/*/
			{
				actn: [
					genActionPhase("Choose between Producing or Trading Resources", ["producetrade"], wrappedOffer(["produce", "trade"])),
					genActionPhase("Choose a Planet to Produce Resources on", ["producetrade"], () => offer(false, false, ["settled_&_conquered_planets"], "subchoices", finish), ["produce"]),
					genActionPhase(
						"Producing a Resource",
						["producetrade"],
						() => {
							produce(getSubChoices());
							finish(true);
						},
						["produce"]
					),
					genActionPhase("Choose a Planet to Trade Resources from", ["producetrade"], () => offer(false, false, ["settled_&_conquered_planets"], "subchoices", finish), ["trade"]),
					genActionPhase(
						"Trading a Resource",
						["producetrade"],
						() => {
							trade(getSubChoices(), getActPlyr());
							finish();
						},
						["trade"]
					)
				],
				lead: [
					genLeadPhase("Choose between Producing or Trading Resources", ["producetrade"], () => offer(false, false, ["options", [{ name: "produce" }, { name: "trade" }]], "choices", finish)),
					genLeadPhase("Choose a Planet to Produce Resources on", ["producetrade"], () => offer(true, true, ["settled_&_conquered_planets"], "subchoices", finish), ["produce"]),
					genLeadPhase(
						"Producing a Resource",
						["producetrade"],
						() => {
							getActPlyr().activerole = "produce";
							let prd = produce(getSubChoices(), getActPlyr().bstIcons.produce);

							if (getActvActn() == "genetic_engineering") prd.forEach(plyr => plyr = [
								...plyr,
								{
									influence: [...plyr.influence, game.influence.pop()]
								}
							]);

							finish(true);
						},
						["produce"]
					),
					genLeadPhase("Choose a Planet to Trade Resources from", ["producetrade"], () => offer(true, true, ["settled_&_conquered_planets"], "subchoices", finish), ["trade"]),
					genLeadPhase(
						"Trading a Resource",
						["producetrade"],
						() => {
							getActPlyr().activerole = "trade";
							let prd = trade(getSubChoices(), getActPlyr(), getActPlyr().bstIcons.trade);

							if (getActvActn() == "diverse_markets") {
								for (let i in prd) {
									if (prd[i] > 1) {
										getActPlyr().influence.push(game.influence.pop());
									}
								}
							}

							if (getActvActn() == "specialization") {
								for (let i in Array.from(prd[getActPlyr().specialization])) {
									//what on earth is this doing?
									getActPlyr().influence.push(game.influence.pop());
								}
							}

							finish(true);
						},
						["trade"]
					)
				],
				fllw: [
					genFollowPhase("Choose a Planet to Produce Resources on", ["produce"], () => offer(!0, !0, ["settled_&_conquered_planets"], "subchoices", finish)),
					genFollowPhase("Producing a Resource", ["produce"], () => {
						let e = game;
						getActPlyr().activerole = "produce";
						produce(e.subchoices, e.players[game.acting_player_index].bstIcons.produce);
						finish(!0);
					}),
					genFollowPhase("Choose a Planet to Trade Resources from", ["trade"], () => offer(!0, !0, ["settled_&_conquered_planets"], "subchoices", finish)),
					genFollowPhase("Trading a Resource", ["trade"], () => {
						let e = game;
						getActPlyr().activerole = "trade";
						trade(e.subchoices, getActPlyr(), getActPlyr().bstIcons.trade);
						finish(!0);
					})
				],
				clnp: []
			},
			/*/politics:/*/
			{
				actn: [
					genActionPhase("Choose a Role Card to Replace Politics with", ["politics"], () => offer(false, false, ["rolecards"], "choices", finish)),
					genActionPhase("Swapping the Role Card for your Politics Card", ["politics"], () => {
						politics(getActPlyr().limbo.filter(el => el.type == "politics")[0], getChoices()[0], getActPlyr());
						finish(true);
					})
				],
				lead: [],
				fllw: [],
				clnp: []
			},
			/*/research:/*/
			{
				actn: [
					genActionPhase("Choose up to 2 Cards from your Hand to Remove from the Game", ["research"], () => offer(false, true, ["hand"], "choices", finish)),
					genActionPhase("Removing your Cards from the Game", ["research"], () => {
						research(getChoices(), getActPlyr());
						finish(true);
					})
				],
				lead: [
					genLeadPhase("Choose a Technology to Research", ["research"], () => offer(true, false, ["research"], "choices", finish)),
					genLeadPhase("Researching your Technology", ["research"], () => {
						if (getChoice() == "Skip") {
							finish(true);
							return;
						}

						let card = getChoices()[0];
						let p = { advanced: 0, metallic: 0, fertile: 0 };
						[...getActPlyr().settled_planets, ...getActPlyr().conquered_planets].map(el => p[el.type]++);
						let condition = Object.values(card.planet_requirements).reduce((acc, cur, i) => acc ? cur > p[Object.keys(p)[i]] : acc, true);

						if (condition && getActPlyr().bstIcons.research >= card.research_cost) play(
							game.research_deck,
							card.is_permanent
							? getActPlyr().permanents
							: getActPlyr().limbo,
							card.is_permanent ? "" : "discard",
							card.id
						);

						finish(true);
					})
				],
				fllw: [
					genFollowPhase("Choose a Technology to Research", ["research"], () => offer(!0, !1, ["research"], "choices", finish)),
					genFollowPhase("Researching your Technology", ["survey"], () => {
						let e = game;

						if ("Skip" != e.choices[0].name) {
							let a = { advanced: 0, metallic: 0, fertile: 0 };

							[
								...e.players[game.acting_player_index].settled_planets,
								...e.players[game.acting_player_index].conquered_planets
							].map(e => {
								a[e.type]++;
							});

							let p = !0;
							for (let i in e.choices[0].planet_requirements) e.choices[0].planet_requirements[i] > a[i] && (p = !1);
							p && e.players[game.acting_player_index].bstIcons.research >= e.choices[0].research_cost && play(e.research_deck, e.players[game.acting_player_index].limbo, "discard", e.choices[0].id);
						}

						finish(!0);
					})
				],
				clnp: []
			},
			/*/survey:/*/
			{
				actn: [
					genActionPhase("Surveying your Empire", ["survey"], () => {
						survey(getActPlyr());
						finish(true);
					})
				],
				lead: [
					genLeadPhase("Choose a Planet from your Galaxy to Explore", ["survey"], () => {
						for (let i = 0; i < getActPlyr().bstIcons.survey; i++) {
							explore_planet(getActPlyr());
						}

						offer(true, false, ["options", game.options], "choices", finish);
					}),
					genLeadPhase("Surveying your Empire", ["survey"], () => {
						if (getChoice() == "Skip") finish();
						catalog_planet(getActPlyr());
						finish(true);
					})
				],
				fllw: [
					genFollowPhase("Choose a Planet from your Galaxy to Explore", ["survey"], () => {
						let e = game;
						for (let a = 0; a < e.players[game.acting_player_index].bstIcons.survey - 1; a++) explore_planet(e.players[game.acting_player_index]);
						offer(!0, !1, ["options"], "choices", finish);
					}),
					genFollowPhase("Surveying your Empire", ["survey"], () => {
						if (getChoice() == "Skip") finish();
						catalog_planet(game.players[game.acting_player_index]);
						finish(!0);
					})
				],
				clnp: [
					{
						"": () => {
							
						}
					}
				]
			},
			/*/warfare:/*/
			{
				actn: [
					genActionPhase("Choose between Collecting a Starfighter or Conquering a Planet", ["warfare"], wrappedOffer(["Conquer a Planet", "Collect a Starfighter"])),
					genActionPhase(
						"Adding a Starfighter to your Fleet",
						["warfare"],
						() => {
							warfare(getActPlyr());
							finish(true);
						},
						["Collect a Starfighter"]
					),
					genActionPhase("Choose a Planet to Conquer", ["warfare"], () => offer(false, false, ["unsettled_planets"], "subchoices", finish), ["Conquer a Planet"]),
					genActionPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(getSubChoice(), getActPlyr());
							finish(true);
						},
						["Conquer a Planet"]
					)
				],
				lead: [
					genLeadPhase("Choose between Collecting Starfighters or Conquering a Planet", ["warfare"], wrappedOffer(["Conquer a Planet", "Collect Starfighters"])),
					genLeadPhase(
						"Adding Starfighters to your Fleet",
						["warfare"],
						() => {
							range(1, getActPlyr().bstIcons.warfare).forEach(() => warfare(getActPlyr()));
							finish(true);
						},
						["Collect Starfighters"]
					),
					genLeadPhase("Choose a Planet to Conquer", ["warfare"], () => offerUnsettled(), ["Conquer a Planet"]),
					genLeadPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(getSubChoice(), getActPlyr());
							finish(true);
						},
						["Conquer a Planet"]
					)
				],
				fllw: [
					genFollowPhase("Choose between Collecting Starfighters or Conquering a Planet", ["warfare"], () => {
						if (0 == game.players[game.acting_player_index].permanents.filter(e => "bureaucracy" == e.type).length) {
							let e = game;
							e.choices = [{ name: "Collect Starfighters" }];
							finish(!0);
						} else offer(
							!1,
							!1,
							[
								"options",
								[{ name: "Conquer a Planet" }, { name: "Collect Starfighters" }]
							],
							"choices",
							finish
						);
					}),
					genFollowPhase(
						"Adding Starfighters to your Fleet",
						["warfare"],
						() => {
							for (let e = 0; e < game.players[game.acting_player_index].bstIcons.warfare; e++) warfare(game.players[game.acting_player_index]);
							finish(!0);
						},
						["Collect Starfighters"]
					),
					genFollowPhase("Choose a Planet to Conquer", ["warfare"], () => offer(!1, !1, ["unsettled_planets"], "subchoices", finish), ["Conquer a Planet"]),
					genFollowPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(game.subchoices[0], game.players[game.acting_player_index]);
							finish(!0);
						},
						["Conquer a Planet"]
					)
				],
				clnp: [
					{
						"": () => {
							
						}
					}
				]
			}
		];

		actioncardphases = [
			// #######################################################################################################################################################################################
			// improved_colonize 
			genActionPhase("Choose wether or not to Settle a Planet", ["improved_colonize"], () => offer(true, false, ["options", [{ name: "settle" }, { name: "Skip" }]], "choices", finish)),
			genActionPhase("Choose a Planet to Settle", ["improved_colonize"], () => offerUnsettled(), ["settle"]),
			genActionPhase(
				"Settling your Planet",
				["improved_colonize"],
				() => {
					settle_colonies(getSubChoice(), getActvPlyr());
					finish(true);
				},
				["settle"]
			),
			genActionPhase("Choose between Settling or Colonizing a Planet", ["improved_colonize"], wrappedOffer(["Colonize", "Settle Colonies"])),
			genActionPhase("Choose an Unsettled Planet to Settle", ["improved_colonize"], () => offerUnsettled(), ["Settle Colonies"]),
			genActionPhase(
				"Settling your Planet",
				["improved_colonize"],
				() => {
					settle_colonies(getSubChoice(), getActPlyr());
					finish(true);
				},
				["Settle Colonies"]
			),
			genActionPhase("Choose an Unsettled Planet to Colonize", ["improved_colonize"], () => offerUnsettled(), ["Colonize"]),
			genActionPhase(
				"Colonizing your Planet",
				["improved_colonize"],
				() => {
					colonize(getSubChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "improved_colonize")[0]);
					finish(true);
				},
				["Colonize"]
			),
			// #######################################################################################################################################################################################
			// improved_produce : 4
			genActionPhase("Choose an empty Production Zone to Produce in", ["improved_production"], () => offer(true, false, ["settled_&_conquered_planets"], "choices", finish)),
			genActionPhase("Producing your Resource", ["improved_production"], () => {
				if (getChoice() == "Skip") finish();
				produce(game.choices);
				finish(true);
			}),
			genActionPhase("Choose an empty Production Zone to Produce in", ["improved_production"], () => offer(true, false, ["settled_&_conquered_planets"], "choices", finish)),
			genActionPhase("Producing your Resource", ["improved_production"], () => {
				if (getChoice() == "Skip") finish();
				produce(game.choices);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_trade : 1
			genActionPhase("Trading your Stocks and Bonds", ["improved_trade"], () => {
				game.players[game.acting_player_index].influence.push(game.influence.pop());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_research : 2
			genActionPhase("Choose up to 3 Cards from your Hand to Remove from the Game", ["improved_research"], () => {
				draw(getActPlyr());
				offer(false, true, ["hand"], "choices", finish);
			}),
			genActionPhase("Removing your Cards from the Game", ["improved_research"], () => {
				research(getChoices(), getActPlyr(), 3);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_survey : 1
			genActionPhase("Drawing your Cards", ["improved_survey"], () => {
				draw(getActPlyr());
				draw(getActPlyr());
				draw(getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_warfare : 4
			genActionPhase("Choose between Collecting a Starfighter or Conquering a Planet", ["improved_warfare"], wrappedOffer("Conquer a Planet", "Collect a Starfighter")),
			genActionPhase(
				"Adding a Starfighter to your Fleet",
				["improved_warfare"],
				() => {
					warfare(getActPlyr());
					warfare(getActPlyr());
					finish(true);
				},
				["Collect a Starfighter"]
			),
			genActionPhase("Choose a Planet to Conquer", ["improved_warfare"], () => offerUnsettled(), ["Conquer a Planet"]),
			genActionPhase(
				"Conquering your planet",
				["improved_warfare"],
				() => {
					conquer(getSubChoice(), getActPlyr());
					finish(true);
				},
				["Conquer a Planet"]
			),
			// #######################################################################################################################################################################################
			// mobilization : 4
			genActionPhase("Collecting your Star Fighters", ["mobilization"], () => {
				warfare(getActPlyr());
				warfare(getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// survey_team : 1
			genActionPhase("Adding Top Card of the Planet deck to your Empire", ["survey_team"], () => {
				let { game, game: { acting_player: player, planet_deck } } = get();
				player = game.players[game.acting_player_index];
				let planet = planet_deck.pop();
				player.unsettled_planets.push(planet);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// war_path : 4
			genActionPhase("Choose a Planet to Conquer", ["war_path"], () => offerUnsettled()),
			genActionPhase("Conquering your planet", ["war_path"], () => {
				if (getChoice() == "Skip") finish();
				conquer(getChoice(), getActPlyr());
				finish(true);
			}),
			genActionPhase("Choose a Planet to Conquer", ["war_path"], () => offerUnsettled()),
			genActionPhase("Conquering your planet", ["war_path"], () => {
				if (getChoice() == "Skip") finish();
				conquer(getChoice(), getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// terraforming : 2
			genActionPhase("Choose an Unsettled Planet to Terraform", ["terraforming"], () => offerUnsettled()),
			genActionPhase(
				"Terraforming your Planet",
				["terraforming"],
				() => {
					colonize(getChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "terraforming")[0]);

					if (getChoice().hosted_colonies.length > 0) {
						let c = getChoice().hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize, 0);
						if (c >= getChoice().settle_cost) settle_colonies(getChoice(), getActPlyr());
					}

					finish(true);
				},
				["Colonize"]
			),
			// #######################################################################################################################################################################################
			// genetic_engineering :1
			// UNIMPLIMENTED
			genActionPhase("Engineering Genetics", ["genetic_engineering"], finish),
			// #######################################################################################################################################################################################
			// artificial_intelligence : 4
			genActionPhase("Select a Role Card to take into your Hand", ["artificial_intelligence"], () => offer(false, false, ["rolecards"], "choices", finish)),
			genActionPhase("Adding Role Card to your Machine Learning Model", ["artificial_intelligence"], () => {
				let { game, game: { acting_player: player } } = get();
				player = game.players[game.acting_player_index];

				if (game.stacks.pilecount[game.choices[0].type] >= 1) {
					player.hand.push(Object.assign({ id: gen_unique_id() }, game.stacks.rolecards[game.stacks[game.choices[0].type]]));
					game.stacks.pilecount[game.choices[0].type]--;
				}

				finish(true);
			}),
			genActionPhase("Select a Role Card to take into your Hand", ["artificial_intelligence"], () => offer(false, false, ["rolecards"], "choices", finish)),
			genActionPhase("Adding Role Card to your Machine Learning Model", ["artificial_intelligence"], () => {
				let { game, game: { acting_player: player } } = get();
				player = game.players[game.acting_player_index];

				if (game.stacks.pilecount[game.choices[0].type] >= 1) {
					player.hand.push(Object.assign({ id: gen_unique_id() }, game.stacks.rolecards[game.stacks[game.choices[0].type]]));
					game.stacks.pilecount[game.choices[0].type]--;
				}

				finish(true);
			}),
			// #######################################################################################################################################################################################
			// diverse_markets : 1
			// UNIMPLIMENTED
			genActionPhase("Diversifying Markets", ["diverse_markets"], finish),
			// #######################################################################################################################################################################################
			// specialization : 2
			genActionPhase("Choose a Resource to Specialize in", ["specialization"], wrappedOffer("red", "blue", "gren", "purple")),
			genActionPhase("Specializaing in your Seleted Resource", ["specialization"], () => {
				getActPlyr().specialization = getChoice();
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// data_network : 3
			genActionPhase("Drawing Your Cards", ["data_network"], () => {
				draw(getActPlyr());
				draw(getActPlyr());
				finish(true);
			}),
			genActionPhase("Choose any number of Cards from your Hand to Remove from the Game", ["data_network"], () => offer(true, true, ["hand"], "choices", finish)),
			genActionPhase("Removing the Selected Cards from the Game", ["data_network"], () => {
				if (getChoice() == "Skip") finish();
				let { game, game: { choices, acting_player: player } } = get();
				player = game.players[game.acting_player_index];
				research(choices, player, choices.length);
				finish(true);
			})
		];

		let nonce = 0;

		$$invalidate(0, game = {
			minPlyrs: 2,
			maaxPlyrs: 4,
			passtoplayer: false,
			nonce: 0,
			displayinfo: {
				selectionzone: "",
				dragged: null,
				showoptiontoskip: false,
				allowformultipleselections: false,
				center_or_planets: true, //true = center, false = planets
				choicelabel: "choices"
			},
			subchoices: [],
			influence: [
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			messagetoplayer: ["Waiting for other players to join"],
			options: [],
			planet_deck: [],
			currentphase: -4,
			leading_player_index: 0,
			acting_player_index: 0,
			number_of_players: 2,
			started: false,
			gamephases: [
				{
					start: [
						{
							"set active player": () => {
								if (game.started) {
									$$invalidate(0, game.started = true, game);
									$$invalidate(0, game.passt = false, game);
									$$invalidate(0, game.leading_player_index = (game.leading_player_index + 1) % game.number_of_players, game);
									$$invalidate(0, game.acting_player_index = game.leading_player_index, game);
									$$invalidate(0, game.leadingplayer = game.players[game.leading_player_index], game);
									$$invalidate(0, game.acting_player = game.players[game.leading_player_index], game);
									openFullscreen();
								}

								if (game.leadingplayer !== undefined) {
									$$invalidate(0, game.players[game.leading_player_index].rounds++, game);
								}

								let planets = [
									...game.players[game.leading_player_index].settled_planets,
									...game.players[game.leading_player_index].conquered_planets
								];

								for (let p in planets) {
									tallyIcons(game.players[game.leading_player_index], planets[p]);
								}

								for (let p in game.players[game.leading_player_index].permanents) {
									tallyIcons(game.players[game.leading_player_index], permanents[p]);
								}

								finish(true);
							}
						},
						{
							Productivity: () => {
								if (getActPlyr().permanents.filter(el => el.type == "productivity").length != 0) {
									getActPlyr().actionrolesequence = "aar";
								}

								finish();
							}
						},
						{
							"Choose an Order to Perform Your Action and Role Phases": () => {
								if (getActPlyr().permanents.filter(el => el.type == "logistics").length != 0) {
									let options = ["Action Phase then Role Phase", "Role Phase then Action Phase"];

									if (getActPlyr().permanents.filter(el => el.type == "productivity").length != 0) {
										//add aar,ara,and raa as options
										options.push("Action Phase then another Action Phase then Role Phase");

										options.push("Action Phase then Role Phase then another Action Phase");
										options.push("Role Phase then Action Phase then another Action Phase");
									}

									//offer ar or ra
									simpleOffer(options);
								} else {
									finish();
								}
							}
						},
						{
							Logistics: () => {
								if (getActPlyr().permanents.filter(el => el.type == "logistics").length != 0) {
									if (getChoice() == "Action Phase then Role Phase") {
										getActPlyr().actionrolesequence = "ar";
									} else if (getChoice() == "Role Phase then Action Phase") {
										getActPlyr().actionrolesequence = "ra";
									} else if (getChoice() == "Action Phase then another Action Phase then Role Phase") {
										getActPlyr().actionrolesequence = "aar";
									} else if (getChoice() == "Action Phase then Role Phase then another Action Phase") {
										getActPlyr().actionrolesequence = "ara";
									} else if (getChoice() == "Role Phase then Action Phase then another Action Phase") {
										getActPlyr().actionrolesequence = "raa";
									}

									finish(true);
								} else {
									finish();
								}
							}
						}
					]
				},
				{
					action: [
						{
							"Choose an Action to Play": () => {
								offer(true, false, ["hand"], "choices", finish);
							}
						},
						{
							"Playing your Action": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									let card = getChoices()[0], plyr = getActPlyr();
									plyr.activeaction = card.type;
									handToLimbo(plyr, card);
									finish(true);
								}
							}
						},
						...getActionCorePhases(),
						...getActionCardPhases()
					]
				},
				{
					role: [
						{
							"Choose a Role Card to Lead with": () => {
								offer(false, false, ["rolecards"], "choices", finish);
							}
						},
						{
							"Performing your Role": () => {
								let card = getChoices()[0];

								if (game.stacks.pilecount[card.type] >= 1) {
									if (card.type == "producetrade") {
										getActPlyr().bstIcons["produce"]++;
										getActPlyr().bstIcons["trade"]++;
									} else {
										getActPlyr().bstIcons[card.type]++;
									}

									let newcard = Object.assign(
										{
											id: gen_unique_id(),
											finDest: "discard",
											selected: true
										},
										game.stacks.rolecards[game.stacks[card.type]]
									);

									getActPlyr().limbo = [...getActPlyr().limbo, newcard];
									$$invalidate(0, game.stacks.pilecount[card.type]--, game);
								} else if (card.type != "colonize") {
									getActPlyr().bstIcons[card.type]++;
								}

								getActPlyr().activerole = card.type;
								finish(true);
							}
						}
					]
				},
				{
					lead: [
						{
							"Choose cards from your hand to Boost the effectiveness of your Role": () => {
								offer(true, true, ["hand"], "choices", finish);
							}
						},
						{
							"Boosting your Role": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									getChoices().forEach(card => {
										boostWithIcons(getActPlyr(), card);
										card.finDest = "discard";
									});

									//TODO: tally up icons on planets
									//TODO: tally up icons on technologies
									finish(true);
								}
							}
						},
						...getLeadCorePhases(),
						{
							"Pass the device to the Next Player": () => {
								$$invalidate(0, game.displayinfo.selectionzone = "", game);
								$$invalidate(0, game.passp = true, game);
							}
						},
						{
							"You passed Priority": () => {
								$$invalidate(0, game.passp = false, game);
								finish(true);
							}
						}
					]
				},
				{
					follow: [
						{
							"Choose between Following or Dissent the Leading Role": () => {
								simpleOffer(["dissent", getLeadPlyr().activerole]);
							}
						},
						{
							Dissenting: () => {
								getActPlyr().activerole = getChoice();

								if (getActPlyr().activerole != "dissent") {
									let card = getChoices()[0];

									if (game.stacks.pilecount[card.name] >= 1) {
										getActPlyr().bstIcons[card.name]++;

										let newcard = Object.assign(
											{
												id: gen_unique_id(),
												finDest: "discard",
												selected: true
											},
											game.stacks.rolecards[game.stacks[card.name]]
										);

										getActPlyr().limbo = [...getActPlyr().limbo, newcard];
										$$invalidate(0, game.stacks.pilecount[card.name]--, game);
									} else if (card.name != "colonize") {
										boostWithIcons(getActPlyr(), card);
									}

									finish(true);
								} else {
									draw(getActPlyr());

									if (getActPlyr().permanents.filter(el => el.type == "dissension").length != 0) {
										draw(getActPlyr());
									}

									finish(true);
								}
							}
						},
						{
							"Choose cards from your hand to Boost the effectiveness of your Role": () => {
								if (getActPlyr().activerole == "dissent") {
									finish(); //will auto pass to next phase if follow has been selected
								} else {
									offer(true, true, ["hand"], "choices", finish);
								}
							}
						},
						{
							"Boosting your Role": () => {
								if (getActPlyr().activerole == "dissent") {
									finish();
								} else {
									if (getChoice() == "Skip") {
										finish();
									} else {
										let cards = getChoices;

										for (let i in cards) {
											boostWithIcons(getActPlyr(), cards[i]);
										}

										//TODO: tally up icons on planets
										//TODO: tally up icons on technologies
										finish(true);
									}
								}
							}
						},
						...getFollowCorePhases(),
						{
							"Pass the device to the Next Player": () => {
								$$invalidate(0, game.displayinfo.selectionzone = "", game);
								$$invalidate(0, game.passp = true, game);
							}
						},
						{
							"You passed Priority": () => {
								$$invalidate(0, game.passp = false, game);
								finish(true);
							}
						}
					]
				},
				// discard : 2
				{
					discard: [
						{
							"Would you like to Mobilize against a Planet": () => {
								if (getActPlyr().activeaction != "mobilization") {
									finish();
								} else {
									offer(true, false, ["options", [{ name: "mobilize" }, { name: "skip" }]], "choices", finish);
								}
							}
						},
						{
							"Choose a Planet to Mobilize Against": () => {
								if (getActPlyr().activeaction != "mobilization" || getChoice() != "mobilize") {
									finish();
								} else {
									offerUnsettled();
								}
							}
						},
						{
							"Mobalizing against your Planet": () => {
								if (getActPlyr().activeaction != "mobilization") {
									finish();
								} else {
									conquer(getSubChoice(), getActPlyr());
									finish(true);
								}
							}
						},
						{
							"Would you like to Streamline Your Empire": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0) {
									finish();
								} else {
									offer(
										false,
										false,
										[
											"options",
											[{ name: "Decline" }, { name: "Streamline Empire" }]
										],
										"choices",
										finish
									);
								}
							}
						},
						{
							"Choose a Card from Your Hand to Remove from the Game": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0 || getChoice() != "Streamline Empire") {
									finish();
								} else {
									offer(true, false, ["hand"], "subchoices", finish);
								}
							}
						},
						{
							"Streamlining Your Empire": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0 || getChoice() != "Streamline Empire" || getChoice() == "Skip") {
									finish();
								} else {
									research(getChoices(), getActPlyr(), 1);
								}
							}
						},
						{
							"Would you like to Utilize Your Empire's Hyperefficiency": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0) {
									finish();
								} else {
									simpleOffer(["Decline", "Utilize Hyperefficiency"]);
								}
							}
						},
						{
							"Choose a Card from Your Hand to Remove from the Game": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0 || getChoice() != "Utilize Hyperefficiency") {
									finish();
								} else {
									offer(true, true, ["hand"], "subchoices", finish);
								}
							}
						},
						{
							"Your Empire is Hyperefficient": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0 || getChoice() != "Utilize Hyperefficiency" || getChoice() == "Skip") {
									finish();
								} else {
									research(getChoices(), getActPlyr(), getChoices().length);
								}
							}
						},
						{
							"Choose any Cards you would like to Discard": () => {
								offer(true, true, ["hand"], "choices", finish);
							}
						},
						{
							"Discarding your Selected Cards": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									getChoices().forEach(card => {
										getActPlyr().discard = [...getActPlyr().discard, card];
										getActPlyr().limbo = getActPlyr().limbo.filter(c => c.id != card.id);
									});

									finish(true);
								}
							}
						}
					]
				},
				//cleanup : 1
				{
					cleanup: [
						{
							"Drawing up to your Hand Size": () => {
								cleanup();
								let handsize = getActPlyr().handsize;

								for (let index in getActPlyr().settled_planets) {
									handsize += getActPlyr().settled_planets[index].handsize_modifier;
								}

								for (let index in getActPlyr().conquered_planets) {
									handsize += getActPlyr().conquered_planets[index].handsize_modifier;
								}

								let l = getActPlyr().hand.length;

								if (l < handsize) {
									draw(getActPlyr(), handsize - l);
								}

								game.players.forEach(resetIconBoost);

								if (game.started && checkforendgame() && game.players.reduce((t, p) => t + p.rounds, 0) % game.number_of_players == 0) {
									totalinfluence();
									$$invalidate(0, game.nextphase = endgame, game);
								}

								finish(true);
							}
						},
						{
							"Pass the device to the Next Player": () => {
								$$invalidate(0, game.displayinfo.selectionzone = "", game);
								$$invalidate(0, game.displayinfo.showoptiontoskip = false, game);
								$$invalidate(0, game.displayinfo.allowformultipleselections = false, game);
								$$invalidate(0, game.passp = false, game);
								$$invalidate(0, game.passt = true, game);
							}
						},
						{
							"You passed the Turn": () => {
								$$invalidate(0, game.passt = false, game);
								finish(true);
							}
						}
					]
				}
			],
			players: [],
			winner: false,
			stacks: {
				pilecount: {
					research: 20,
					producetrade: 16,
					colonize: 20,
					warfare: 16,
					survey: 20
				},
				survey: 0,
				warfare: 1,
				colonize: 2,
				producetrade: 3,
				research: 4, //indexes
				rolecards: [
					genEmptyCard("survey", "Survey", { survey: 1 }),
					genEmptyCard("warfare", "Warfare", { warfare: 1 }),
					genEmptyCard("colonize", "Colonize", { colonize: 1 }),
					genEmptyCard("producetrade", "Produce / Trade", { produce: 1, trade: 1 }),
					genEmptyCard("research", "Research", { research: 1 }, { research_deck: [] })
				]
			}
		});

		let url = location.origin.replace(/^http/, "ws");

		$$invalidate(1, lobby = {
			screenname: "",
			url,
			sets: ["Base Game"],
			number_of_players: [2, 3, 4],
			existinggames: []
		});

		$$invalidate(0, game.nonce = nonce, game);
		$$invalidate(2, mounted = true);
	});

	///////////////////////////////////////////////////////////////////////////////
	let clearOptions = () => $$invalidate(0, game.options = [], game),
		offerUnsettled = () => offer(false, false, ["unsettled_planets"], "subchoices", finish),
		getActionCardPhases = () => actioncardphases,
		getActvActn = () => getActPlyr().activeaction,
		getActvRole = () => getActPlyr().activerole,
		getChoice = () => game.choices[0].name,
		getChoices = () => game.choices,
		getSubChoice = () => getSubChoices()[0],
		getSubChoices = () => game.subchoices,
		finish = (cond = false) => phasefinishfunction(cond),
		getActPlyr = () => game.players[game.acting_player_index],
		getLeadPlyr = () => game.players[game.leading_player_index],
		simpleOffer = choices => offer(false, false, ["options", choices.reduce((acc, cur) => [...acc, { name: cur }], [])], "choices", finish),
		wrappedOffer = choices => () => simpleOffer(choices),
		getActionCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.actn], []).reduce((acc, cur) => [...acc, ...cur], []),
		getLeadCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.lead], []).reduce((acc, cur) => [...acc, ...cur], []),
		getFollowCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.fllw], []).reduce((acc, cur) => [...acc, ...cur], []),
		genActionPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvActn()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genLeadPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvRole()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genFollowPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvRole()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genEmptyCard = (type, name, symbols, extras = {}) => ({
			type,
			selected: false,
			name,
			selected: false,
			icons: {
				...{
					survey: 0,
					warfare: 0,
					colonize: 0,
					produce: 0,
					trade: 0,
					research: 1
				},
				...symbols
			},
			image: null,
			...extras
		}),
		tallyIcons = (dest, src) => ["survey", "warfare", "trade", "produce", "research"].forEach(icon => dest.icons[icon] += src.icons[icon]),
		handToLimboWithLimboDuplicatePurge = (plyr, card) => {
			rmFromField("limbo", plyr, card); /*"colonize"*/
			handToLimbo(plyr, card);
		},
		handToLimbo = (plyr, card) => {
			playToField("limbo", plyr, card, "discard");
			rmFromField("hand", plyr, card);
		},
		limboToHand = (plyr, card) => {
			playToField("hand", plyr, card, "");
			rmFromField("limbo", plyr, card);
		},
		playToField = (fld, plyr, card, fDest) => plyr[fld] = [...plyr[fld], { ...card, finDest: fDest }],
		rmFromField = (fld, plyr, card) => plyr[fld] = plyr[fld].filter(el => card.id != el.id),
		boostWithIcons = (plyr, src) => Object.keys(src.icons).forEach(icon => plyr.bstIcons[icon] += src.icons[icon]),
		resetIconBoost = plyr => plyr.bstIcons = {
			survey: 0,
			warfare: 0,
			colonize: 0,
			produce: 0,
			trade: 0,
			research: 0
		},
		resetSelection = selected => selected.forEach(s => s.selected = false),
		offlineOrIsClientTurn = () => lobby.screenname == getActPlyr().name || !lobby.online,
		setChoice = chc => $$invalidate(0, game[game.displayinfo.choicelabel] = chc, game),
		cleanOptions = () => $$invalidate(0, game.options = [], game),
		displayPlanets = () => $$invalidate(0, game.displayinfo.center_or_planets = false, game),
		displayCenter = () => $$invalidate(0, game.displayinfo.center_or_planets = true, game),
		clearChoices = () => $$invalidate(0, game[game.displayinfo.choicelabel] = [], game),
		setDisplayInfo = (zone, multiple, skippable, label) => $$invalidate(
			0,
			game.displayinfo = {
				...game.displayinfo,
				...{
					selectionzone: zone,
					allowformultipleselections: multiple,
					showoptiontoskip: skippable,
					choicelabel: label
				}
			},
			game
		),
		getAllCards = plyr => [...plyr.deck, ...plyr.discard, ...plyr.limbo, ...plyr.hand],
		isPlanet = p => p.type == "planet" || p.type == "fertile" || p.type == "metallic" || p.type == "advanced",
		chkForPerm = perm => getActPlyr().permanents.filter(el => el.type == perm).length != 0,
		range = (min, max) => min <= max ? [...range(min, max - 1), max] : [],
		singleCllBck = (cllBck, e, func) => () => {
			func();
			document.removeEventListener(e, this);
			cllBck();
		},
		produceTradeHelper = (filled, planets, resources, func = () => {
				
			}) => {
			let prd = { blue: 0, green: 0, purple: 0, red: 0 };

			planets.forEach(planet => planet.production_zones.forEach(zone => {
				if (!zone.filled && resources > 0) {
					zone.filled = filled;
					prd[zone.type]++;
					resources--;
					func();
				}
			}));

			return prd;
		};

	let choosewrapper = (c, zone) => {
		if (game.displayinfo.selectionzone == zone && offlineOrIsClientTurn()) {
			game.displayinfo.allowformultipleselections
			? multiplechoose(c)
			: choose([c]);
		}
	};

	let multiplechoose = choice => {
		if (offlineOrIsClientTurn()) {
			if (!game[game.displayinfo.choicelabel].includes(choice)) {
				setChoice([...game[game.displayinfo.choicelabel], choice]);
				choice.selected = true;
				if (!isPlanet(choice) && choice.name != "Skip") handToLimbo(getActPlyr(), choice);
			} else {
				choice.selected = false;

				if (!isPlanet(choice) && choice.name != "Skip") {
					setChoice(game[game.displayinfo.choicelabel].filter(el => el.id != choice.id));
					limboToHand(getActPlyr(), choice);
				}
			}
		}
	};

	let choose = choices => {
		if (offlineOrIsClientTurn()) {
			clearOptions();
			resetSelection(choices);
			setChoice(choices);
			finish();
		}
	};

	let unchoose = choice => {
		if (offlineOrIsClientTurn()) {
			if (game[game.displayinfo.choicelabel].includes(choice)) {
				choice.selected = false;
				setChoice(game[game.displayinfo.choicelabel].filter(el => el.id != choice.id));
				limboToHand(getActPlyr(), choice);
			}
		}
	};

	let offer = (skippable, multiple, [field_label, choices], choice_label, callback) => {
		setDisplayInfo(field_label, multiple, skippable, choice_label); /*option to skip | sets game.displayinfo.showoptiontoskip=boolean */ /*allows multiple choices | sets game.displayinfo.allowformultipleselections=boolean */ /* available cards to choose from | game.displayinfo.selectionzone={'hand|discard|options|planets|research|rolecards'}, sets choices=array if specified*/ /* label for where the choice is stored | set with game[label]=*/ /*callback that handles the choice or finishes the phase*/

		switch (field_label) {
			case "hand":
				choices = getActPlyr().hand;
				break;
			case "research":
				choices = game.research_deck;
				break;
			case "discard":
				choices = getActPlyr().discard;
				break;
			case "planets":
				choices = game.planet_deck;
				break;
			case "rolecards":
				choices = game.stacks.rolecards;
				displayCenter();
				break;
			case "unsettled_planets":
				choices = getActPlyr().unsettled_planets;
				displayPlanets();
				break;
			case "settled_planets":
				choices = getActPlyr().settled_planets;
				displayPlanets();
				break;
			case "conquered_planets":
				choices = getActPlyr().conquered_planets;
				displayPlanets();
				break;
			case "settled_&_conquered_planets":
				choices = [...getActPlyr().settled_planets, ...getActPlyr().conquered_planets];
				displayPlanets();
				break;
		}

		clearChoices();
		present_as_choice(choices);
		sendstate();
	};

	let discard = (source_array, destination_array, id) => {
		let toRemove = source_array.find(e => id == e.id);
		source_array = source_array.filter(e => e.id != toRemove.id);
	};

	//draw deck->hand
	let totalinfluence = () => {
		game.players.forEach(plyr => {
			plyr.influence = plyr.influence.reduce((acc, cur) => acc + cur, 0) + getAllCards(plyr).reduce((acc, cur) => acc + cur.influence);
		});
	};

	let endgame = () => {
		//display victor
		let scores = game.players.map(e => e.influence);

		let winner = "";
		let highest = scores[0];

		game.players.map(e => {
			if (highest < e.influence) {
				winner = e.name;
				highest = e.influence;
			}
		});
	};

	let checkforendgame = () => {
		let depletedstacks = game.stacks.pilecount.reduce((acc, cur) => acc + (cur < 1) ? 1 : 0, 0);

		let stacklimit = game.number_of_players == 1 || game.number_of_players == 2
		? 1
		: 2;

		return stacklimit <= depletedstacks || game.influence.length == 0;
	};

	let draw = (player, quantity = 1) => {
		for (let i = 0; i < quantity; i++) {
			if (player.deck.length == 0) {
				if (player.discard.length == 0) return player;
				player.deck = knuthshuffle([...player.discard]);
				player.discard = [];
			}

			player.hand = [...player.hand, player.deck.pop()];
			player.deck = player.deck;
		}

		return player;
	};

	let play = (source_array, destination_array, finDest, id) => {
		let toRemove = source_array.find(e => id == e.id);
		source_array = source_array.filter(e => e.id != toRemove.id);
	};

	let gen_research_card = name => {
		return {
			name,
			type: name,
			id: gen_unique_id(),
			icons: {
				"survey": 0,
				"warfare": 0,
				"colonize": 0,
				"produce": 0,
				"trade": 0,
				"research": 0
			},
			planet_requirements: {
				"advanced": 0,
				"metallic": 0,
				"fertile": 0
			},
			research_cost: 0,
			action: () => {
				
			},
			is_permanent: false,
			is_doublesided: false,
			imgurl: "/images/",
			Influence_value: 0,
			img(im) {
				this.imgurl += im;
				return this;
			},
			influence(inf) {
				this.influence_value = inf;
				return this;
			},
			metallic(met) {
				this.planet_requirements.metallic = met;
				return this;
			},
			advanced(adv) {
				this.planet_requirements.advanced = adv;
				return this;
			},
			fertile(fer) {
				this.planet_requirements.fertile = fer;
				return this;
			},
			research(res) {
				this.research_cost = res;
				return this;
			},
			permanent() {
				this.is_permanent = true;
				return this;
			},
			doubleside() {
				this.is_doublesided = true;
				return this;
			},
			icons(icons) {
				this.icons = Object.assign(this.icons, icons);
				return this;
			},
			improved_colonize() {
				this.research(3);
				this.imgurl += "improvedcolonize";
				return this;
			},
			improved_survey() {
				this.research(3);
				this.imgurl += "improvedsurvey";
				return this;
			},
			improved_research() {
				this.research(3);
				this.imgurl += "improvedresearch";
				return this;
			},
			improved_warfare() {
				this.research(3);
				this.imgurl += "improvedwarfare";
				return this;
			},
			improved_production() {
				this.research(3);
				this.imgurl += "improvedproduction";
				return this;
			},
			improved_trade() {
				this.research(3);
				this.imgurl += "improvedtrade";
				return this;
			},
			surveyteam() {
				return this.research(5).metallic(2).influence(2).icons({ "survey": 2 }).img("surveyteam");
			},
			warpath() {
				return this.research(5).metallic(2).influence(2).icons({ "warfare": 2 }).img("warpath");
			},
			terraforming() {
				return this.research(5).fertile(2).influence(2).icons({ "colonize": 2 }).img("terraforming");
			},
			geneticengineering() {
				return this.research(5).fertile(2).influence(2).icons({ "produce": 2 }).img("geneticengineering");
			},
			artificialintelligence() {
				return this.research(5).fertile(2).influence(2).icons({ "colonize": 1, "produce": 1 }).img("artificialintelligence");
			},
			diversemarkets() {
				return this.research(5).advanced(2).influence(2).icons({ "research": 1, "trade": 1 }).img("diversemarkets");
			},
			specialization() {
				return this.research(5).advanced(2).influence(2).icons({ "trade": 2 }).img("specialization");
			},
			mobilization() {
				return this.research(5).metallic(2).influence(2).icons({ "survey": 1, "warfare": 1 }).img("mobilization");
			},
			datanetwork() {
				return this.research(5).advanced(2).influence(2).icons({ "research": 2 }).img("datanetwork");
			},
			abundance() {
				this.research(5);
				this.imgurl += "abundance";
				this.is_doublesided = true;
				this.is_permanent = true;
				return this.fertile(2).influence(2);
			},
			adaptability() {
				this.research(7);
				this.imgurl += "adaptability";
				this.is_doublesided = true;
				this.is_permanent = true;
				return this.advanced(3).influence(5);
			},
			bureaucracy() {
				this.research(7);
				this.imgurl += "bureaucracy";
				this.is_doublesided = true;
				this.is_permanent = true;
				return this.fertile(3).influence(5);
			},
			dissension() {
				return this.research(7).fertile(3).influence(5).permanent().doubleside().img("dissension");
			},
			hyperefficiency() {
				return this.research(7).advanced(3).influence(5).permanent().doubleside().img("hyperefficiency");
			},
			imperialism() {
				return this.research(5).metallic(2).influence(2).permanent().doubleside().img("imperialism").icons({ "survey": 1, "trade": 1, "warfare": 1 });
			},
			logistics() {
				return this.research(7).metallic(3).influence(5).permanent().doubleside().img("logistics");
			},
			productivity() {
				return this.research(7).metallic(3).influence(5).permanent().doubleside().img("productivity");
			},
			scorchedearthpolicy() {
				return this.research(5).metallic(2).influence(2).permanent().doubleside().img("scorchedearthpolicy");
			},
			streamlining() {
				return this.research(5).advanced(2).influence(2).permanent().doubleside().img("streamlining");
			},
			weaponsemporium() {
				return this.research(5).advanced(2).influence(2).permanent().doubleside().img("weaponemporium");
			},
			fertilegrounds() {
				return this.research(5).fertile(2).influence(2).permanent().doubleside().img("fertilegrounds").icons({
					"research": 1,
					"colonize": 1,
					"produce": 1
				});
			}
		};
	};

	let gen_research_deck = () => {
		$$invalidate(
			0,
			game.research_deck = [
				gen_research_card("improved_production").metallic(1).icons({ "warfare": 1, "produce": 1 }).improved_production().img("wp.png"),
				gen_research_card("improved_production").metallic(1).icons({ "survey": 1, "produce": 1 }).improved_production().img("sp.png"),
				gen_research_card("improved_trade").metallic(1).icons({ "survey": 1, "trade": 1 }).improved_trade().img("st.png"),
				gen_research_card("improved_trade").metallic(1).icons({ "warfare": 1, "trade": 1 }).improved_trade().img("wt.png"),
				gen_research_card("improved_research").metallic(1).icons({ "warfare": 1, "research": 1 }).improved_research().img("wr.png"),
				gen_research_card("improved_research").metallic(1).icons({ "survey": 1, "research": 1 }).improved_research().img("sr.png"),
				gen_research_card("improved_colonize").metallic(1).icons({ "warfare": 1, "colonize": 1 }).improved_colonize().img("wc.png"),
				gen_research_card("improved_colonize").metallic(1).icons({ "survey": 1, "colonize": 1 }).improved_colonize().img("sc.png"),
				gen_research_card("improved_warfare").fertile(1).icons({ "produce": 1, "warfare": 1 }).improved_warfare().img("pw.png"),
				gen_research_card("improved_warfare").fertile(1).icons({ "colonize": 1, "warfare": 1 }).improved_warfare().img("cw.png"),
				gen_research_card("improved_trade").fertile(1).icons({ "produce": 1, "trade": 1 }).improved_trade().img("pt.png"),
				gen_research_card("improved_trade").fertile(1).icons({ "colonize": 1, "trade": 1 }).improved_trade().img("ct.png"),
				gen_research_card("improved_research").fertile(1).icons({ "produce": 1, "research": 1 }).improved_research().img("pr.png"),
				gen_research_card("improved_research").fertile(1).icons({ "colonize": 1, "research": 1 }).improved_research().img("cr.png"),
				gen_research_card("improved_survey").fertile(1).icons({ "produce": 1, "survey": 1 }).improved_survey().img("ps.png"),
				gen_research_card("improved_survey").fertile(1).icons({ "colonize": 1, "survey": 1 }).improved_survey().img("cs.png"),
				gen_research_card("improved_production").advanced(1).icons({ "research": 1, "produce": 1 }).improved_production().img("rp.png"),
				gen_research_card("improved_production").advanced(1).icons({ "trade": 1, "produce": 1 }).improved_production().img("tp.png"),
				gen_research_card("improved_warfare").advanced(1).icons({ "warfare": 1, "trade": 1 }).improved_warfare().img("tw.png"),
				gen_research_card("improved_warfare").advanced(1).icons({ "research": 1, "warfare": 1 }).improved_warfare().img("rw.png"),
				gen_research_card("improved_colonize").advanced(1).icons({ "colonize": 1, "trade": 1 }).improved_colonize().img("tc.png"),
				gen_research_card("improved_colonize").advanced(1).icons({ "research": 1, "colonize": 1 }).improved_colonize().img("rc.png"),
				gen_research_card("improved_survey").advanced(1).icons({ "trade": 1, "survey": 1 }).improved_survey().img("ts.png"),
				gen_research_card("improved_survey").advanced(1).icons({ "research": 1, "survey": 1 }).improved_survey().img("rs.png"),
				gen_research_card("survey_team").surveyteam().img(".png"),
				gen_research_card("war_path").warpath().img(".png"),
				gen_research_card("terraforming").terraforming().img(".png"),
				gen_research_card("genetic_engineering").geneticengineering().img(".png"),
				gen_research_card("artificial_intelligence").artificialintelligence().img(".png"),
				gen_research_card("diverse_markets").diversemarkets().img(".png"),
				gen_research_card("specialization").specialization().img(".png"),
				gen_research_card("mobilization").mobilization().img(".png"),
				gen_research_card("data_network").datanetwork().img(".png"),
				gen_research_card("abundance").abundance().img(".png"),
				gen_research_card("adaptability").adaptability().img(".png"),
				gen_research_card("bureaucracy").bureaucracy().img(".png"),
				gen_research_card("dissension").dissension().img(".png"),
				gen_research_card("hyperefficiency").hyperefficiency().img(".png"),
				gen_research_card("imperialism").imperialism().img(".png"),
				gen_research_card("logistics").logistics().img(".png"),
				gen_research_card("productivity").productivity().img(".png"),
				gen_research_card("scorched_earth_policy").scorchedearthpolicy().img(".png"),
				gen_research_card("streamlining").streamlining().img(".png"),
				gen_research_card("weapons_emporium").weaponsemporium().img(".png"),
				gen_research_card("fertile_grounds").fertilegrounds().img(".png")
			],
			game
		);
	};

	let genplayer = _id => {
		let _player = {
			"id": _id,
			"actionrolesequence": "ar", //can be ar. ra, aar, ara, raa
			"specialization": "",
			"available": true,
			"rounds": 0,
			"limbo": [],
			"deck": knuthshuffle(gennewdeck()),
			"hand": [],
			"permanents": [],
			"discard": [],
			"handsize": 5,
			"activeaction": null,
			"activerole": "",
			"handsize": 5,
			"bstIcons": {
				"survey": 0,
				"warfare": 0,
				"colonize": 0,
				"produce": 0,
				"trade": 0,
				"research": 0
			},
			"unsettled_planets": [game.stacks.startingplanets.pop()],
			"settled_planets": [],
			"conquered_planets": [],
			"starfighters": { "small": 0, "medium": 0, "large": 0 },
			"combatvalue": 0,
			"influence": []
		};

		draw(_player, _player.handsize);
		$$invalidate(0, game.players = [...game.players, _player], game);
	};

	let genplanet = name_in => {
		return {
			id: gen_unique_id(),
			name: name_in,
			type: "planet",
			settle_cost: 2,
			settled: false,
			conquer_cost: 2,
			production_zones: [],
			influence_value: 2,
			icons: {
				"survey": 0,
				"warfare": 0,
				"colonize": 0,
				"produce": 0,
				"trade": 0,
				"research": 0
			},
			handsize_modifier: 0,
			hosted_colonies: [],
			metallic() {
				this.type = "metallic";
				return this;
			},
			advanced() {
				this.type = "advanced";
				return this;
			},
			fertile() {
				this.type = "fertile";
				return this;
			},
			icon(icon_name) {
				this.icons[icon_name]++;
				return this;
			},
			handsize(modifier) {
				this.handsize_modifier = modifier;
				return this;
			},
			influence(influence) {
				this.influence_value = influence;
				return this;
			},
			settle(cost) {
				this.settle_cost = cost;
				return this;
			},
			conquer(cost) {
				this.conquer_cost = cost;
				return this;
			},
			zone(zone) {
				this.production_zones.push({ type: zone, filled: false });
				return this;
			}
		};
	};

	let genplanetdeck = () => {
		$$invalidate(
			0,
			game.planet_deck = knuthshuffle([
				//fertile planets
				genplanet("MISHBURR ITO-A").fertile().settle(5).conquer(4).zone("food").influence(3).icon("produce"),
				genplanet("STYKU").fertile().settle(4).conquer(5).zone("water").influence(3).icon("colonize"),
				genplanet("ANGUS DUFFY").fertile().settle(3).conquer(6).zone("food").zone("water").influence(3),
				genplanet("GERDLAND").fertile().settle(4).conquer(5).zone("water").influence(3).icon("produce"),
				genplanet("MIK-MIK").fertile().settle(5).conquer(4).zone("food").influence(3).icon("colonize"),
				genplanet("NELOS IV").fertile().settle(5).conquer(4).zone("food").influence(2).handsize(1),
				genplanet("SPIELBANY VI").fertile().settle(4).conquer(5).zone("water").influence(2).handsize(1),
				genplanet("NEW TEXAS").fertile().settle(3).conquer(6).zone("food").zone("water").influence(2).icon("colonize"),
				genplanet("ARTIGAS GNS-111").fertile().settle(3).conquer(6).zone("food").zone("water").influence(2).icon("produce"),
				//advanced planets
				genplanet("HANOJ - T").advanced().settle(5).conquer(4).influence(3).zone("silicon").icon("trade"),
				genplanet("OKNOW").advanced().settle(4).conquer(5).influence(2).zone("silicon").handsize(1),
				genplanet("SROD AVEIN N2").advanced().settle(3).conquer(6).influence(4).icon("research"),
				genplanet("RAL GAI'GAW").advanced().settle(4).conquer(5).influence(3).zone("silicon").icon("trade"),
				genplanet("ECHO ROSE").advanced().settle(5).conquer(4).influence(3).zone("silicon").icon("research"),
				genplanet("SHOLMICAN").advanced().settle(3).conquer(6).influence(4).zone("silicon"),
				genplanet("ZEPHAN").advanced().settle(3).conquer(6).influence(4).icon("trade"),
				genplanet("SIMA-07C").advanced().settle(5).conquer(4).influence(2).zone("silicon").handsize(1),
				genplanet("LYTTLE").advanced().settle(4).conquer(5).influence(3).zone("silicon").icon("research"),
				//mettalic planets
				genplanet("KYRIE & JUNO").metallic().settle(3).conquer(6).influence(4).icon("survey"),
				genplanet("MARGHANNAH PRIME").metallic().settle(4).conquer(5).influence(3).handsize(1),
				genplanet("TANKAHSHIN").metallic().settle(4).conquer(5).influence(3).zone("metallic").icon("warfare"),
				genplanet("VOSON").metallic().settle(4).conquer(5).influence(3).zone("metallic").icon("survey"),
				genplanet("PINK SONAR").metallic().settle(5).conquer(4).influence(3).zone("metallic").icon("survey"),
				genplanet("OVERLORD BETZEL'S DOMAIN").metallic().settle(3).conquer(6).influence(4).icon("warfare"),
				genplanet("8910 SPIELEN").metallic().settle(4).conquer(5).influence(2).zone("metallic").handsize(1),
				genplanet("IDROYOS").metallic().settle(3).conquer(6).influence(5),
				genplanet("ERKAM-W").metallic().settle(5).conquer(4).influence(3).zone("metallic").icon("warfare")
			]),
			game
		);

		$$invalidate(
			0,
			game.stacks.startingplanets = knuthshuffle([
				genplanet("MESIA SEDNIM").fertile().settle(2).conquer(2).influence(2).zone("water"),
				genplanet("DRAWDE").fertile().settle(2).conquer(2).influence(2).zone("food"),
				genplanet("LIAGIBA").advanced().settle(2).conquer(2).influence(2).zone("silicon"),
				genplanet("POMERENE").advanced().settle(2).conquer(2).influence(2).zone("silicon"),
				genplanet("CHRISPEN").metallic().settle(2).conquer(2).influence(2).zone("metallic"),
				genplanet("PIEDRA SECA").metallic().settle(2).conquer(2).influence(2).zone("metallic")
			]),
			game
		);
	};

	let cleanup = () => {
		getActPlyr().limbo.forEach(card => {
			getActPlyr()[card.finDest] = [...getActPlyr()[card.finDest], card];
		});
	};

	let purchase = (src, dest, finDest, id) => {
		// duplicate of discard & duplicate of play
		let toRemove = src.find(e => id == e.id);
		src = src.filter(e => e.id != toRemove.id);
	};

	let remove_from_game = (source_array, toRemove) => {
		//remove_from_game hand->exile\
		toRemove.finDest = "exile";

		return source_array.filter(e => e.id != toRemove.id);
	};

	let present_as_choice = options => $$invalidate(0, game.options = options, game);

	let settle_colonies = (planet, plyr) => {
		let planets = [...plyr.settled_planets, ...plyr.conquered_planets];
		let reduction = [...planets, ...getLeadPlyr().permanents].reduce((acc, cur) => acc + cur.icons.colonize, 0);

		if (planet.settle_cost - reduction <= planet.hosted_colonies.length) {
			if (chkForPerm("abundance") && planet.production_zones.length != 0) {
				planet.production_zones = planet.production_zones.map(pz => {
					return { type: pz.type, filled: true };
				});
			}

			plyr.discard = [...plyr.discard, ...planet.hosted_colonies];
			planet.hosted_colonies = [];
			planet.settled = true;
			discard(plyr.unsettled_planets, plyr.settled_planets, planet.id);
		}
	};

	//pass_turn leadingplayer->nextplayer
	let pass_turn = () => {
		if (!lobby.online || lobby.screenname == getActPlyr().name) {
			$$invalidate(0, game.passt = false, game);
			$$invalidate(0, game.acting_player_index = $$invalidate(0, game.leading_player_index = (game.leading_player_index + 1) % game.number_of_players, game), game);
			$$invalidate(0, game.leadingplayer = game.players[game.leading_player_index], game);
			$$invalidate(0, game.acting_player = game.players[game.leading_player_index], game);
			finish();
		}
	};

	//pass_priority actingplayer->nextplayer
	let pass_priority = () => {
		if (offlineOrIsClientTurn()) {
			$$invalidate(0, game.passp = false, game);
			$$invalidate(0, game.acting_player_index = (game.acting_player_index + 1) % game.number_of_players, game);
			$$invalidate(0, game.acting_player = getActPlyr(), game);
			finish();
		}
	};

	//determine_number_of_players logic->options->choice->number_of_players
	let determine_number_of_players = callback => {
		document.addEventListener("choicemade", singleCllBck(callback, "choicemade", () => $$invalidate(0, game.number_of_players = game.choices, game)));
		present_as_choice(range(game.minPlyrs, game.maxPlyrs));
	};

	//produce poduction_pile->host
	let produce = (planets, resources = 1) => produceTradeHelper(true, planets, resources);

	//trade host->production_pile, influence_pile->player_influence
	//let trade = (planets, player, resources=1) => produceTradeHelper(false,planets,resources,()=>player.influence.push(game.influence.pop()));
	let trade = (plnt, plyr, res) => {
		let prd = { blue: 0, green: 0, purple: 0, red: 0 };
		if (res < 1) return prd;

		for (let i = 0; i < plnt.length; i++) {
			for (let j = 0; j < plnt[i].production_zones.length; j++) {
				if (res > 0 && plnt[i].production_zones[j].filled) {
					if (game.influence.length != 1) $$invalidate(0, game.influence = game.influence.slice(1), game);
					plnt[i].production_zones[j].filled = false;
					prd[plnt[i].production_zones[j].type]++;
					plyr.influence = [...plyr.influence, 1];
					res--;
				}
			}
		}

		return prd;
	};

	//politics hand->limbo->exile, stacks->hand
	let politics = (politics_card, card, player) => {
		politics_card.finDest = "exile";

		if (game.stacks.pilecount[card.type] >= 1) {
			player.hand = [
				...player.hand,
				{
					...game.stacks.rolecards[game.stacks[card.type]],
					"id": gen_unique_id()
				}
			];

			$$invalidate(0, game.stacks.pilecount[card.type]--, game);
		}
	};

	//research hand->exile
	let research = (cards, player, limit = 2) => {
		for (let i = 0; i < cards.length && i < limit; i++) {
			getActPlyr().limbo = remove_from_game(getActPlyr().limbo, cards[i]);
		}
	};

	//boost logic->player_icons
	let boost = (cards, plyr) => cards.forEach(card => boostWithIcons(plyr, card));

	//survey deck->hand
	let survey = player => player = draw(player, 2);

	//colonize hand/limbo->host
	let colonize = (planet, source_array, card, isRole = false) => {
		let l = isRole ? getActPlyr().bstIcons.colonize : 1;

		for (let i = 0; i < l; i++) {
			let toRemove = source_array.find(e => card.type == e.type && e.finDest != "exile");
			planet.hosted_colonies = [...planet.hosted_colonies, toRemove];
			source_array = source_array.filter((e, i) => e.id != toRemove.id);
		}
	};

	//warfare starship_pile->player_starship_pile
	let warfare = player => player.starfighters.small++;

	//conquer player_starship_pile->starship_pile, player_unconquered_planets->player_conquered_planets
	let conquer = (planet, player) => {
		if (chkForPerm("scorched_earth_policy")) {
			planet.production_zones = [];
			planet.conquer_cost -= 2;

			if (planet.conquer_cost < 0) {
				planet.conquer_cost = 0;
			}
		}

		if (player.starfighters.small >= planet.conquer_cost) {
			if (chkForPerm("abundance")) {
				if (planet.production_zones.length != 0) {
					planet.production_zones = planet.production_zones.map(pz => {
						return { type: pz.type, filled: true };
					});
				}
			}

			player.starfighters.small -= planet.conquer_cost;
			planet = select_via_id(player.unsettled_planets, planet.id);
			planet.conquered = true;
			player.conquered_planets.push(planet);
		}
	};

	//offer_to_boost present_as_choice, choose, boost
	let offer_to_boost = player => {
		$$invalidate(0, game.displayinfo.selectionzone = "hand", game);
		$$invalidate(0, game.displayinfo.allowformultipleselections = true, game);
		$$invalidate(0, game.displayinfo.showoptiontoskip = true, game);
		present_as_choice(player.hand);

		document.addEventListener("choicemade", singleCllBck(
			() => {
				
			},
			"choicemade",
			() => boost(game.choices, player)
		));
	};

	let select_via_id = (source, id) => {
		let temp = source.find(p => p.id == id);
		source = source.filter(p => p.id != id);
		return temp;
	};

	let boostrolewithcards = (choices, callback = () => {
			
		}) => {
		if (choices[0].name == "Skip") return;

		choices.forEach(card => {
			boostWithIcons(getActPlyr(), card);
			play(getActPlyr().hand, getActPlyr().limbo, "discard", cards[i].id);
		});

		callback();
	};

	let gen_unique_id = () => {
		$$invalidate(0, game.nonce++, game);
		return game.nonce;
	};

	let performleaderrole = (callback = () => {
			
		}) => getActPlyr().activerole.role.role.leader(callback);

	let performfollowerrole = (callback = null) => {
		getActPlyr().activerole.set(game.players[game.leading_player_index].activerole.role);
		getActPlyr().activerole.role.role.follower(callback);
	};

	let explore_planet = player => {
		let planet = game.planet_deck.pop();
		player.limbo = [...player.limbo, { ...planet, "finDest": "planetdeck" }];
		$$invalidate(0, game.options = [...game.options, planet], game);
	};

	let catalog_planet = player => {
		$$invalidate(0, game.choices[0].finDest = "unsetttled", game);
		player.unsettled_planets = [...player.unsettled_planets, game.choices[0]];
		player.limbo = player.limbo.filter(p => p.id != game.choices[0].id);
		player.limbo.filter(card => card.finDest == "planetdeck").forEach(planet => discard(player.limbo, game.planet_deck, planet.id));
	};

	let followcentercardrole = (choices, callback = null) => {
		let card = choices[0];
		getActPlyr().activerole.set(card);

		if (game.stacks.pilecount[card.type] >= 1) {
			getActPlyr().bstIcons[card.type]++;

			getActPlyr().limbo.push(Object.assign(
				{
					"id": gen_unique_id(),
					"finDest": "discard"
				},
				game.stacks.rolecards[game.stacks[card.type]]
			));

			$$invalidate(0, game.stacks.pilecount[card.type]--, game);
		}

		let [,,...arr] = arguments;
		callback(card, arr);
	};

	let discardcardsfromhand = (choices, callback = null) => {
		if (choices[0].name != "Skip") {
			choices.forEach(card => discard(getActPlyr().hand, getActPlyr().discard, card.id));
		}

		let [,,...arr] = arguments;
		callback(choices, arr);
	};

	let phasefinishfunction = (send = false) => {
		$$invalidate(0, game.currentphase = (game.currentphase + 1) % game.gamesequence.length, game);
		let jsobj = game.gamesequence[game.currentphase];
		let nextphase, msg;

		for (let key in jsobj) {
			msg = key;
			nextphase = jsobj[key];
		}

		if (game.nextphase !== endgame) {
			$$invalidate(0, game.nextphase = nextphase, game);
			game.messagetoplayer.push(msg);
		}

		if (send) sendstate();
		game.nextphase();
	};

	let gengamesequence = () => {
		let _gamesequence = [];
		_gamesequence = gshelper([...game.gamephases[0].start], _gamesequence);

		//ar. ra, aar, ara, raa
		_gamesequence = gshelper([...game.gamephases[1].action], _gamesequence, () => {
			return getActPlyr().actionrolesequence == "aar";
		});

		_gamesequence = gshelper([...game.gamephases[1].action], _gamesequence, () => {
			return getActPlyr().actionrolesequence == "aar" || getActPlyr().actionrolesequence == "ar";
		});

		_gamesequence = gshelper([...game.gamephases[2].role], _gamesequence);
		_gamesequence = gshelper([...game.gamephases[3].lead], _gamesequence);

		for (let i = 1; i < game.number_of_players; i++) {
			_gamesequence = gshelper([...game.gamephases[4].follow], _gamesequence);
		}

		_gamesequence = gshelper([...game.gamephases[1].action], _gamesequence, () => {
			return getActPlyr().actionrolesequence == "raa" || getActPlyr().actionrolesequence == "ara";
		});

		_gamesequence = gshelper([...game.gamephases[1].action], _gamesequence, () => {
			return getActPlyr().actionrolesequence == "raa";
		});

		_gamesequence = gshelper([...game.gamephases[5].discard], _gamesequence);
		_gamesequence = gshelper([...game.gamephases[6].cleanup], _gamesequence);
		$$invalidate(0, game.gamesequence = _gamesequence, game);
	};

	let gshelper = (source_array, destination_array, wrapperfunction = false) => {
		for (let i in source_array) {
			if (wrapperfunction) {
				let jsobj = source_array[i];
				let func, key;
				let item = {};

				for (key in jsobj) {
					func = jsobj[key];
				}

				item[key] = () => {
					if (wrapperfunction()) {
						func();
					} else {
						finish();
					}
				};

				destination_array.push(item);
			} else {
				destination_array.push(source_array[i]);
			}
		}

		return destination_array;
	};

	let gennewdeck = () => {
		let deck = [
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.survey]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.survey]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.warfare]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.producetrade]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.producetrade]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.colonize]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.colonize]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.research]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.research]),
			{
				"id": gen_unique_id(),
				type: "politics",
				"selected": false,
				action: callback => {
					let callbackwrapper = () => {
						document.removeEventListener("choicemade", callbackwrapper);
						politics(getActPlyr().activeaction, game.choices[0], getActPlyr());
						callback();
					};

					$$invalidate(0, game.displayinfo.center_or_planets = true, game);
					$$invalidate(0, game.displayinfo.selectionzone = "rolecards", game);
					$$invalidate(0, game.displayinfo.allowformultipleselections = false, game);
					$$invalidate(0, game.displayinfo.showoptiontoskip = false, game);
					game.messagetoplayer.push("choose a card from the center row to add to your hand");
					document.addEventListener("choicemade", callbackwrapper);
					present_as_choice(game.stacks.rolecards);
				},
				role: null,
				icons: {
					"survey": 0,
					"warfare": 0,
					"colonize": 0,
					"produce": 0,
					"trade": 0,
					"research": 0,
					"politics": 1
				},
				name: "Politics",
				image: null
			}
		];

		return deck;
	};

	let phaseincrement = () => $$invalidate(0, game.currentphase++, game);

	let newgame = number_of_players => {
		$$invalidate(1, lobby.online = true, lobby);
		initgame(number_of_players);

		initSocket(() => ws.emit("message", jstr({
			"header": "newgame",
			game,
			sets: lobby.sets,
			number_of_players: game.players.length
		})));
	};

	let initSocket = func => {
		let ping = () => {
			setTimeout(
				() => {
					ws.emit("message", jstr({ header: "ping" }));
					ping();
				},
				2000
			);
		};

		ws = io();

		ws.on("connect", () => {
			log("connected");

			ws.on("id", msg => {
				log("id");
				log(jprs(msg));

				$$invalidate(0, game = {
					...game,
					game_id: jprs(msg),
					hader: "",
					currentphase: game.currentphase + 1
				});

				$$invalidate(1, lobby = {
					...lobby,
					existinggames: [...lobby.existinggames, game],
					online: true
				});

				registerws();
			});

			ws.on("fetch", msg => {
				log("fetch");
				log(jprs(msg));
				$$invalidate(0, game.currentphase = -1, game);

				$$invalidate(1, lobby = {
					...lobby,
					existinggames: jprs(msg).map(el => el.game).filter(g => g.players.filter(ll => ll.available).length > 0),
					online: true
				});
			});

			ws.on("enter", msg => {
				log("enter");
				log(jprs(msg));

				$$invalidate(0, game = {
					...jprs(msg),
					phasse: game.phases,
					gamesequence: game.gamesequence
				});

				$$invalidate(1, lobby = {
					...lobby,
					online: true,
					player_id: Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 10)
				});
			});

			ws.on("join", msg => {
				log("join");
				msg = jprs(msg);
				log(msg);
				$$invalidate(0, game.players[msg.slot] = msg.player, game);
				log("available slots: ", game.players.reduce((acc, cur) => acc + cur.available ? 1 : 0, 0));
				if (game.players.reduce((acc, cur) => acc + cur.available ? 1 : 0, 0) == 0) finish();
			});

			ws.on("set", msg => {
				//log('set'); 
				log(jprs(msg));

				$$invalidate(0, game = {
					...jprs(msg),
					phasse: game.phases,
					gamesequence: game.gamesequence
				});
			});

			func();
			ping();
		});
	};

	let fetchexistinggames = () => initSocket(() => ws.emit("message", jstr({ "header": "fetchexisting" })));

	let enterexistinggame = g => {
		let slot = g.players.findIndex(p => p.available);
		if (!lobby.init) initgame(g.number_of_players);

		ws.emit("message", jstr({
			"header": "enterexisting",
			game_id: g.game_id,
			player_name: lobby.screename,
			slot
		}));
	};

	let sendstate = () => lobby.online && ws.emit("message", jstr({
		...game,
		"header": "set",
		"sender": lobby.player_id
	}));

	let registerws = () => ws.emit("message", jstr({
		...game,
		"header": "register",
		"sender": lobby.player_id
	}));

	let initgame = number_of_players => {
		$$invalidate(0, game.label = lobby.screenname, game);
		$$invalidate(1, lobby.init = true, lobby);
		genplanetdeck();

		for (let i = 0; i < number_of_players; i++) {
			genplayer(i);
		}

		gen_research_deck();
		gengamesequence();

		if (!lobby.online) {
			gen_game_id();
			gen_player_names();
		}
	};

	let gen_player_names = () => game.players.forEach((plyr, i) => plyr.name = "Player " + (i + 1));
	let toggle_center_or_planets = () => $$invalidate(0, game.displayinfo.center_or_planets = !game.displayinfo.center_or_planets, game);

	let togglepasstoplayer = () => {
		$$invalidate(0, game.passtoplayer = !game.passtoplayer, game);
		openFullscreen();
	};

	let class_gen = (zone, item) => game.displayinfo.selectionzone == zone
	? item.selected ? "selected" : "selectable"
	: "bordered";

	let gen_game_id = () => {
		$$invalidate(0, game.game_id = "", game);
		$$invalidate(0, game.game_id += Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 10), game);
	};

	let knuthshuffle = array => {
		let currentIndex = array.length;
		let temporaryValue, randomIndex;

		// While there remain elements to shuffle...
		while (0 !== currentIndex) {
			// Pick a remaining element...
			randomIndex = Math.floor(Math.random() * currentIndex);

			currentIndex -= 1;

			// And swap it with the current element.
			temporaryValue = array[currentIndex];

			array[currentIndex] = array[randomIndex];
			array[randomIndex] = temporaryValue;
		}

		return array;
	};

	let drag = (evt, item) => () => $$invalidate(0, game.displayinfo.dragged = item, game);

	let drop = (evt, zone) => () => {
		let el = document.getElementById("playedcards").getBoundingClientRect();

		if (evt.changedTouches[0].clientX > el.left && evt.changedTouches[0].clientX < el.left + el.width && evt.changedTouches[0].clientY < el.top + el.height && evt.changedTouches[0].clientY > el.top) {
			if (game.displayinfo.dragged !== null) choosewrapper(game.displayinfo.dragged, zone);
			game.displayinfo.dragged != null;
		}

		let ll = document.querySelector("#dragged");
		ll.style.visibility = "hidden";
	};

	let move = (evt, img) => () => {
		let touch = evt.targetTouches[0];

		// Place element where the finger is
		let el = document.querySelector("#dragged");

		el.style.position = "absolute";
		el.style.visibility = "visible";
		el.style.top = touch.pageY - 75 + "px";
		el.style.left = touch.pageX - 50 + "px";
		el.style.width = "100px";
		el.style.height = "137px";
		el.style.zIndex = "4";
		el.style.backgroundImage = "url('" + img + "')";
	};

	let newoffline = () => {
		$$invalidate(1, lobby.online = false, lobby);
		$$invalidate(0, game.currentphase = 0, game);
		initgame(2);
		finish();
		
	};

	let setplayername = name => {
		$$invalidate(1, lobby.screename = name, lobby);
		phaseincrement();
	};

	let openFullscreen = () => {
		let elem = document.getElementById("screen");

		if (elem.requestFullscreen) {
			elem.requestFullscreen();
		} else if (elem.mozRequestFullScreen) {
			/* Firefox */
			elem.mozRequestFullScreen();
		} else if (elem.webkitRequestFullscreen) {
			/* Chrome, Safari and Opera */
			elem.webkitRequestFullscreen();
		} else if (elem.msRequestFullscreen) {
			/* IE/Edge */
			elem.msRequestFullscreen();
		}
	};

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<App> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("App", $$slots, []);

	function input_input_handler() {
		lobby.screenname = this.value;
		$$invalidate(1, lobby);
	}

	const keypress_handler = e => {
		if (e.key == "Enter") setplayername(lobby.screenname);
	};

	const click_handler = () => setplayername(lobby.screenname);
	const tap_handler = () => setplayername(lobby.screenname);
	const click_handler_1 = () => phaseincrement();
	const tap_handler_1 = () => phaseincrement();
	const click_handler_2 = () => fetchexistinggames();
	const tap_handler_2 = () => fetchexistinggames();
	const click_handler_3 = () => newoffline();
	const tap_handler_3 = () => newoffline();
	const click_handler_4 = e => newgame(2);
	const tap_handler_4 = e => newgame(2);
	const click_handler_5 = e => newgame(3);
	const tap_handler_5 = e => newgame(3);
	const click_handler_6 = e => newgame(4);
	const tap_handler_6 = e => newgame(4);
	const click_handler_7 = g => enterexistinggame(g);
	const tap_handler_7 = g => enterexistinggame(g);
	const click_handler_8 = () => togglepasstoplayer();
	const tap_handler_8 = () => togglepasstoplayer();
	const click_handler_9 = () => toggle_center_or_planets();
	const tap_handler_9 = () => toggle_center_or_planets();
	const click_handler_10 = card => choosewrapper(card, "research");
	const tap_handler_10 = card => choosewrapper(card, "research");
	const click_handler_11 = card => choosewrapper(card, "rolecards");
	const tap_handler_11 = card => choosewrapper(card, "rolecards");
	const touchmove_handler = (card, event) => move(event, "/images/" + card.type + ".png", "rolecards");
	const touchstart_handler = (card, event) => drag(event, card, "rolecards");
	const touchend_handler = event => drop(event, "rolecards");
	const click_handler_12 = planet => choosewrapper(planet, "unsettled_planets");
	const tap_handler_12 = planet => choosewrapper(planet, "unsettled_planets");
	const click_handler_13 = planet => choosewrapper(planet, "settled_&_conquered_planets");
	const tap_handler_13 = planet => choosewrapper(planet, "settled_&_conquered_planets");
	const click_handler_14 = () => choose([{ name: "Skip" }]);
	const tap_handler_14 = () => choose([{ name: "Skip" }]);
	const click_handler_15 = card => unchoose(card);
	const tap_handler_15 = card => unchoose(card);
	const click_handler_16 = () => pass_priority();
	const tap_handler_16 = () => pass_priority();
	const click_handler_17 = () => pass_turn();
	const tap_handler_17 = () => pass_turn();
	const click_handler_18 = () => choose(game[game.displayinfo.choicelabel]);
	const tap_handler_18 = () => choose(game[game.displayinfo.choicelabel]);
	const touchstart_handler_1 = (card, event) => drag(event, card, "hand");
	const touchend_handler_1 = event => drop(event, "hand");
	const touchmove_handler_1 = (card, event) => move(event, card.imgurl, "hand");

	const click_handler_19 = card => {
		log(card);
		choosewrapper(card, "hand");
	};

	const tap_handler_19 = card => choosewrapper(card, "hand");
	const click_handler_20 = option => choosewrapper(option, "options");
	const tap_handler_20 = option => choosewrapper(option, "options");
	const click_handler_21 = option => choosewrapper(option, "options");
	const tap_handler_21 = option => choosewrapper(option, "options");
	const click_handler_22 = option => choosewrapper(option, "options");
	const tap_handler_22 = option => choosewrapper(option, "options");

	$$self.$capture_state = () => ({
		Card,
		Tech,
		PlanetCard,
		game,
		lobby,
		phases,
		corephases,
		actioncardphases,
		mounted,
		ws,
		jstr,
		jprs,
		log,
		onMount,
		afterUpdate,
		beforeUpdate,
		clearOptions,
		offerUnsettled,
		getActionCardPhases,
		getActvActn,
		getActvRole,
		getChoice,
		getChoices,
		getSubChoice,
		getSubChoices,
		finish,
		getActPlyr,
		getLeadPlyr,
		simpleOffer,
		wrappedOffer,
		getActionCorePhases,
		getLeadCorePhases,
		getFollowCorePhases,
		genActionPhase,
		genLeadPhase,
		genFollowPhase,
		genEmptyCard,
		tallyIcons,
		handToLimboWithLimboDuplicatePurge,
		handToLimbo,
		limboToHand,
		playToField,
		rmFromField,
		boostWithIcons,
		resetIconBoost,
		resetSelection,
		offlineOrIsClientTurn,
		setChoice,
		cleanOptions,
		displayPlanets,
		displayCenter,
		clearChoices,
		setDisplayInfo,
		getAllCards,
		isPlanet,
		chkForPerm,
		range,
		singleCllBck,
		produceTradeHelper,
		choosewrapper,
		multiplechoose,
		choose,
		unchoose,
		offer,
		discard,
		totalinfluence,
		endgame,
		checkforendgame,
		draw,
		play,
		gen_research_card,
		gen_research_deck,
		genplayer,
		genplanet,
		genplanetdeck,
		cleanup,
		purchase,
		remove_from_game,
		present_as_choice,
		settle_colonies,
		pass_turn,
		pass_priority,
		determine_number_of_players,
		produce,
		trade,
		politics,
		research,
		boost,
		survey,
		colonize,
		warfare,
		conquer,
		offer_to_boost,
		select_via_id,
		boostrolewithcards,
		gen_unique_id,
		performleaderrole,
		performfollowerrole,
		explore_planet,
		catalog_planet,
		followcentercardrole,
		discardcardsfromhand,
		phasefinishfunction,
		gengamesequence,
		gshelper,
		gennewdeck,
		phaseincrement,
		newgame,
		initSocket,
		fetchexistinggames,
		enterexistinggame,
		sendstate,
		registerws,
		initgame,
		gen_player_names,
		toggle_center_or_planets,
		togglepasstoplayer,
		class_gen,
		gen_game_id,
		knuthshuffle,
		drag,
		drop,
		move,
		newoffline,
		setplayername,
		openFullscreen
	});

	$$self.$inject_state = $$props => {
		if ("game" in $$props) $$invalidate(0, game = $$props.game);
		if ("lobby" in $$props) $$invalidate(1, lobby = $$props.lobby);
		if ("phases" in $$props) phases = $$props.phases;
		if ("corephases" in $$props) corephases = $$props.corephases;
		if ("actioncardphases" in $$props) actioncardphases = $$props.actioncardphases;
		if ("mounted" in $$props) $$invalidate(2, mounted = $$props.mounted);
		if ("ws" in $$props) ws = $$props.ws;
		if ("jstr" in $$props) jstr = $$props.jstr;
		if ("jprs" in $$props) jprs = $$props.jprs;
		if ("log" in $$props) $$invalidate(3, log = $$props.log);
		if ("clearOptions" in $$props) clearOptions = $$props.clearOptions;
		if ("offerUnsettled" in $$props) offerUnsettled = $$props.offerUnsettled;
		if ("getActionCardPhases" in $$props) getActionCardPhases = $$props.getActionCardPhases;
		if ("getActvActn" in $$props) getActvActn = $$props.getActvActn;
		if ("getActvRole" in $$props) getActvRole = $$props.getActvRole;
		if ("getChoice" in $$props) getChoice = $$props.getChoice;
		if ("getChoices" in $$props) getChoices = $$props.getChoices;
		if ("getSubChoice" in $$props) getSubChoice = $$props.getSubChoice;
		if ("getSubChoices" in $$props) getSubChoices = $$props.getSubChoices;
		if ("finish" in $$props) finish = $$props.finish;
		if ("getActPlyr" in $$props) getActPlyr = $$props.getActPlyr;
		if ("getLeadPlyr" in $$props) getLeadPlyr = $$props.getLeadPlyr;
		if ("simpleOffer" in $$props) simpleOffer = $$props.simpleOffer;
		if ("wrappedOffer" in $$props) wrappedOffer = $$props.wrappedOffer;
		if ("getActionCorePhases" in $$props) getActionCorePhases = $$props.getActionCorePhases;
		if ("getLeadCorePhases" in $$props) getLeadCorePhases = $$props.getLeadCorePhases;
		if ("getFollowCorePhases" in $$props) getFollowCorePhases = $$props.getFollowCorePhases;
		if ("genActionPhase" in $$props) genActionPhase = $$props.genActionPhase;
		if ("genLeadPhase" in $$props) genLeadPhase = $$props.genLeadPhase;
		if ("genFollowPhase" in $$props) genFollowPhase = $$props.genFollowPhase;
		if ("genEmptyCard" in $$props) genEmptyCard = $$props.genEmptyCard;
		if ("tallyIcons" in $$props) tallyIcons = $$props.tallyIcons;
		if ("handToLimboWithLimboDuplicatePurge" in $$props) handToLimboWithLimboDuplicatePurge = $$props.handToLimboWithLimboDuplicatePurge;
		if ("handToLimbo" in $$props) handToLimbo = $$props.handToLimbo;
		if ("limboToHand" in $$props) limboToHand = $$props.limboToHand;
		if ("playToField" in $$props) playToField = $$props.playToField;
		if ("rmFromField" in $$props) rmFromField = $$props.rmFromField;
		if ("boostWithIcons" in $$props) boostWithIcons = $$props.boostWithIcons;
		if ("resetIconBoost" in $$props) resetIconBoost = $$props.resetIconBoost;
		if ("resetSelection" in $$props) resetSelection = $$props.resetSelection;
		if ("offlineOrIsClientTurn" in $$props) offlineOrIsClientTurn = $$props.offlineOrIsClientTurn;
		if ("setChoice" in $$props) setChoice = $$props.setChoice;
		if ("cleanOptions" in $$props) cleanOptions = $$props.cleanOptions;
		if ("displayPlanets" in $$props) displayPlanets = $$props.displayPlanets;
		if ("displayCenter" in $$props) displayCenter = $$props.displayCenter;
		if ("clearChoices" in $$props) clearChoices = $$props.clearChoices;
		if ("setDisplayInfo" in $$props) setDisplayInfo = $$props.setDisplayInfo;
		if ("getAllCards" in $$props) getAllCards = $$props.getAllCards;
		if ("isPlanet" in $$props) isPlanet = $$props.isPlanet;
		if ("chkForPerm" in $$props) chkForPerm = $$props.chkForPerm;
		if ("range" in $$props) range = $$props.range;
		if ("singleCllBck" in $$props) singleCllBck = $$props.singleCllBck;
		if ("produceTradeHelper" in $$props) produceTradeHelper = $$props.produceTradeHelper;
		if ("choosewrapper" in $$props) $$invalidate(4, choosewrapper = $$props.choosewrapper);
		if ("multiplechoose" in $$props) multiplechoose = $$props.multiplechoose;
		if ("choose" in $$props) $$invalidate(5, choose = $$props.choose);
		if ("unchoose" in $$props) $$invalidate(6, unchoose = $$props.unchoose);
		if ("offer" in $$props) offer = $$props.offer;
		if ("discard" in $$props) discard = $$props.discard;
		if ("totalinfluence" in $$props) totalinfluence = $$props.totalinfluence;
		if ("endgame" in $$props) endgame = $$props.endgame;
		if ("checkforendgame" in $$props) checkforendgame = $$props.checkforendgame;
		if ("draw" in $$props) draw = $$props.draw;
		if ("play" in $$props) play = $$props.play;
		if ("gen_research_card" in $$props) gen_research_card = $$props.gen_research_card;
		if ("gen_research_deck" in $$props) gen_research_deck = $$props.gen_research_deck;
		if ("genplayer" in $$props) genplayer = $$props.genplayer;
		if ("genplanet" in $$props) genplanet = $$props.genplanet;
		if ("genplanetdeck" in $$props) genplanetdeck = $$props.genplanetdeck;
		if ("cleanup" in $$props) cleanup = $$props.cleanup;
		if ("purchase" in $$props) purchase = $$props.purchase;
		if ("remove_from_game" in $$props) remove_from_game = $$props.remove_from_game;
		if ("present_as_choice" in $$props) present_as_choice = $$props.present_as_choice;
		if ("settle_colonies" in $$props) settle_colonies = $$props.settle_colonies;
		if ("pass_turn" in $$props) $$invalidate(7, pass_turn = $$props.pass_turn);
		if ("pass_priority" in $$props) $$invalidate(8, pass_priority = $$props.pass_priority);
		if ("determine_number_of_players" in $$props) determine_number_of_players = $$props.determine_number_of_players;
		if ("produce" in $$props) produce = $$props.produce;
		if ("trade" in $$props) trade = $$props.trade;
		if ("politics" in $$props) politics = $$props.politics;
		if ("research" in $$props) research = $$props.research;
		if ("boost" in $$props) boost = $$props.boost;
		if ("survey" in $$props) survey = $$props.survey;
		if ("colonize" in $$props) colonize = $$props.colonize;
		if ("warfare" in $$props) warfare = $$props.warfare;
		if ("conquer" in $$props) conquer = $$props.conquer;
		if ("offer_to_boost" in $$props) offer_to_boost = $$props.offer_to_boost;
		if ("select_via_id" in $$props) select_via_id = $$props.select_via_id;
		if ("boostrolewithcards" in $$props) boostrolewithcards = $$props.boostrolewithcards;
		if ("gen_unique_id" in $$props) gen_unique_id = $$props.gen_unique_id;
		if ("performleaderrole" in $$props) performleaderrole = $$props.performleaderrole;
		if ("performfollowerrole" in $$props) performfollowerrole = $$props.performfollowerrole;
		if ("explore_planet" in $$props) explore_planet = $$props.explore_planet;
		if ("catalog_planet" in $$props) catalog_planet = $$props.catalog_planet;
		if ("followcentercardrole" in $$props) followcentercardrole = $$props.followcentercardrole;
		if ("discardcardsfromhand" in $$props) discardcardsfromhand = $$props.discardcardsfromhand;
		if ("phasefinishfunction" in $$props) phasefinishfunction = $$props.phasefinishfunction;
		if ("gengamesequence" in $$props) gengamesequence = $$props.gengamesequence;
		if ("gshelper" in $$props) gshelper = $$props.gshelper;
		if ("gennewdeck" in $$props) gennewdeck = $$props.gennewdeck;
		if ("phaseincrement" in $$props) $$invalidate(9, phaseincrement = $$props.phaseincrement);
		if ("newgame" in $$props) $$invalidate(10, newgame = $$props.newgame);
		if ("initSocket" in $$props) initSocket = $$props.initSocket;
		if ("fetchexistinggames" in $$props) $$invalidate(11, fetchexistinggames = $$props.fetchexistinggames);
		if ("enterexistinggame" in $$props) $$invalidate(12, enterexistinggame = $$props.enterexistinggame);
		if ("sendstate" in $$props) sendstate = $$props.sendstate;
		if ("registerws" in $$props) registerws = $$props.registerws;
		if ("initgame" in $$props) initgame = $$props.initgame;
		if ("gen_player_names" in $$props) gen_player_names = $$props.gen_player_names;
		if ("toggle_center_or_planets" in $$props) $$invalidate(13, toggle_center_or_planets = $$props.toggle_center_or_planets);
		if ("togglepasstoplayer" in $$props) $$invalidate(14, togglepasstoplayer = $$props.togglepasstoplayer);
		if ("class_gen" in $$props) class_gen = $$props.class_gen;
		if ("gen_game_id" in $$props) gen_game_id = $$props.gen_game_id;
		if ("knuthshuffle" in $$props) knuthshuffle = $$props.knuthshuffle;
		if ("drag" in $$props) $$invalidate(15, drag = $$props.drag);
		if ("drop" in $$props) $$invalidate(16, drop = $$props.drop);
		if ("move" in $$props) $$invalidate(17, move = $$props.move);
		if ("newoffline" in $$props) $$invalidate(18, newoffline = $$props.newoffline);
		if ("setplayername" in $$props) $$invalidate(19, setplayername = $$props.setplayername);
		if ("openFullscreen" in $$props) openFullscreen = $$props.openFullscreen;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		game,
		lobby,
		mounted,
		log,
		choosewrapper,
		choose,
		unchoose,
		pass_turn,
		pass_priority,
		phaseincrement,
		newgame,
		fetchexistinggames,
		enterexistinggame,
		toggle_center_or_planets,
		togglepasstoplayer,
		drag,
		drop,
		move,
		newoffline,
		setplayername,
		corephases,
		actioncardphases,
		ws,
		phases,
		jstr,
		jprs,
		clearOptions,
		offerUnsettled,
		getActionCardPhases,
		getActvActn,
		getActvRole,
		getChoice,
		getChoices,
		getSubChoice,
		getSubChoices,
		finish,
		getActPlyr,
		getLeadPlyr,
		simpleOffer,
		wrappedOffer,
		getActionCorePhases,
		getLeadCorePhases,
		getFollowCorePhases,
		genActionPhase,
		genLeadPhase,
		genFollowPhase,
		genEmptyCard,
		tallyIcons,
		handToLimboWithLimboDuplicatePurge,
		handToLimbo,
		limboToHand,
		playToField,
		rmFromField,
		boostWithIcons,
		resetIconBoost,
		resetSelection,
		offlineOrIsClientTurn,
		setChoice,
		cleanOptions,
		displayPlanets,
		displayCenter,
		clearChoices,
		setDisplayInfo,
		getAllCards,
		isPlanet,
		chkForPerm,
		range,
		singleCllBck,
		produceTradeHelper,
		multiplechoose,
		offer,
		discard,
		totalinfluence,
		endgame,
		checkforendgame,
		draw,
		play,
		gen_research_card,
		gen_research_deck,
		genplayer,
		genplanet,
		genplanetdeck,
		cleanup,
		purchase,
		remove_from_game,
		present_as_choice,
		settle_colonies,
		determine_number_of_players,
		produce,
		trade,
		politics,
		research,
		boost,
		survey,
		colonize,
		warfare,
		conquer,
		offer_to_boost,
		select_via_id,
		boostrolewithcards,
		gen_unique_id,
		performleaderrole,
		performfollowerrole,
		explore_planet,
		catalog_planet,
		followcentercardrole,
		discardcardsfromhand,
		phasefinishfunction,
		gengamesequence,
		gshelper,
		gennewdeck,
		initSocket,
		sendstate,
		registerws,
		initgame,
		gen_player_names,
		class_gen,
		gen_game_id,
		knuthshuffle,
		openFullscreen,
		input_input_handler,
		keypress_handler,
		click_handler,
		tap_handler,
		click_handler_1,
		tap_handler_1,
		click_handler_2,
		tap_handler_2,
		click_handler_3,
		tap_handler_3,
		click_handler_4,
		tap_handler_4,
		click_handler_5,
		tap_handler_5,
		click_handler_6,
		tap_handler_6,
		click_handler_7,
		tap_handler_7,
		click_handler_8,
		tap_handler_8,
		click_handler_9,
		tap_handler_9,
		click_handler_10,
		tap_handler_10,
		click_handler_11,
		tap_handler_11,
		touchmove_handler,
		touchstart_handler,
		touchend_handler,
		click_handler_12,
		tap_handler_12,
		click_handler_13,
		tap_handler_13,
		click_handler_14,
		tap_handler_14,
		click_handler_15,
		tap_handler_15,
		click_handler_16,
		tap_handler_16,
		click_handler_17,
		tap_handler_17,
		click_handler_18,
		tap_handler_18,
		touchstart_handler_1,
		touchend_handler_1,
		touchmove_handler_1,
		click_handler_19,
		tap_handler_19,
		click_handler_20,
		tap_handler_20,
		click_handler_21,
		tap_handler_21,
		click_handler_22,
		tap_handler_22
	];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {}, [-1, -1, -1, -1, -1, -1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src\routes\index.svelte generated by Svelte v3.20.1 */

function create_fragment$3(ctx) {
	let current;
	const app = new App({ $$inline: true });

	const block = {
		c: function create() {
			create_component(app.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(app.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(app, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(app.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(app.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(app, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);
	$$self.$capture_state = () => ({ App });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$3.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
