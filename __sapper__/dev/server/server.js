'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var sirv = _interopDefault(require('sirv'));
var polka = _interopDefault(require('polka'));
var compression = _interopDefault(require('compression'));
var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));
var Stream = _interopDefault(require('stream'));
var http = _interopDefault(require('http'));
var Url = _interopDefault(require('url'));
var https = _interopDefault(require('https'));
var zlib = _interopDefault(require('zlib'));
var io = _interopDefault(require('socket.io'));

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function null_to_empty(value) {
    return value == null ? '' : value;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function beforeUpdate(fn) {
    get_current_component().$$.before_update.push(fn);
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function each(items, fn) {
    let str = '';
    for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
    }
    return str;
}
const missing_component = {
    $$render: () => ''
};
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

/* src\components\Icon.svelte generated by Svelte v3.20.1 */

const css = {
	code: ".pro.svelte-okjivu{background-color:rgb(255, 255, 119)}.res.svelte-okjivu{background-color:rgb(119, 183, 255)}.trd.svelte-okjivu{background-color:rgb(255, 169, 241)}.pol.svelte-okjivu{background-color:rgb(209, 186, 143)}.sur.svelte-okjivu{background-color:rgb(143, 255, 143)}.war.svelte-okjivu{background-color:rgb(255, 98, 98)}.col.svelte-okjivu{background-color:rgb(255, 184, 102)}.fer.svelte-okjivu{background-color:rgb(148, 197, 152)}.adv.svelte-okjivu{background-color:rgb(231, 184, 215)}.met.svelte-okjivu{background-color:rgb(187, 55, 55)}.fud.svelte-okjivu{background-color:rgb(255, 215, 142)}.ore.svelte-okjivu{background-color:rgb(212, 139, 56)}.wtr.svelte-okjivu{background-color:rgb(115, 141, 253)}.sil.svelte-okjivu{background-color:rgb(161, 45, 255)}.ico-sm.svelte-okjivu{padding:.2em;height:.8em;width:.8em}.ico-cont-lg.svelte-okjivu,.ico-cont-sm.svelte-okjivu{display:inline-block;overflow:hidden;position:relative;border-radius:50%}.ico-cont-sm.svelte-okjivu{height:1.2em;width:1.2em}.ico-lg.svelte-okjivu{height:2em;width:2em}.ico-cont-lg.svelte-okjivu{height:2em;width:2em}.inf.svelte-okjivu{display:block;margin-left:auto;margin-right:auto;width:100%;background:grey}.num.svelte-okjivu{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);font-size:.5vh}",
	map: "{\"version\":3,\"file\":\"Icon.svelte\",\"sources\":[\"Icon.svelte\"],\"sourcesContent\":[\"<script>\\r\\n    export let type,size,influence=0,bordered=false;\\r\\n    let label = type.charAt(0).toUpperCase() + type.slice(1),\\r\\n        key = {produce:'pro',trade:'trd',politics:'pol',research:'res',survey:'sur',warfare:'war',colonize:'col',\\r\\n        water:'wtr', food:'fud', silicon:'sil', ore:'ore', advanced:'adv', fertile:'fer', metallic:'met',influence:'inf'}[type];\\r\\n</script>\\r\\n<style>\\r\\n    .pro {\\r\\n        background-color : rgb(255, 255, 119);\\r\\n    }\\r\\n    .res {\\r\\n        background-color : rgb(119, 183, 255);\\r\\n    }\\r\\n    .trd {\\r\\n        background-color : rgb(255, 169, 241);\\r\\n    }\\r\\n    .pol {\\r\\n        background-color : rgb(209, 186, 143);\\r\\n    }\\r\\n    .sur {\\r\\n        background-color : rgb(143, 255, 143);\\r\\n    }\\r\\n    .war {\\r\\n        background-color : rgb(255, 98, 98);\\r\\n    }\\r\\n    .col {\\r\\n        background-color : rgb(255, 184, 102);\\r\\n    }\\r\\n    .fer {\\r\\n        background-color : rgb(148, 197, 152);\\r\\n    }\\r\\n    .adv {\\r\\n        background-color : rgb(231, 184, 215);\\r\\n    }\\r\\n    .met {\\r\\n        background-color : rgb(187, 55, 55);\\r\\n    }\\r\\n    .fud {\\r\\n        background-color : rgb(255, 215, 142);\\r\\n    }\\r\\n    .ore {\\r\\n        background-color : rgb(212, 139, 56);\\r\\n    }\\r\\n    .wtr {\\r\\n        background-color : rgb(115, 141, 253);\\r\\n    }\\r\\n    .sil {\\r\\n        background-color : rgb(161, 45, 255);\\r\\n    }\\r\\n    .ico-sm {\\r\\n        padding:.2em;\\r\\n        height:.8em;\\r\\n        width:.8em;\\r\\n    }\\r\\n    .ico-cont-lg, .ico-cont-sm {\\r\\n        display: inline-block;\\r\\n        overflow: hidden;\\r\\n        position:relative;\\r\\n\\t\\tborder-radius: 50%;\\r\\n    }\\r\\n    .ico-cont-sm {\\r\\n        height:1.2em;\\r\\n        width:1.2em;\\r\\n    }\\r\\n    .ico-lg {\\r\\n        height:2em;\\r\\n        width:2em;\\r\\n    }\\r\\n    .ico-cont-lg {\\r\\n        height:2em;\\r\\n        width:2em;\\r\\n    }\\r\\n    .inf {\\r\\n        display: block;\\r\\n        margin-left: auto;\\r\\n        margin-right: auto;\\r\\n        width: 100%;\\r\\n        background: grey;\\r\\n    }\\r\\n    .num {\\r\\n        position: absolute;\\r\\n        top: 50%;\\r\\n        left: 50%;\\r\\n        transform: translate(-50%, -50%);\\r\\n        font-size: .5vh;\\r\\n    }\\r\\n</style>\\r\\n{#if type=='influence'}\\r\\n<div class='ico-cont-{size}' style='{(bordered)?'border:1px solid black':''}'>\\r\\n    <img  class='ico-{size} inf' style='transform: translate(-15%, 5%);;' src='./images/{key}.svg' alt={key}>\\r\\n    <span class='num'>{influence}</span>\\r\\n</div>\\r\\n{:else}\\r\\n<div class='ico-cont-{size} {key}'>\\r\\n    <img class='ico-{size}' src='./images/{key}.svg' alt={key}>\\r\\n</div>\\r\\n{/if}\"],\"names\":[],\"mappings\":\"AAOI,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACvC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACvC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,AACxC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACD,IAAI,cAAC,CAAC,AACF,gBAAgB,CAAG,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AACxC,CAAC,AACD,OAAO,cAAC,CAAC,AACL,QAAQ,IAAI,CACZ,OAAO,IAAI,CACX,MAAM,IAAI,AACd,CAAC,AACD,0BAAY,CAAE,YAAY,cAAC,CAAC,AACxB,OAAO,CAAE,YAAY,CACrB,QAAQ,CAAE,MAAM,CAChB,SAAS,QAAQ,CACvB,aAAa,CAAE,GAAG,AAChB,CAAC,AACD,YAAY,cAAC,CAAC,AACV,OAAO,KAAK,CACZ,MAAM,KAAK,AACf,CAAC,AACD,OAAO,cAAC,CAAC,AACL,OAAO,GAAG,CACV,MAAM,GAAG,AACb,CAAC,AACD,YAAY,cAAC,CAAC,AACV,OAAO,GAAG,CACV,MAAM,GAAG,AACb,CAAC,AACD,IAAI,cAAC,CAAC,AACF,OAAO,CAAE,KAAK,CACd,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,AACpB,CAAC,AACD,IAAI,cAAC,CAAC,AACF,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,SAAS,CAAE,IAAI,AACnB,CAAC\"}"
};

const Icon = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { type } = $$props,
		{ size } = $$props,
		{ influence = 0 } = $$props,
		{ bordered = false } = $$props;

	let label = type.charAt(0).toUpperCase() + type.slice(1),
		key = ({
			produce: "pro",
			trade: "trd",
			politics: "pol",
			research: "res",
			survey: "sur",
			warfare: "war",
			colonize: "col",
			water: "wtr",
			food: "fud",
			silicon: "sil",
			ore: "ore",
			advanced: "adv",
			fertile: "fer",
			metallic: "met",
			influence: "inf"
		})[type];

	if ($$props.type === void 0 && $$bindings.type && type !== void 0) $$bindings.type(type);
	if ($$props.size === void 0 && $$bindings.size && size !== void 0) $$bindings.size(size);
	if ($$props.influence === void 0 && $$bindings.influence && influence !== void 0) $$bindings.influence(influence);
	if ($$props.bordered === void 0 && $$bindings.bordered && bordered !== void 0) $$bindings.bordered(bordered);
	$$result.css.add(css);

	return `${type == "influence"
	? `<div class="${"ico-cont-" + escape(size) + " svelte-okjivu"}"${add_attribute("style", bordered ? "border:1px solid black" : "", 0)}><img class="${"ico-" + escape(size) + " inf" + " svelte-okjivu"}" style="${"transform: translate(-15%, 5%);;"}" src="${"./images/" + escape(key) + ".svg"}"${add_attribute("alt", key, 0)}>
    <span class="${"num svelte-okjivu"}">${escape(influence)}</span></div>`
	: `<div class="${"ico-cont-" + escape(size) + " " + escape(key) + " svelte-okjivu"}"><img class="${"ico-" + escape(size) + " svelte-okjivu"}" src="${"./images/" + escape(key) + ".svg"}"${add_attribute("alt", key, 0)}></div>`}`;
});

/* src\components\IconBar.svelte generated by Svelte v3.20.1 */

const css$1 = {
	code: ".iconbar.svelte-bfkj6e{display:flex;flex-direction:column;justify-content:flex-start}",
	map: "{\"version\":3,\"file\":\"IconBar.svelte\",\"sources\":[\"IconBar.svelte\"],\"sourcesContent\":[\"<script>\\r\\n    import Icon from '../components/Icon.svelte';\\r\\n    export let survey, warfare, colonize, produce, trade, research;\\r\\n    let icons = [];\\r\\n    let f = (c,s) => { for (let i = 0; i < c; i++) icons = [...icons, {size:'sm',type:s}]; }\\r\\n    f(survey,\\\"survey\\\");\\r\\n    f(warfare,\\\"warfare\\\");\\r\\n    f(colonize,\\\"colonize\\\");\\r\\n    f(produce,\\\"produce\\\");\\r\\n    f(trade,\\\"trade\\\");\\r\\n    f(research,\\\"research\\\");\\r\\n    let size = `min-height: calc(${icons.length}*2em);max-height: calc(${icons.length}*2em);`;\\r\\n</script>\\r\\n<style>\\r\\n    .iconbar {\\r\\n        display:flex;\\r\\n        flex-direction: column;\\r\\n        justify-content: flex-start;\\r\\n    }\\r\\n</style>\\r\\n<div class=\\\"iconbar\\\" style={size}>\\r\\n    {#each icons as icon}\\r\\n        <Icon {...icon}/>\\r\\n        <div style=\\\"min-height:0.1vh;max-height:0.1vh;\\\"></div>\\r\\n    {/each}\\r\\n</div>\"],\"names\":[],\"mappings\":\"AAcI,QAAQ,cAAC,CAAC,AACN,QAAQ,IAAI,CACZ,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,UAAU,AAC/B,CAAC\"}"
};

const IconBar = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { survey } = $$props,
		{ warfare } = $$props,
		{ colonize } = $$props,
		{ produce } = $$props,
		{ trade } = $$props,
		{ research } = $$props;

	let icons = [];

	let f = (c, s) => {
		for (let i = 0; i < c; i++) icons = [...icons, { size: "sm", type: s }];
	};

	f(survey, "survey");
	f(warfare, "warfare");
	f(colonize, "colonize");
	f(produce, "produce");
	f(trade, "trade");
	f(research, "research");
	let size = `min-height: calc(${icons.length}*2em);max-height: calc(${icons.length}*2em);`;
	if ($$props.survey === void 0 && $$bindings.survey && survey !== void 0) $$bindings.survey(survey);
	if ($$props.warfare === void 0 && $$bindings.warfare && warfare !== void 0) $$bindings.warfare(warfare);
	if ($$props.colonize === void 0 && $$bindings.colonize && colonize !== void 0) $$bindings.colonize(colonize);
	if ($$props.produce === void 0 && $$bindings.produce && produce !== void 0) $$bindings.produce(produce);
	if ($$props.trade === void 0 && $$bindings.trade && trade !== void 0) $$bindings.trade(trade);
	if ($$props.research === void 0 && $$bindings.research && research !== void 0) $$bindings.research(research);
	$$result.css.add(css$1);

	return `<div class="${"iconbar svelte-bfkj6e"}"${add_attribute("style", size, 0)}>${each(icons, icon => `${validate_component(Icon, "Icon").$$render($$result, Object.assign(icon), {}, {})}
        <div style="${"min-height:0.1vh;max-height:0.1vh;"}"></div>`)}</div>`;
});

/* src\components\Tech.svelte generated by Svelte v3.20.1 */

const css$2 = {
	code: "@import url(https://unpkg.com/@smui/card@latest/bare.css);.mdc-card.svelte-4d9gi8.svelte-4d9gi8{overflow:hidden;padding:1vh;min-height:30vh;min-width:19vh;max-height:30vh;max-width:19vh;margin-left:1vh;margin-right:1vh}.mdc-card.mini.svelte-4d9gi8.svelte-4d9gi8{min-height:16vh;max-height:16vh}.title.svelte-4d9gi8.svelte-4d9gi8{display:flex;flex-direction:row;max-height:3vh;min-height:3vh;font:2vh bold}.title.svelte-4d9gi8 p.svelte-4d9gi8{margin-top:auto;margin-bottom:auto;margin-left:1vh}.logo.svelte-4d9gi8.svelte-4d9gi8{height:12vh;width:12vh;margin-left:3vh;border-radius:10vh 0vh 10vh 0vh;border:.25vh solid black;transform:rotate(45deg)}.logo.svelte-4d9gi8 img.svelte-4d9gi8{margin-left:2.25vh;margin-top:2vh;height:7.5vh;width:7.5vh;transform:rotate(-45deg);overflow:hidden}.desc.svelte-4d9gi8.svelte-4d9gi8{position:relative;font:1vh bold;line-height:1.2}.action.svelte-4d9gi8.svelte-4d9gi8{position:relative;border:0.05vh solid black;padding:0.5vh}.action.svelte-4d9gi8.svelte-4d9gi8:after{position:absolute;background:rgb(80,80,80);height:1vh;left:.5vh;top:-.5vh}.action.svelte-4d9gi8.svelte-4d9gi8:after{content:'Action'}",
	map: "{\"version\":3,\"file\":\"Tech.svelte\",\"sources\":[\"Tech.svelte\"],\"sourcesContent\":[\"<script> \\r\\nimport IconBar from '../components/IconBar.svelte';\\r\\nimport Icon from '../components/Icon.svelte';\\r\\nimport { onMount } from 'svelte';\\r\\nconst desc = {\\r\\n    \\\" \\\":{\\\"desc\\\":{\\r\\n        \\\"role\\\":\\\"\\\",\\r\\n        \\\"action\\\":\\\"\\\"}},\\r\\n    \\\"survey\\\": {\\\"desc\\\":{\\r\\n        \\\"role\\\":\\\"Look at <icon>survey<icon> -1 planet cards, keep 1 \\\\n Leader: Look at 1 additional card\\\",\\r\\n        \\\"action\\\":\\\"Draw 3 cards\\\"}},\\r\\n    \\\"warfare\\\": {\\\"desc\\\":{\\r\\n        \\\"role\\\":\\\"Collect 1 fighter per <icon>warfare<icon> \\\\n Leader: May attack 1 planet instead\\\",\\r\\n        \\\"action\\\":\\\"Attack 1 planet OR collect 1 fighter\\\"}},\\r\\n    \\\"colonize\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Settle 1 planet OR +1 colony\\\",\\r\\n        \\\"role\\\":\\\"+1 colony per <icon>colonize<icon> \\\\n Leader: May settle 1 planet instead\\\"}},\\r\\n    \\\"producetrade\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Produce 1 resource OR Trade 1 resource\\\",\\r\\n        \\\"role\\\":\\\"Produce 1 resource per <icon>produce<icon> OR Trade 1 resource per <icon>trade<icon> \\\\n Leader: +<icon>produce<icon> OR <icon>trade<icon>\\\"}},\\r\\n    \\\"research\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Remove up to 3 cards in your and from the game\\\",\\r\\n        \\\"role\\\":\\\"Auire 1 technology card after satisfying <icon>research<icon> costs and planet requirements \\\\n Leader: +<icon>research<icon>\\\"}},\\r\\n    \\\"politics\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Remove tis card from the game. Place any 1 role card from the stacks into your hand\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"improved_trade\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Collect 1 influence from the supply\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"improved_research\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Draw 1 card. Remove up to 3 cards in your hand from the game\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"improved_production\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Produce 2 resources\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"improved_warfare\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Collect 2 fighter OR Attack 1 planet\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"improved_colonize\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Settle 1 planet (optional). \\\\n Settle another planet OR +1 colony\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"improved_survey\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Draw 3 cards\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"survey_team\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Take the top card of the planet deck and put it face down into your empire\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"war_path\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Attack up to 2 planets\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"terraforming\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Add this card to a planet as 2 colonies. If that fulfills the printed colonize cost, settle the planet \\\\n (ignore colonize cost discounts)\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"genetic_engineering\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Collect +1 influence for each TYPE of resource you produce this turn\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"artificial_intelligence'\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Place any 2 role cards from the stacks into your hand\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"diverse_markets\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Collect +1 influence for each TYPE of resource you trade this turn\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"specialization\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Choose 1 resource TYPE. Collect +1 influence for each resource of that TYPE you trade this turn\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"mobilization\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Collect 2 fighter. You may attack 1 planet after your role phase this turn\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"data_network\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Draw 2 cards. Remove any number of cards in your hand from the game\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"abundance\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Planets you settle or attack come into play with all resource slots filled\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"adaptability\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Your standard research role cards gain all symboles. They can be used to boost or follow any role\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"bureaucracy\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"You may use the leader bonus when following the colonize or warfare roles\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"dissension\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Draw 1 dditional card when dissenting\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"hyperefficiency\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"You may remove any number of cards in your hand form the game each turn\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"imperialism\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"<icon>survey<icon> <icon>trade<icon> <icon>warfare<icon>\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"logistics\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"Play the action and role phases of your turn in any order\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"productivity\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"You may play an additional card for its action effect during your action phase\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"scorched_earth_policy\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"-2 to our warfare costs. When you attack a planet, leave a fight on it. that planet cannot store resources\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"streamlining\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"You may remove 1 card in your hand from the game each turn\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"weapons_emporium\\\": {\\\"desc\\\":{\\r\\n        \\\"action\\\":\\\"You may trade fighters as if they were resources (fighter is not a resource TYPE)\\\",\\r\\n        \\\"role\\\":\\\"\\\"}},\\r\\n    \\\"fertile_grounds\\\": {\\\"desc\\\":{\\r\\n        \\\"role\\\":\\\"<icon>colonize<icon> <icon>produce<icon> <icon>research<icon>\\\",\\r\\n        \\\"action\\\":\\\"\\\"}}\\r\\n    }\\r\\n    let hashCode = (str,i=0) => {\\r\\n        console.log('str',str);\\r\\n        console.log('length',str.length);\\r\\n        return ( i >= str.length ) ? 0 : \\r\\n        hashCode(str,i+1) + \\r\\n        ((str.charCodeAt(i) << 5) - \\r\\n        str.charCodeAt(i));\\r\\n    };\\r\\n    let intToARGB = (i) =>  {let rgb = (((i>>24)&0xFF).toString(16) + ((i>>16)&0xFF).toString(16) + ((i>>8)&0xFF).toString(16) + (i&0xFF).toString(16)); rgb+='000000'; return rgb.substring(0, 6);};\\r\\n    String.prototype.toHexColour = () => intToARGB(hashCode(this));\\r\\n    export let card={name:\\\" \\\"}, selectable=false, mini=false;\\r\\n    let color,bg,logoBg;\\r\\n    onMount(()=>{\\r\\n        console.log('card name',card.name);\\r\\n        color = '#' + intToARGB(hashCode(card.name));\\r\\n        bg = `color:${color};background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  ${color} 8vh,  ${color} 8vh,  ${color} 12vh,  ${color} 12vh,  rgb(80,80,80) 16vh );`;\\r\\n        logoBg = `background-color: ${color};`;\\r\\n    })\\r\\n\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n\\t@import url(https://unpkg.com/@smui/card@latest/bare.css);\\r\\n\\t.mdc-card {\\r\\n\\t\\toverflow:hidden;\\r\\n\\t\\tpadding:1vh;\\r\\n\\t\\tmin-height: 30vh; \\r\\n\\t\\tmin-width: 19vh; \\r\\n\\t\\tmax-height: 30vh; \\r\\n\\t\\tmax-width: 19vh; \\r\\n\\t\\tmargin-left:1vh;\\r\\n\\t\\tmargin-right:1vh;\\r\\n    }\\r\\n    .mdc-card.mini {\\r\\n\\t\\tmin-height: 16vh;\\r\\n\\t\\tmax-height: 16vh;\\r\\n    }\\r\\n\\t.title {\\r\\n\\t\\tdisplay:flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t\\tmax-height: 3vh;\\r\\n\\t\\tmin-height: 3vh;\\r\\n\\t\\tfont: 2vh bold;\\r\\n\\t}\\r\\n\\t.title p {\\r\\n\\t\\tmargin-top: auto;\\r\\n\\t\\tmargin-bottom: auto;\\r\\n\\t\\tmargin-left:1vh;\\r\\n\\t}\\r\\n\\t.logo {\\r\\n\\t\\theight:12vh;\\r\\n\\t\\twidth:12vh;\\r\\n\\t\\tmargin-left:3vh;\\r\\n\\t\\tborder-radius: 10vh 0vh 10vh 0vh;\\r\\n\\t\\tborder: .25vh solid black;\\r\\n\\t\\ttransform:rotate(45deg);\\r\\n\\t}\\r\\n\\t.logo img{\\r\\n\\t\\tmargin-left:2.25vh;\\r\\n\\t\\tmargin-top:2vh;\\r\\n\\t\\theight:7.5vh;\\r\\n\\t\\twidth:7.5vh;\\r\\n\\t\\ttransform: rotate(-45deg);\\r\\n\\t\\toverflow:hidden;\\r\\n\\t}\\r\\n\\t.desc {\\r\\n\\t\\tposition:relative;\\r\\n\\t\\tfont: 1vh bold;\\r\\n\\t\\tline-height : 1.2;\\r\\n\\t}\\r\\n\\t.action {\\r\\n\\t\\tposition:relative;\\r\\n\\t\\tborder: 0.05vh solid black;\\r\\n\\t\\tpadding: 0.5vh;\\r\\n\\t}\\r\\n\\t.action:after {\\r\\n\\t\\tposition:absolute;\\r\\n\\t\\tbackground: rgb(80,80,80);\\r\\n\\t\\theight:1vh;\\r\\n\\t\\tleft:.5vh;\\r\\n\\t\\ttop:-.5vh;\\r\\n\\t}\\r\\n\\t.action:after {\\r\\n\\t\\tcontent:'Action';\\r\\n\\t}\\r\\n</style>\\r\\n<div class=\\\"mdc-card {(selectable) ? (card.selected) ? 'selected' : 'selectable' : 'bordered'} {(mini) ? 'mini' : '' }\\\" style={bg} on:click on:touch on:touchstart on:touchend on:tap on:touchmove>\\r\\n    <div class=\\\"title\\\">\\r\\n        <IconBar {...card.icons}/>\\r\\n        <p>{card.name}</p>\\r\\n    </div>\\r\\n    <div class=\\\"logo\\\" style ={logoBg}>\\r\\n        <img src=\\\"./images/tech.svg\\\" alt=\\\"{card.name}\\\">\\r\\n    </div>\\r\\n    {#if !mini}\\r\\n        <div class=\\\"desc\\\">\\r\\n        {#if desc[card.type] !== undefined}\\r\\n            <p class=\\\"action\\\">\\r\\n                {#each desc[card.type].desc.action.split('<icon>') as piece}\\r\\n                    {#if ['survey','warfare','colonize','research','produce','trade'].includes(piece)} <Icon type={piece} size='sm'/> \\r\\n                    {:else} {piece}\\r\\n                    {/if}\\r\\n                {/each}\\r\\n            </p>\\r\\n        {/if}\\r\\n        <!-- <div class='res-cost'>\\r\\n                <p></p>\\r\\n                <Icon/>\\r\\n            </div>\\r\\n            <div class='plan-req'>\\r\\n                <Icon/>\\r\\n            </div> -->\\r\\n        </div> \\r\\n    {/if}\\r\\n</div>\"],\"names\":[],\"mappings\":\"AAkIC,QAAQ,IAAI,4CAA4C,CAAC,CAAC,AAC1D,SAAS,4BAAC,CAAC,AACV,SAAS,MAAM,CACf,QAAQ,GAAG,CACX,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,CACf,YAAY,GAAG,CACf,aAAa,GAAG,AACd,CAAC,AACD,SAAS,KAAK,4BAAC,CAAC,AAClB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,IAAI,AACd,CAAC,AACJ,MAAM,4BAAC,CAAC,AACP,QAAQ,IAAI,CACZ,cAAc,CAAE,GAAG,CACnB,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,GAAG,CACf,IAAI,CAAE,GAAG,CAAC,IAAI,AACf,CAAC,AACD,oBAAM,CAAC,CAAC,cAAC,CAAC,AACT,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,YAAY,GAAG,AAChB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,OAAO,IAAI,CACX,MAAM,IAAI,CACV,YAAY,GAAG,CACf,aAAa,CAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAChC,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CACzB,UAAU,OAAO,KAAK,CAAC,AACxB,CAAC,AACD,mBAAK,CAAC,iBAAG,CAAC,AACT,YAAY,MAAM,CAClB,WAAW,GAAG,CACd,OAAO,KAAK,CACZ,MAAM,KAAK,CACX,SAAS,CAAE,OAAO,MAAM,CAAC,CACzB,SAAS,MAAM,AAChB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,SAAS,QAAQ,CACjB,IAAI,CAAE,GAAG,CAAC,IAAI,CACd,WAAW,CAAG,GAAG,AAClB,CAAC,AACD,OAAO,4BAAC,CAAC,AACR,SAAS,QAAQ,CACjB,MAAM,CAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAC1B,OAAO,CAAE,KAAK,AACf,CAAC,AACD,mCAAO,MAAM,AAAC,CAAC,AACd,SAAS,QAAQ,CACjB,UAAU,CAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACzB,OAAO,GAAG,CACV,KAAK,IAAI,CACT,IAAI,KAAK,AACV,CAAC,AACD,mCAAO,MAAM,AAAC,CAAC,AACd,QAAQ,QAAQ,AACjB,CAAC\"}"
};

const Tech = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const desc = {
		" ": { "desc": { "role": "", "action": "" } },
		"survey": {
			"desc": {
				"role": "Look at <icon>survey<icon> -1 planet cards, keep 1 \n Leader: Look at 1 additional card",
				"action": "Draw 3 cards"
			}
		},
		"warfare": {
			"desc": {
				"role": "Collect 1 fighter per <icon>warfare<icon> \n Leader: May attack 1 planet instead",
				"action": "Attack 1 planet OR collect 1 fighter"
			}
		},
		"colonize": {
			"desc": {
				"action": "Settle 1 planet OR +1 colony",
				"role": "+1 colony per <icon>colonize<icon> \n Leader: May settle 1 planet instead"
			}
		},
		"producetrade": {
			"desc": {
				"action": "Produce 1 resource OR Trade 1 resource",
				"role": "Produce 1 resource per <icon>produce<icon> OR Trade 1 resource per <icon>trade<icon> \n Leader: +<icon>produce<icon> OR <icon>trade<icon>"
			}
		},
		"research": {
			"desc": {
				"action": "Remove up to 3 cards in your and from the game",
				"role": "Auire 1 technology card after satisfying <icon>research<icon> costs and planet requirements \n Leader: +<icon>research<icon>"
			}
		},
		"politics": {
			"desc": {
				"action": "Remove tis card from the game. Place any 1 role card from the stacks into your hand",
				"role": ""
			}
		},
		"improved_trade": {
			"desc": {
				"action": "Collect 1 influence from the supply",
				"role": ""
			}
		},
		"improved_research": {
			"desc": {
				"action": "Draw 1 card. Remove up to 3 cards in your hand from the game",
				"role": ""
			}
		},
		"improved_production": {
			"desc": {
				"action": "Produce 2 resources",
				"role": ""
			}
		},
		"improved_warfare": {
			"desc": {
				"action": "Collect 2 fighter OR Attack 1 planet",
				"role": ""
			}
		},
		"improved_colonize": {
			"desc": {
				"action": "Settle 1 planet (optional). \n Settle another planet OR +1 colony",
				"role": ""
			}
		},
		"improved_survey": {
			"desc": { "action": "Draw 3 cards", "role": "" }
		},
		"survey_team": {
			"desc": {
				"action": "Take the top card of the planet deck and put it face down into your empire",
				"role": ""
			}
		},
		"war_path": {
			"desc": {
				"action": "Attack up to 2 planets",
				"role": ""
			}
		},
		"terraforming": {
			"desc": {
				"action": "Add this card to a planet as 2 colonies. If that fulfills the printed colonize cost, settle the planet \n (ignore colonize cost discounts)",
				"role": ""
			}
		},
		"genetic_engineering": {
			"desc": {
				"action": "Collect +1 influence for each TYPE of resource you produce this turn",
				"role": ""
			}
		},
		"artificial_intelligence'": {
			"desc": {
				"action": "Place any 2 role cards from the stacks into your hand",
				"role": ""
			}
		},
		"diverse_markets": {
			"desc": {
				"action": "Collect +1 influence for each TYPE of resource you trade this turn",
				"role": ""
			}
		},
		"specialization": {
			"desc": {
				"action": "Choose 1 resource TYPE. Collect +1 influence for each resource of that TYPE you trade this turn",
				"role": ""
			}
		},
		"mobilization": {
			"desc": {
				"action": "Collect 2 fighter. You may attack 1 planet after your role phase this turn",
				"role": ""
			}
		},
		"data_network": {
			"desc": {
				"action": "Draw 2 cards. Remove any number of cards in your hand from the game",
				"role": ""
			}
		},
		"abundance": {
			"desc": {
				"action": "Planets you settle or attack come into play with all resource slots filled",
				"role": ""
			}
		},
		"adaptability": {
			"desc": {
				"action": "Your standard research role cards gain all symboles. They can be used to boost or follow any role",
				"role": ""
			}
		},
		"bureaucracy": {
			"desc": {
				"action": "You may use the leader bonus when following the colonize or warfare roles",
				"role": ""
			}
		},
		"dissension": {
			"desc": {
				"action": "Draw 1 dditional card when dissenting",
				"role": ""
			}
		},
		"hyperefficiency": {
			"desc": {
				"action": "You may remove any number of cards in your hand form the game each turn",
				"role": ""
			}
		},
		"imperialism": {
			"desc": {
				"action": "<icon>survey<icon> <icon>trade<icon> <icon>warfare<icon>",
				"role": ""
			}
		},
		"logistics": {
			"desc": {
				"action": "Play the action and role phases of your turn in any order",
				"role": ""
			}
		},
		"productivity": {
			"desc": {
				"action": "You may play an additional card for its action effect during your action phase",
				"role": ""
			}
		},
		"scorched_earth_policy": {
			"desc": {
				"action": "-2 to our warfare costs. When you attack a planet, leave a fight on it. that planet cannot store resources",
				"role": ""
			}
		},
		"streamlining": {
			"desc": {
				"action": "You may remove 1 card in your hand from the game each turn",
				"role": ""
			}
		},
		"weapons_emporium": {
			"desc": {
				"action": "You may trade fighters as if they were resources (fighter is not a resource TYPE)",
				"role": ""
			}
		},
		"fertile_grounds": {
			"desc": {
				"role": "<icon>colonize<icon> <icon>produce<icon> <icon>research<icon>",
				"action": ""
			}
		}
	};

	let hashCode = (str, i = 0) => {
		console.log("str", str);
		console.log("length", str.length);

		return i >= str.length
		? 0
		: hashCode(str, i + 1) + ((str.charCodeAt(i) << 5) - str.charCodeAt(i));
	};

	let intToARGB = i => {
		let rgb = (i >> 24 & 255).toString(16) + (i >> 16 & 255).toString(16) + (i >> 8 & 255).toString(16) + (i & 255).toString(16);
		rgb += "000000";
		return rgb.substring(0, 6);
	};

	String.prototype.toHexColour = () => intToARGB(hashCode(undefined));

	let { card = { name: " " } } = $$props,
		{ selectable = false } = $$props,
		{ mini = false } = $$props;

	let color, bg, logoBg;

	onMount(() => {
		console.log("card name", card.name);
		color = "#" + intToARGB(hashCode(card.name));
		bg = `color:${color};background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  ${color} 8vh,  ${color} 8vh,  ${color} 12vh,  ${color} 12vh,  rgb(80,80,80) 16vh );`;
		logoBg = `background-color: ${color};`;
	});

	if ($$props.card === void 0 && $$bindings.card && card !== void 0) $$bindings.card(card);
	if ($$props.selectable === void 0 && $$bindings.selectable && selectable !== void 0) $$bindings.selectable(selectable);
	if ($$props.mini === void 0 && $$bindings.mini && mini !== void 0) $$bindings.mini(mini);
	$$result.css.add(css$2);

	return `<div class="${"mdc-card " + escape(selectable
	? card.selected ? "selected" : "selectable"
	: "bordered") + " " + escape(mini ? "mini" : "") + " svelte-4d9gi8"}"${add_attribute("style", bg, 0)}><div class="${"title svelte-4d9gi8"}">${validate_component(IconBar, "IconBar").$$render($$result, Object.assign(card.icons), {}, {})}
        <p class="${"svelte-4d9gi8"}">${escape(card.name)}</p></div>
    <div class="${"logo svelte-4d9gi8"}"${add_attribute("style", logoBg, 0)}><img src="${"./images/tech.svg"}"${add_attribute("alt", card.name, 0)} class="${"svelte-4d9gi8"}"></div>
    ${!mini
	? `<div class="${"desc svelte-4d9gi8"}">${desc[card.type] !== undefined
		? `<p class="${"action svelte-4d9gi8"}">${each(desc[card.type].desc.action.split("<icon>"), piece => `${["survey", "warfare", "colonize", "research", "produce", "trade"].includes(piece)
			? `${validate_component(Icon, "Icon").$$render($$result, { type: piece, size: "sm" }, {}, {})}`
			: `${escape(piece)}`}`)}</p>`
		: ``}
        </div>`
	: ``}</div>`;
});

/* src\components\PlanetCard.svelte generated by Svelte v3.20.1 */

const css$3 = {
	code: "@import url(https://unpkg.com/@smui/card@latest/bare.css);.mdc-card.svelte-1ax9ajq.svelte-1ax9ajq{overflow:hidden;padding:1vh;min-height:30vh;min-width:19vh;max-height:30vh;max-width:19vh;margin-left:1vh;margin-right:1vh;position:relative}.mdc-card.mini.svelte-1ax9ajq.svelte-1ax9ajq{min-height:16vh;max-height:16vh}.title.svelte-1ax9ajq.svelte-1ax9ajq{display:flex;flex-direction:row;max-height:3vh;min-height:3vh;font:1.5vh bold;text-align:end}.logo.svelte-1ax9ajq.svelte-1ax9ajq{height:12vh;width:12vh;margin-left:3vh;border-radius:10vh 0vh 10vh 0vh;transform:rotate(45deg)}.logo.svelte-1ax9ajq img.svelte-1ax9ajq{margin-left:2.25vh;margin-top:2vh;height:7.5vh;width:7.5vh;transform:rotate(-45deg);overflow:hidden}.name.svelte-1ax9ajq.svelte-1ax9ajq{position:absolute;top:20%;left:2%;transform:rotate(90deg);transform-origin:bottom left;font-size:1.6vh;border-radius:5px;background:rgb(100,100,100);padding-left:1em;padding-right:1em}",
	map: "{\"version\":3,\"file\":\"PlanetCard.svelte\",\"sources\":[\"PlanetCard.svelte\"],\"sourcesContent\":[\"<script> \\r\\nimport IconBar from '../components/IconBar.svelte';\\r\\nimport Icon from '../components/Icon.svelte';\\r\\nimport { onMount } from 'svelte';\\r\\n\\r\\n    export let planet={name:\\\" \\\"}, selectable=false, mini=false;\\r\\nlet key = {advanced:'adv', fertile:'fer', metallic:'met',}[planet.type];\\r\\n    let color,bg,logoBg;\\r\\n    console.log(planet);\\r\\n    onMount(()=>{\\r\\n        color =  (key=='fer') ? 'rgb(148, 197, 152)' : (key=='adv') ? 'rgb(231, 184, 215)' : 'rgb(187, 55, 55)';\\r\\n        bg = `color:${color};background:radial-gradient(circle at 50% 33%, ${color}, rgb(80,80,80) 30%)`\\r\\n        logoBg = `background-color: ${color};`;\\r\\n    })\\r\\n\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n\\t@import url(https://unpkg.com/@smui/card@latest/bare.css);\\r\\n\\t.mdc-card {\\r\\n\\t\\toverflow:hidden;\\r\\n\\t\\tpadding:1vh;\\r\\n\\t\\tmin-height: 30vh; \\r\\n\\t\\tmin-width: 19vh; \\r\\n\\t\\tmax-height: 30vh; \\r\\n\\t\\tmax-width: 19vh; \\r\\n\\t\\tmargin-left:1vh;\\r\\n\\t\\tmargin-right:1vh;\\r\\n        position:relative;\\r\\n    }\\r\\n    .mdc-card.mini {\\r\\n\\t\\tmin-height: 16vh;\\r\\n\\t\\tmax-height: 16vh;\\r\\n    }\\r\\n\\t.title {\\r\\n\\t\\tdisplay:flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t\\tmax-height: 3vh;\\r\\n\\t\\tmin-height: 3vh;\\r\\n\\t\\tfont: 1.5vh bold;\\r\\n        text-align: end;\\r\\n\\t}\\r\\n\\t.logo {\\r\\n\\t\\theight:12vh;\\r\\n\\t\\twidth:12vh;\\r\\n\\t\\tmargin-left:3vh;\\r\\n\\t\\tborder-radius: 10vh 0vh 10vh 0vh;\\r\\n\\t\\ttransform:rotate(45deg);\\r\\n\\t}\\r\\n\\t.logo img{\\r\\n\\t\\tmargin-left:2.25vh;\\r\\n\\t\\tmargin-top:2vh;\\r\\n\\t\\theight:7.5vh;\\r\\n\\t\\twidth:7.5vh;\\r\\n\\t\\ttransform: rotate(-45deg);\\r\\n\\t\\toverflow:hidden;\\r\\n\\t}\\r\\n    .name {\\r\\n        position: absolute;\\r\\n        top:20%;\\r\\n        left:2%;\\r\\n        transform: rotate(90deg);\\r\\n        transform-origin: bottom left;\\r\\n        font-size:1.6vh;\\r\\n        border-radius: 5px;\\r\\n        background:rgb(100,100,100);\\r\\n        padding-left:1em;\\r\\n        padding-right:1em;\\r\\n    }\\r\\n</style>\\r\\n    <div class=\\\"mdc-card {(selectable) ? (planet.selected) ? 'selected' : 'selectable' : 'bordered'} {(mini) ? 'mini' : '' }\\\" style={bg} on:click on:touch on:touchstart on:touchend on:tap on:touchmove>\\r\\n        {#if planet.settled}\\r\\n            <div class=\\\"title\\\"> \\r\\n                <IconBar {...planet.icons}/>  \\r\\n                <span style=\\\"margin-left:15vh\\\">\\r\\n                    <Icon type='influence' size='sm' influence={planet.influence_vbalue}/>\\r\\n                </span>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"logo\\\">\\r\\n                <img src=\\\"./images/{key}.svg\\\" alt=\\\"{planet.name}\\\">\\r\\n            </div>\\r\\n            <div class='name'>{planet.name}</div>\\r\\n            <div style=\\\"position:absolute; bottom:3%; width:15%; height 15%; text-align: center;\\\">\\r\\n                {#each planet.production_zones as zone}\\r\\n                    <Icon type={zone.type} size=\\\"sm\\\" bordered={zone.filled}/>\\r\\n                {/each}\\r\\n            </div>\\r\\n        {:else}\\r\\n            {#if !mini}<div class=\\\"title\\\"> Surveying Alien World  </div>{/if}\\r\\n            <div class=\\\"logo\\\" >\\r\\n                <img src=\\\"./images/col.svg\\\" alt=\\\"{planet.name}\\\">\\r\\n            </div>\\r\\n            <div style={\\\"display:inline-block \\\" + (mini) ? 'position:absolute;width:90%;top:40%': ''}>\\r\\n                <span style=\\\"float:left\\\">\\r\\n                    {planet.settle_cost}\\r\\n                    <Icon type=\\\"colonize\\\" size=\\\"sm\\\"/>\\r\\n                </span>\\r\\n                <span style=\\\"float:right\\\">\\r\\n                    <Icon type=\\\"warfare\\\" size=\\\"sm\\\"/>\\r\\n                    {planet.conquer_cost}\\r\\n                </span>\\r\\n            </div>\\r\\n            <div style=\\\"position:absolute; bottom:3%; width:85%; text-align: center; border: 1px solid black;\\\">{planet.type}</div>\\r\\n    {/if}\\r\\n</div>\"],\"names\":[],\"mappings\":\"AAkBC,QAAQ,IAAI,4CAA4C,CAAC,CAAC,AAC1D,SAAS,8BAAC,CAAC,AACV,SAAS,MAAM,CACf,QAAQ,GAAG,CACX,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,CACf,YAAY,GAAG,CACf,aAAa,GAAG,CACV,SAAS,QAAQ,AACrB,CAAC,AACD,SAAS,KAAK,8BAAC,CAAC,AAClB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,IAAI,AACd,CAAC,AACJ,MAAM,8BAAC,CAAC,AACP,QAAQ,IAAI,CACZ,cAAc,CAAE,GAAG,CACnB,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,GAAG,CACf,IAAI,CAAE,KAAK,CAAC,IAAI,CACV,UAAU,CAAE,GAAG,AACtB,CAAC,AACD,KAAK,8BAAC,CAAC,AACN,OAAO,IAAI,CACX,MAAM,IAAI,CACV,YAAY,GAAG,CACf,aAAa,CAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAChC,UAAU,OAAO,KAAK,CAAC,AACxB,CAAC,AACD,oBAAK,CAAC,kBAAG,CAAC,AACT,YAAY,MAAM,CAClB,WAAW,GAAG,CACd,OAAO,KAAK,CACZ,MAAM,KAAK,CACX,SAAS,CAAE,OAAO,MAAM,CAAC,CACzB,SAAS,MAAM,AAChB,CAAC,AACE,KAAK,8BAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,IAAI,GAAG,CACP,KAAK,EAAE,CACP,SAAS,CAAE,OAAO,KAAK,CAAC,CACxB,gBAAgB,CAAE,MAAM,CAAC,IAAI,CAC7B,UAAU,KAAK,CACf,aAAa,CAAE,GAAG,CAClB,WAAW,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAC3B,aAAa,GAAG,CAChB,cAAc,GAAG,AACrB,CAAC\"}"
};

const PlanetCard = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { planet = { name: " " } } = $$props,
		{ selectable = false } = $$props,
		{ mini = false } = $$props;

	let key = ({
		advanced: "adv",
		fertile: "fer",
		metallic: "met"
	})[planet.type];

	let color, bg;
	console.log(planet);

	onMount(() => {
		color = key == "fer"
		? "rgb(148, 197, 152)"
		: key == "adv" ? "rgb(231, 184, 215)" : "rgb(187, 55, 55)";

		bg = `color:${color};background:radial-gradient(circle at 50% 33%, ${color}, rgb(80,80,80) 30%)`;
	});

	if ($$props.planet === void 0 && $$bindings.planet && planet !== void 0) $$bindings.planet(planet);
	if ($$props.selectable === void 0 && $$bindings.selectable && selectable !== void 0) $$bindings.selectable(selectable);
	if ($$props.mini === void 0 && $$bindings.mini && mini !== void 0) $$bindings.mini(mini);
	$$result.css.add(css$3);

	return `<div class="${"mdc-card " + escape(selectable
	? planet.selected ? "selected" : "selectable"
	: "bordered") + " " + escape(mini ? "mini" : "") + " svelte-1ax9ajq"}"${add_attribute("style", bg, 0)}>${planet.settled
	? `<div class="${"title svelte-1ax9ajq"}">${validate_component(IconBar, "IconBar").$$render($$result, Object.assign(planet.icons), {}, {})}  
                <span style="${"margin-left:15vh"}">${validate_component(Icon, "Icon").$$render(
			$$result,
			{
				type: "influence",
				size: "sm",
				influence: planet.influence_vbalue
			},
			{},
			{}
		)}</span></div>

            <div class="${"logo svelte-1ax9ajq"}"><img src="${"./images/" + escape(key) + ".svg"}"${add_attribute("alt", planet.name, 0)} class="${"svelte-1ax9ajq"}"></div>
            <div class="${"name svelte-1ax9ajq"}">${escape(planet.name)}</div>
            <div style="${"position:absolute; bottom:3%; width:15%; height 15%; text-align: center;"}">${each(planet.production_zones, zone => `${validate_component(Icon, "Icon").$$render(
			$$result,
			{
				type: zone.type,
				size: "sm",
				bordered: zone.filled
			},
			{},
			{}
		)}`)}</div>`
	: `${!mini
		? `<div class="${"title svelte-1ax9ajq"}">Surveying Alien World  </div>`
		: ``}
            <div class="${"logo svelte-1ax9ajq"}"><img src="${"./images/col.svg"}"${add_attribute("alt", planet.name, 0)} class="${"svelte-1ax9ajq"}"></div>
            <div${add_attribute(
			"style",
			"display:inline-block " + mini
			? "position:absolute;width:90%;top:40%"
			: "",
			0
		)}><span style="${"float:left"}">${escape(planet.settle_cost)}
                    ${validate_component(Icon, "Icon").$$render($$result, { type: "colonize", size: "sm" }, {}, {})}</span>
                <span style="${"float:right"}">${validate_component(Icon, "Icon").$$render($$result, { type: "warfare", size: "sm" }, {}, {})}
                    ${escape(planet.conquer_cost)}</span></div>
            <div style="${"position:absolute; bottom:3%; width:85%; text-align: center; border: 1px solid black;"}">${escape(planet.type)}</div>`}</div>`;
});

/* src\components\Card.svelte generated by Svelte v3.20.1 */

const css$4 = {
	code: "@import url(https://unpkg.com/@smui/card@latest/bare.css);:root{--pro-color:rgb(255, 255, 119);--col-color:rgb(255, 184, 102);--trd-color:rgb(255, 169, 241);--pol-color:rgb(209, 186, 143);--res-color:rgb(119, 183, 255);--war-color:rgb(255, 98, 98);--sur-color:rgb(143, 255, 143);--pro-trd-clr:linear-gradient(to right, var(--pro-color), var(--pro-color) 50%, var(--trd-color) 50%, var(--trd-color) 100%)}.selectable.svelte-b1qm3o.svelte-b1qm3o{border:solid rgb(114, 210, 223);border-width:1px}.selected.svelte-b1qm3o.svelte-b1qm3o{border:solid rgb(50, 190, 132);border-width:1px}.mdc-card.svelte-b1qm3o.svelte-b1qm3o{position:relative;overflow:hidden;padding:1vh;height:30vh;width:19vh;margin-left:1vh;margin-right:1vh}.mdc-card.svelte-b1qm3o.svelte-b1qm3o:hover{transform:scale(1.08);z-index:3}.mdc-card.mini.svelte-b1qm3o.svelte-b1qm3o{min-height:16vh;max-height:16vh}.logo.svelte-b1qm3o div.svelte-b1qm3o{transform:rotate(-45deg) scale(1.7);margin-top:2.9vh;margin-left:2.8vh}.title.svelte-b1qm3o.svelte-b1qm3o{display:flex;flex-direction:row;max-height:3vh;min-height:3vh;overflow:hidden;font:2vh bold}.title.svelte-b1qm3o p.svelte-b1qm3o{margin-top:auto;margin-bottom:auto;margin-left:1vh}.logo.svelte-b1qm3o.svelte-b1qm3o{min-height:12vh;min-width:12vh;max-height:12vh;max-width:12vh;margin-left:3vh;border-radius:10vh 0vh 10vh 0vh;border:.25vh solid black;transform:rotate(45deg)}.logo.svelte-b1qm3o img.svelte-b1qm3o{margin-left:2.25vh;margin-top:2vh;height:7.5vh;width:7.5vh;transform:rotate(-45deg);overflow:hidden}.desc.svelte-b1qm3o.svelte-b1qm3o{position:relative;font:1vh bold;line-height:1.2}.role.svelte-b1qm3o.svelte-b1qm3o,.action.svelte-b1qm3o.svelte-b1qm3o{position:relative;border:0.05vh solid black;padding:0.5vh}.role.svelte-b1qm3o.svelte-b1qm3o:after,.action.svelte-b1qm3o.svelte-b1qm3o:after{position:absolute;background:rgb(80,80,80);height:1vh;left:.5vh;top:-.5vh}.role.svelte-b1qm3o.svelte-b1qm3o:after{content:'Role'}.action.svelte-b1qm3o.svelte-b1qm3o:after{content:'Action'}.pilecount.svelte-b1qm3o.svelte-b1qm3o{position:absolute;left:5%;bottom:3%}",
	map: "{\"version\":3,\"file\":\"Card.svelte\",\"sources\":[\"Card.svelte\"],\"sourcesContent\":[\"<script>\\n\\timport Icon from '../components/Icon.svelte';\\n\\timport Tech from '../components/Tech.svelte';\\n\\timport PlanetCard from '../components/PlanetCard.svelte';\\n\\timport {beforeUpdate} from 'svelte';\\n\\texport let card, selectable = false, pilecount ='', mini = false;\\n\\tlet label,key,bg,logoBg;\\n    $:{ label = card.type.charAt(0).toUpperCase() + card.type.slice(1),\\n        key = {producetrade:false,produce:'pro',trade:'trd',research:'res',politics:'pol',survey:'sur',warfare:'war',colonize:'col'}[card.type],\\n        bg = (!key) ? `color:var(--pro-color);background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  var(--pro-color) 8vh,  var(--pro-color) 8vh,  var(--trd-color) 12vh,  var(--trd-color) 12vh,  rgb(80,80,80) 16vh );`\\n                    : `color:var(--${key}-color);background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  var(--${key}-color) 8vh,  var(--${key}-color) 8vh,  var(--${key}-color) 12vh,  var(--${key}-color) 12vh,  rgb(80,80,80) 16vh );`,\\n        logoBg = (!key) ? `background: var(--pro-trd-clr);` : `background-color: var(--${key}-color);`;\\n\\t}\\n\\tlet desc = {\\n\\t\\t\\\"survey\\\": {\\\"desc\\\":{\\n\\t\\t\\t\\\"role\\\":\\\"Look at <icon>survey<icon> -1 planet cards, keep 1 \\\\n Leader: Look at 1 additional card\\\",\\n\\t\\t\\t\\\"action\\\":\\\"Draw 3 cards\\\"}},\\n\\t\\t\\\"warfare\\\": {\\\"desc\\\":{\\n\\t\\t\\t\\\"role\\\":\\\"Collect 1 fighter per <icon>warfare<icon> \\\\n Leader: May attack 1 planet instead\\\",\\n\\t\\t\\t\\\"action\\\":\\\"Attack 1 planet OR collect 1 fighter\\\"}},\\n\\t\\t\\\"colonize\\\": {\\\"desc\\\":{\\n\\t\\t\\t\\\"action\\\":\\\"Settle 1 planet OR +1 colony\\\",\\n\\t\\t\\t\\\"role\\\":\\\"+1 colony per <icon>colonize<icon> \\\\n Leader: May settle 1 planet instead\\\"}},\\n\\t\\t\\\"producetrade\\\": {\\\"desc\\\":{\\n\\t\\t\\t\\\"action\\\":\\\"Produce 1 resource OR Trade 1 resource\\\",\\n\\t\\t\\t\\\"role\\\":\\\"Produce 1 resource per <icon>produce<icon> OR Trade 1 resource per <icon>trade<icon> \\\\n Leader: +<icon>produce<icon> OR <icon>trade<icon>\\\"}},\\n\\t\\t\\\"research\\\": {\\\"desc\\\":{\\n\\t\\t\\t\\\"action\\\":\\\"Remove up to 3 cards in your and from the game\\\",\\n\\t\\t\\t\\\"role\\\":\\\"Aquire 1 technology card after satisfying <icon>research<icon> costs and planet requirements \\\\n Leader: +<icon>research<icon>\\\"}},\\n\\t\\t\\\"politics\\\": {\\\"desc\\\":{\\n\\t\\t\\t\\\"action\\\":\\\"Remove tis card from the game. Place any 1 role card from the stacks into your hand\\\",\\n\\t\\t\\t\\\"role\\\":\\\"\\\"}},\\n\\t\\t}\\n\\n\\n\\tbeforeUpdate(()=>{\\n\\t\\tcard.type = card.type+'';\\n\\t})\\n\\t</script>\\n<style>\\n\\t@import url(https://unpkg.com/@smui/card@latest/bare.css);\\n\\t:root {\\n\\t\\t--pro-color:rgb(255, 255, 119);\\n\\t\\t--col-color:rgb(255, 184, 102);\\n\\t\\t--trd-color:rgb(255, 169, 241);\\n\\t\\t--pol-color:rgb(209, 186, 143);\\n\\t\\t--res-color:rgb(119, 183, 255);\\n\\t\\t--war-color:rgb(255, 98, 98);\\n\\t\\t--sur-color:rgb(143, 255, 143);\\n\\t\\t--pro-trd-clr:linear-gradient(to right, var(--pro-color), var(--pro-color) 50%, var(--trd-color) 50%, var(--trd-color) 100%);\\n\\t}\\n\\t\\n\\t.selectable{\\n\\t\\tborder: solid rgb(114, 210, 223);\\n\\t\\tborder-width: 1px;\\n\\t}\\n\\t\\n\\t.selected{\\n\\t\\tborder: solid rgb(50, 190, 132);\\n\\t\\tborder-width: 1px;\\n\\t}\\n\\t.mdc-card {\\n\\t\\tposition: relative;\\n\\t\\toverflow:hidden;\\n\\t\\tpadding:1vh;\\n\\t\\theight: 30vh; \\n\\t\\twidth: 19vh; \\n\\t\\tmargin-left:1vh;\\n\\t\\tmargin-right:1vh;\\n    }\\n\\t\\n\\t.mdc-card:hover{\\n\\t\\ttransform:scale(1.08);\\n\\t\\tz-index:3;\\n\\t}\\n    .mdc-card.mini {\\n\\t\\tmin-height: 16vh;\\n\\t\\tmax-height: 16vh;\\n    }\\n    .logo div {\\n        transform: rotate(-45deg) scale(1.7);\\n        margin-top: 2.9vh;\\n        margin-left: 2.8vh;\\n    }\\n\\t.title {\\n\\t\\tdisplay:flex;\\n\\t\\tflex-direction: row;\\n\\t\\tmax-height: 3vh;\\n\\t\\tmin-height: 3vh;\\n\\t\\toverflow:hidden;\\n\\t\\tfont: 2vh bold;\\n\\t}\\n\\t.title p {\\n\\t\\tmargin-top: auto;\\n\\t\\tmargin-bottom: auto;\\n\\t\\tmargin-left:1vh;\\n\\t}\\n\\t.logo {\\n\\t\\tmin-height:12vh;\\n\\t\\tmin-width:12vh;\\n\\t\\tmax-height:12vh;\\n\\t\\tmax-width:12vh;\\n\\t\\tmargin-left:3vh;\\n\\t\\tborder-radius: 10vh 0vh 10vh 0vh;\\n\\t\\tborder: .25vh solid black;\\n\\t\\ttransform:rotate(45deg);\\n\\t}\\n\\t.logo img{\\n\\t\\tmargin-left:2.25vh;\\n\\t\\tmargin-top:2vh;\\n\\t\\theight:7.5vh;\\n\\t\\twidth:7.5vh;\\n\\t\\ttransform: rotate(-45deg);\\n\\t\\toverflow:hidden;\\n\\t}\\n\\t.desc {\\n\\t\\tposition:relative;\\n\\t\\tfont: 1vh bold;\\n\\t\\tline-height : 1.2;\\n\\t}\\n\\t.role, .action {\\n\\t\\tposition:relative;\\n\\t\\tborder: 0.05vh solid black;\\n\\t\\tpadding: 0.5vh;\\n\\t}\\n\\t.role:after, .action:after {\\n\\t\\tposition:absolute;\\n\\t\\tbackground: rgb(80,80,80);\\n\\t\\theight:1vh;\\n\\t\\tleft:.5vh;\\n\\t\\ttop:-.5vh;\\n\\t}\\n\\t.role:after {\\n\\t\\tcontent:'Role';\\n\\t}\\n\\t.action:after {\\n\\t\\tcontent:'Action';\\n\\t}\\n\\t.pilecount{\\n\\t\\tposition:absolute;\\n\\t\\tleft:5%;\\n\\t\\tbottom:3%;\\n\\t}\\n</style>\\n{#if (card.type=='planet'||card.type=='advanced'||card.type=='metallic'||card.type=='fertile')}\\n\\t<PlanetCard planet={card} {selectable} {mini}/>\\t\\t\\n{:else if !['survey','warfare','colonize','research','producetrade','politics'].includes(card.type)} \\n\\t<Tech {card} {selectable} {mini}/>\\n{:else}\\n\\t<div class=\\\"mdc-card {(selectable) ? (card.selected) ? 'selected' : 'selectable' : 'bordered'} {(mini) ? 'mini' : '' }\\\" style={bg} on:click on:touch on:touchstart on:touchend on:tap on:touchmove>\\n\\t\\t<div class=\\\"title\\\">\\n\\t\\t{#if (!key)} \\n\\t\\t\\t<Icon type='produce' size='sm'/>\\n\\t\\t\\t<Icon type='trade' size='sm'/>\\n\\t\\t{:else}\\n\\t\\t\\t<Icon type={card.type} size='sm'/>\\n\\t\\t{/if}\\n\\t\\t<p>{label}</p>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"logo\\\" style ={logoBg}>\\n\\t\\t{#if (!key)} \\n\\t\\t\\t<div style='display:flex;flex-direction:row;'>\\n\\t\\t\\t\\t<Icon type='produce' size='sm'/>\\n\\t\\t\\t\\t<Icon type='trade' size='sm'/>\\n\\t\\t\\t</div>\\n\\t\\t{:else}\\n\\t\\t\\t<img src=\\\"./images/{key}.svg\\\" alt=\\\"{key}\\\">\\n\\t\\t{/if}\\n\\t\\t</div>\\n\\t\\t\\n\\t\\t{#if !mini}\\n\\t\\t\\t<div class=\\\"desc\\\">\\n\\t\\t\\t\\t{#if desc[card.type] !== undefined}\\n\\t\\t\\t\\t\\t<p class=\\\"action\\\">\\n\\t\\t\\t\\t\\t\\t{#each desc[card.type].desc.action.split('<icon>') as piece}\\n\\t\\t\\t\\t\\t\\t\\t{#if ['survey','warfare','colonize','research','produce','trade','politics'].includes(piece)} <Icon type={piece} size='sm'/> \\n\\t\\t\\t\\t\\t\\t\\t{:else} {piece}\\n\\t\\t\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t<p class=\\\"role\\\">\\n\\t\\t\\t\\t\\t\\t{#each desc[card.type].desc.role.split('<icon>') as piece}\\n\\t\\t\\t\\t\\t\\t\\t{#if ['survey','warfare','colonize','research','produce','trade','politics'].includes(piece)} <Icon type={piece} size='sm'/> \\n\\t\\t\\t\\t\\t\\t\\t{:else} {piece}\\n\\t\\t\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t{/if}\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class='pilecount'>{pilecount} remaining</div>\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\"],\"names\":[],\"mappings\":\"AAwCC,QAAQ,IAAI,4CAA4C,CAAC,CAAC,AAC1D,KAAK,AAAC,CAAC,AACN,YAAY,kBAAkB,CAC9B,YAAY,kBAAkB,CAC9B,YAAY,kBAAkB,CAC9B,YAAY,kBAAkB,CAC9B,YAAY,kBAAkB,CAC9B,YAAY,gBAAgB,CAC5B,YAAY,kBAAkB,CAC9B,cAAc,8GAA8G,AAC7H,CAAC,AAED,uCAAW,CAAC,AACX,MAAM,CAAE,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAChC,YAAY,CAAE,GAAG,AAClB,CAAC,AAED,qCAAS,CAAC,AACT,MAAM,CAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC/B,YAAY,CAAE,GAAG,AAClB,CAAC,AACD,SAAS,4BAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,SAAS,MAAM,CACf,QAAQ,GAAG,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,YAAY,GAAG,CACf,aAAa,GAAG,AACd,CAAC,AAEJ,qCAAS,MAAM,CAAC,AACf,UAAU,MAAM,IAAI,CAAC,CACrB,QAAQ,CAAC,AACV,CAAC,AACE,SAAS,KAAK,4BAAC,CAAC,AAClB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,IAAI,AACd,CAAC,AACD,mBAAK,CAAC,GAAG,cAAC,CAAC,AACP,SAAS,CAAE,OAAO,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CACpC,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,KAAK,AACtB,CAAC,AACJ,MAAM,4BAAC,CAAC,AACP,QAAQ,IAAI,CACZ,cAAc,CAAE,GAAG,CACnB,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,GAAG,CACf,SAAS,MAAM,CACf,IAAI,CAAE,GAAG,CAAC,IAAI,AACf,CAAC,AACD,oBAAM,CAAC,CAAC,cAAC,CAAC,AACT,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,YAAY,GAAG,AAChB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,WAAW,IAAI,CACf,UAAU,IAAI,CACd,WAAW,IAAI,CACf,UAAU,IAAI,CACd,YAAY,GAAG,CACf,aAAa,CAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAChC,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CACzB,UAAU,OAAO,KAAK,CAAC,AACxB,CAAC,AACD,mBAAK,CAAC,iBAAG,CAAC,AACT,YAAY,MAAM,CAClB,WAAW,GAAG,CACd,OAAO,KAAK,CACZ,MAAM,KAAK,CACX,SAAS,CAAE,OAAO,MAAM,CAAC,CACzB,SAAS,MAAM,AAChB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,SAAS,QAAQ,CACjB,IAAI,CAAE,GAAG,CAAC,IAAI,CACd,WAAW,CAAG,GAAG,AAClB,CAAC,AACD,iCAAK,CAAE,OAAO,4BAAC,CAAC,AACf,SAAS,QAAQ,CACjB,MAAM,CAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAC1B,OAAO,CAAE,KAAK,AACf,CAAC,AACD,iCAAK,MAAM,CAAE,mCAAO,MAAM,AAAC,CAAC,AAC3B,SAAS,QAAQ,CACjB,UAAU,CAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACzB,OAAO,GAAG,CACV,KAAK,IAAI,CACT,IAAI,KAAK,AACV,CAAC,AACD,iCAAK,MAAM,AAAC,CAAC,AACZ,QAAQ,MAAM,AACf,CAAC,AACD,mCAAO,MAAM,AAAC,CAAC,AACd,QAAQ,QAAQ,AACjB,CAAC,AACD,sCAAU,CAAC,AACV,SAAS,QAAQ,CACjB,KAAK,EAAE,CACP,OAAO,EAAE,AACV,CAAC\"}"
};

const Card = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { card } = $$props,
		{ selectable = false } = $$props,
		{ pilecount = "" } = $$props,
		{ mini = false } = $$props;

	let label, key, bg, logoBg;

	let desc = {
		"survey": {
			"desc": {
				"role": "Look at <icon>survey<icon> -1 planet cards, keep 1 \n Leader: Look at 1 additional card",
				"action": "Draw 3 cards"
			}
		},
		"warfare": {
			"desc": {
				"role": "Collect 1 fighter per <icon>warfare<icon> \n Leader: May attack 1 planet instead",
				"action": "Attack 1 planet OR collect 1 fighter"
			}
		},
		"colonize": {
			"desc": {
				"action": "Settle 1 planet OR +1 colony",
				"role": "+1 colony per <icon>colonize<icon> \n Leader: May settle 1 planet instead"
			}
		},
		"producetrade": {
			"desc": {
				"action": "Produce 1 resource OR Trade 1 resource",
				"role": "Produce 1 resource per <icon>produce<icon> OR Trade 1 resource per <icon>trade<icon> \n Leader: +<icon>produce<icon> OR <icon>trade<icon>"
			}
		},
		"research": {
			"desc": {
				"action": "Remove up to 3 cards in your and from the game",
				"role": "Aquire 1 technology card after satisfying <icon>research<icon> costs and planet requirements \n Leader: +<icon>research<icon>"
			}
		},
		"politics": {
			"desc": {
				"action": "Remove tis card from the game. Place any 1 role card from the stacks into your hand",
				"role": ""
			}
		}
	};

	beforeUpdate(() => {
		card.type = card.type + "";
	});

	if ($$props.card === void 0 && $$bindings.card && card !== void 0) $$bindings.card(card);
	if ($$props.selectable === void 0 && $$bindings.selectable && selectable !== void 0) $$bindings.selectable(selectable);
	if ($$props.pilecount === void 0 && $$bindings.pilecount && pilecount !== void 0) $$bindings.pilecount(pilecount);
	if ($$props.mini === void 0 && $$bindings.mini && mini !== void 0) $$bindings.mini(mini);
	$$result.css.add(css$4);

	 {
		{
			(label = card.type.charAt(0).toUpperCase() + card.type.slice(1), key = ({
				producetrade: false,
				produce: "pro",
				trade: "trd",
				research: "res",
				politics: "pol",
				survey: "sur",
				warfare: "war",
				colonize: "col"
			})[card.type], bg = !key
			? `color:var(--pro-color);background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  var(--pro-color) 8vh,  var(--pro-color) 8vh,  var(--trd-color) 12vh,  var(--trd-color) 12vh,  rgb(80,80,80) 16vh );`
			: `color:var(--${key}-color);background-image:linear-gradient( rgb(80,80,80),  rgb(80,80,80) 5vh,  rgb(80,80,80) 5vh,  var(--${key}-color) 8vh,  var(--${key}-color) 8vh,  var(--${key}-color) 12vh,  var(--${key}-color) 12vh,  rgb(80,80,80) 16vh );`, logoBg = !key
			? `background: var(--pro-trd-clr);`
			: `background-color: var(--${key}-color);`);
		}
	}

	return `${card.type == "planet" || card.type == "advanced" || card.type == "metallic" || card.type == "fertile"
	? `${validate_component(PlanetCard, "PlanetCard").$$render($$result, { planet: card, selectable, mini }, {}, {})}`
	: `${!["survey", "warfare", "colonize", "research", "producetrade", "politics"].includes(card.type)
		? `${validate_component(Tech, "Tech").$$render($$result, { card, selectable, mini }, {}, {})}`
		: `<div class="${"mdc-card " + escape(selectable
			? card.selected ? "selected" : "selectable"
			: "bordered") + " " + escape(mini ? "mini" : "") + " svelte-b1qm3o"}"${add_attribute("style", bg, 0)}><div class="${"title svelte-b1qm3o"}">${!key
			? `${validate_component(Icon, "Icon").$$render($$result, { type: "produce", size: "sm" }, {}, {})}
			${validate_component(Icon, "Icon").$$render($$result, { type: "trade", size: "sm" }, {}, {})}`
			: `${validate_component(Icon, "Icon").$$render($$result, { type: card.type, size: "sm" }, {}, {})}`}
		<p class="${"svelte-b1qm3o"}">${escape(label)}</p></div>
		<div class="${"logo svelte-b1qm3o"}"${add_attribute("style", logoBg, 0)}>${!key
			? `<div style="${"display:flex;flex-direction:row;"}" class="${"svelte-b1qm3o"}">${validate_component(Icon, "Icon").$$render($$result, { type: "produce", size: "sm" }, {}, {})}
				${validate_component(Icon, "Icon").$$render($$result, { type: "trade", size: "sm" }, {}, {})}</div>`
			: `<img src="${"./images/" + escape(key) + ".svg"}"${add_attribute("alt", key, 0)} class="${"svelte-b1qm3o"}">`}</div>
		
		${!mini
			? `<div class="${"desc svelte-b1qm3o"}">${desc[card.type] !== undefined
				? `<p class="${"action svelte-b1qm3o"}">${each(desc[card.type].desc.action.split("<icon>"), piece => `${[
						"survey",
						"warfare",
						"colonize",
						"research",
						"produce",
						"trade",
						"politics"
					].includes(piece)
					? `${validate_component(Icon, "Icon").$$render($$result, { type: piece, size: "sm" }, {}, {})}`
					: `${escape(piece)}`}`)}</p>
					<p class="${"role svelte-b1qm3o"}">${each(desc[card.type].desc.role.split("<icon>"), piece => `${[
						"survey",
						"warfare",
						"colonize",
						"research",
						"produce",
						"trade",
						"politics"
					].includes(piece)
					? `${validate_component(Icon, "Icon").$$render($$result, { type: piece, size: "sm" }, {}, {})}`
					: `${escape(piece)}`}`)}</p>`
				: ``}</div>
			<div class="${"pilecount svelte-b1qm3o"}">${escape(pilecount)} remaining</div>`
			: ``}</div>`}`}`;
});

/* src\components\App.svelte generated by Svelte v3.20.1 */

const css$5 = {
	code: ".show.svelte-6s0ykr.svelte-6s0ykr{border-radius:0% 50% 50% 0%}.show.svelte-6s0ykr.svelte-6s0ykr,.research.svelte-6s0ykr.svelte-6s0ykr{position:absolute;top:20vh;height:25vh;width:25vh;background:rgb(80,80,80);display:flex;align-items:center;justify-content:center;border:0.5px solid rgb(49, 158, 177);z-index:2}.research.svelte-6s0ykr.svelte-6s0ykr{border-radius:50% 0% 0% 50%;right:0%}.player.svelte-6s0ykr.svelte-6s0ykr{border-radius:5vh;background:rgb(80,80,80);display:flex;align-items:center}.stars.svelte-6s0ykr.svelte-6s0ykr{position:absolute;top:50%;left:50%;width:2px;height:2px;box-shadow:686px 466px #d4d4d4, 630px 365px whitesmoke, 1140px 224px #ededed, 1048px 344px white, 857px 70px #e3e3e3, 651px 400px #dbdbdb, 431px -107px #d1d1d1, -144px 151px #d4d4d4, 139px 402px #f7f7f7, 1090px -160px #c9c9c9, 1489px 75px #d6d6d6, -404px -113px #e0e0e0, -94px -358px #fafafa, 692px -211px #fcfcfc, 1414px 403px #e3e3e3, 445px -469px whitesmoke, 437px -173px #cfcfcf, -1474px 79px #e8e8e8, 286px -370px #e3e3e3, -389px -74px #f2f2f2, -386px 230px #cccccc, 1289px -415px #f0f0f0, 566px 6px #d1d1d1, 645px 53px #f7f7f7, 90px -232px #d4d4d4, 868px 214px #dedede, 633px -126px #c4c4c4, -1432px -324px #c4c4c4, 486px -11px #f0f0f0, 1484px 338px #f2f2f2, 1496px -127px #e8e8e8, 587px -446px #f0f0f0, 695px -142px #e6e6e6, 1145px 14px #f0f0f0, 339px -36px #d4d4d4, 193px -337px #ebebeb, -1364px -453px #ebebeb, 287px -252px whitesmoke, 888px 94px #fafafa, 485px 148px #c4c4c4, -619px -26px #d6d6d6, -1016px -251px #c9c9c9, -369px -387px #e3e3e3, -87px -433px #f2f2f2, -128px 162px #ededed, 285px 468px #cfcfcf, -715px -447px #cfcfcf, 1124px -404px #d9d9d9, 1209px 248px #e6e6e6, 831px -459px #f7f7f7, -1320px 390px #fafafa, -416px 189px #ebebeb, -1445px -2px #d6d6d6, -765px -181px #e3e3e3, -217px -471px #ededed, 1283px 76px #e6e6e6, -718px -474px #e0e0e0, 198px -71px #dbdbdb, 1009px -200px #f2f2f2, -1418px 200px #d4d4d4, 1354px -349px #dedede, -934px 243px #cfcfcf, -116px 465px #e8e8e8, -314px 446px #c9c9c9, -338px -311px #dbdbdb, 307px 92px #fcfcfc, -1414px 412px #c4c4c4, -1296px 472px #fcfcfc, -787px -76px #e0e0e0, -398px 466px #dbdbdb, -532px 144px #d6d6d6, -1449px -143px #c7c7c7, 755px -101px #d9d9d9, 222px 355px #dbdbdb, -1145px -318px #d4d4d4, 355px -463px whitesmoke, -807px -336px white, -398px -471px #c4c4c4, -935px 152px #d4d4d4, 1082px 166px #d1d1d1, 456px -159px #dedede, -818px 270px #dbdbdb, 63px 270px white, 60px 3px #c9c9c9, 560px 173px whitesmoke, 1217px -292px #ebebeb, -913px -419px #c2c2c2, -790px -386px #e6e6e6, 988px -472px #cfcfcf, -318px -476px #f2f2f2, -179px -282px #f7f7f7, 1079px -27px #fafafa, -1179px -466px #cccccc, 322px -193px #c7c7c7, -545px -269px #cccccc, -1188px 318px #e0e0e0, 19px 227px #d9d9d9, -1141px -437px #d9d9d9, 475px 86px #cfcfcf, 93px 208px #fcfcfc, -734px -222px #fcfcfc, -487px 61px #ebebeb, 1136px 107px #d6d6d6, 211px -291px #ebebeb, -1003px 91px #c2c2c2, 1379px 462px #e8e8e8, -85px -412px #e8e8e8, 549px -129px #cfcfcf, -269px -428px #c4c4c4, -442px 281px #c2c2c2, -116px -186px #c2c2c2, -1092px 252px #e8e8e8, 598px -47px #c4c4c4, 599px 430px #e0e0e0, 946px 225px #e3e3e3, 994px -441px #c9c9c9, -265px 4px #d4d4d4, 1376px -454px #d9d9d9, -963px -224px white, -202px -223px #cfcfcf, 1005px -201px #e3e3e3, -659px -302px #f2f2f2, -325px 397px #c2c2c2, -44px -391px #c2c2c2, 228px -223px #dedede, -603px 221px #dedede, -147px -397px #c9c9c9, 75px -394px #d9d9d9, -308px 239px #f0f0f0, -807px -74px #dbdbdb, -857px -235px #f0f0f0, 1055px 465px #d9d9d9, 307px 252px #cccccc, -1249px 25px #d1d1d1, 669px 304px #dbdbdb, -738px -341px #f0f0f0, -1063px -20px #ebebeb, -1476px -271px #e8e8e8, -20px -415px #cccccc, -1010px 338px #d4d4d4, -166px -3px #cfcfcf, 129px 7px #e0e0e0, 618px 10px #ededed, -1481px -273px #f2f2f2, -965px -193px #c4c4c4, 1271px 431px #f2f2f2, 991px -315px #c4c4c4, -918px 270px #d1d1d1, -1172px -216px #ebebeb, 1483px 449px #dedede, 728px 104px #e6e6e6, 144px -366px white, -656px 42px #f2f2f2, -527px -371px #f7f7f7, 76px 231px #d1d1d1, 1073px -183px #ededed, 520px 120px #e3e3e3, -163px 16px #cccccc, -1367px 82px #d6d6d6, -484px -131px whitesmoke, 279px -435px #e8e8e8, 446px -149px #e0e0e0, -735px 379px #ededed, -794px -442px #f2f2f2, 1314px 452px #c2c2c2, -1146px -65px #d6d6d6, -6px -390px #fafafa, 524px -183px #cccccc, 641px -148px #e3e3e3, 827px -341px #dedede, 150px 150px #d4d4d4, -1206px 417px #cccccc, -86px -451px #d1d1d1, 1144px -22px #e0e0e0, -336px -144px #c2c2c2, 436px 173px #c2c2c2, 506px -318px #fafafa, 167px 90px #cccccc, 128px 220px #ebebeb, -344px 424px #c2c2c2, 609px 393px #fcfcfc, 298px 211px #c2c2c2, -595px -339px #cccccc, 1184px -338px #c7c7c7, -1149px 118px #dbdbdb, -891px 14px #ebebeb, 107px -419px #d9d9d9, -233px -330px #f0f0f0, -1457px 443px #dedede, -217px 86px #d4d4d4, 1142px 83px #c4c4c4, 623px 309px #f7f7f7, 503px -216px #e8e8e8, -989px -176px #ebebeb, -269px 291px #e3e3e3, 483px 22px #fcfcfc, 1290px 302px #cccccc, -1016px -273px #c7c7c7, -1426px -65px #e3e3e3, 162px -341px #c7c7c7, -103px 335px #dbdbdb, 944px -441px #e3e3e3, 1151px 163px #e8e8e8, -1110px -42px #cfcfcf, -901px 15px #c4c4c4, 179px 60px #dbdbdb, 695px -320px #e3e3e3, -923px -348px white, 1102px 373px #e0e0e0, -823px 154px whitesmoke, -695px 424px #f2f2f2, 1421px -336px #d9d9d9, -947px -471px #fcfcfc, 1267px -410px #fafafa, 140px -470px #d1d1d1, -931px -476px #d4d4d4, 650px -354px #c7c7c7, -838px -426px #dedede, 810px 339px #d1d1d1, -1405px 343px #d9d9d9, 183px -17px #e3e3e3, -1275px -237px #f2f2f2, -666px -74px white, -1155px 61px #e6e6e6, -1478px 48px #ebebeb, -146px 288px #f0f0f0, 936px -277px #e3e3e3, 770px 409px #d6d6d6, 935px 443px #c4c4c4, -616px -408px #f0f0f0, -97px -268px #c9c9c9, -6px -292px white, 10px 262px #ebebeb, 791px 438px #f2f2f2, 470px -34px #d6d6d6, 679px -298px #d6d6d6, 1271px -303px whitesmoke, 480px 166px #e0e0e0, -502px -241px #d9d9d9, 599px -435px #d1d1d1, 1317px 176px #c2c2c2, 1124px -126px #d6d6d6, 17px -358px #c2c2c2, 1364px 232px #cccccc, -1176px -248px #c2c2c2, 1178px -175px white, 84px -98px #c9c9c9, -494px 305px #cccccc, -464px 476px whitesmoke, 269px -250px #e3e3e3, -381px 59px #e3e3e3, 805px -247px #e8e8e8, 103px -60px #d6d6d6, -1368px -210px #f0f0f0, 304px 39px whitesmoke, 1189px 457px #d9d9d9, -1171px 447px #ebebeb, -1447px -25px #f2f2f2, -507px -347px #f7f7f7, 835px -473px #cfcfcf, 544px 133px #cccccc, -254px 36px #c9c9c9, -134px 4px #d9d9d9, -727px -88px #ededed, 200px 92px #f7f7f7, -1372px -93px #e6e6e6, -16px -17px #d1d1d1, 707px -152px #cfcfcf, -442px 311px #c4c4c4, -77px 112px #ebebeb, -1488px 226px #c2c2c2, -1151px 431px white, 1180px -95px #d6d6d6, -836px -263px #f2f2f2, -35px 327px #fafafa, 1242px -238px #e8e8e8, -679px -273px #c4c4c4, 296px 401px #cfcfcf, -724px 70px #f0f0f0, -1350px -171px #f0f0f0, 53px 113px whitesmoke, 1112px -207px #fafafa, 276px -437px #d9d9d9, 513px 429px whitesmoke, 30px 343px #cccccc, 60px 86px #dbdbdb, 654px -157px #f2f2f2, 970px 299px #cfcfcf, -1247px -264px #ebebeb, -697px 301px #c7c7c7, -205px 50px #ebebeb, -332px 192px #fcfcfc, 1077px -374px #c9c9c9, -856px -449px #e6e6e6, 313px 389px #fcfcfc, 262px -378px #c7c7c7, -801px -206px #c7c7c7, -330px -8px #f7f7f7, 284px 3px #cccccc, -1264px 478px #cccccc, 1458px -160px whitesmoke, -906px -225px #dedede, 503px -98px #c7c7c7, 93px -84px #dedede, 1201px -347px #f7f7f7, 580px 265px #e0e0e0, 1495px -157px whitesmoke, -100px -255px #e8e8e8, 214px 462px #ebebeb, 20px -185px #ededed, 1134px -381px #ededed, -1263px 281px #ebebeb, -748px 113px #ebebeb, -1371px -137px whitesmoke, 13px -13px #cfcfcf, 1116px 101px #e6e6e6, -139px -410px #c7c7c7, 258px -83px #c9c9c9, -1336px 351px #e6e6e6, 502px 1px #e0e0e0, 268px -269px #c2c2c2, -549px 50px #c9c9c9, 1191px -363px #c7c7c7, -117px -271px #f2f2f2, 287px 288px #dbdbdb, -78px -95px #fafafa, -567px 228px #cfcfcf, -911px -285px #c2c2c2, 1242px -257px #fafafa, 1304px 336px #ededed, -66px -117px #c4c4c4, -560px 198px #c9c9c9, -1229px -245px whitesmoke, -980px 144px #d1d1d1, -982px -453px #ebebeb, -1056px 272px #d4d4d4, -30px -247px #e8e8e8, -741px 456px #d6d6d6, -1467px 397px #f2f2f2, -1341px 134px #dbdbdb, 1226px -408px #cfcfcf, 995px 345px #c7c7c7, 564px 167px #e6e6e6, -333px 33px #f7f7f7, -1198px 433px #ebebeb, 1308px 356px #e3e3e3, 997px 286px #d1d1d1, 734px 213px #ebebeb, -1256px -173px whitesmoke, 847px -200px #cfcfcf, -751px 429px #dedede;animation:svelte-6s0ykr-fly 3s linear infinite;transform-style:preserve-3d}.stars.svelte-6s0ykr.svelte-6s0ykr:before,.stars.svelte-6s0ykr.svelte-6s0ykr:after{content:\"\";position:absolute;width:inherit;height:inherit;box-shadow:inherit}.stars.svelte-6s0ykr.svelte-6s0ykr:before{transform:translateZ(-300px);animation:svelte-6s0ykr-fade1 3s linear infinite}.stars.svelte-6s0ykr.svelte-6s0ykr:after{transform:translateZ(-600px);animation:svelte-6s0ykr-fade2 3s linear infinite}@keyframes svelte-6s0ykr-fly{from{transform:translateZ(0px)}to{transform:translateZ(300px)}}@keyframes svelte-6s0ykr-fade1{from{opacity:.5}to{opacity:1}}@keyframes svelte-6s0ykr-fade2{from{opacity:0}to{opacity:.5}}.pass.svelte-6s0ykr.svelte-6s0ykr{border-radius:1vh;height:50px;min-width:200px;background:rgb(80,80,80);justify-content:center;align-items:center;display:flex}.messagetoplayer.svelte-6s0ykr.svelte-6s0ykr{text-align:center;background:rgb(80,80,80);border-radius:5vh;width:60%;margin-left:20%;position:absolute;top:75%}.selectable.svelte-6s0ykr.svelte-6s0ykr{border:solid rgb(114, 210, 223);border-width:1px}.selected.svelte-6s0ykr.svelte-6s0ykr{border:solid rgb(50, 190, 132);border-width:1px}.flex.svelte-6s0ykr.svelte-6s0ykr{display:flex;flex-direction:row;justify-content:center}.playerinfo.svelte-6s0ykr.svelte-6s0ykr{display:flex;flex-direction:row;justify-content:flex-start;width:100%;height:10%}.playingfield.svelte-6s0ykr.svelte-6s0ykr{overflow:hidden;min-height:100vh;min-width:100vw;min-height:100vh;min-width:100vw;background:radial-gradient(rgb(82,48,103), rgb(10,10,10));background-repeat:no-repeat;background-size:cover}.options.svelte-6s0ykr.svelte-6s0ykr,.talloptions.svelte-6s0ykr.svelte-6s0ykr{background-image:url(\"/images/embackground.png\");background-repeat:no-repeat;display:flex;flex-direction:row;justify-content:space-around;position:absolute;right:10%;top:50%;height:15%;width:80%;font-size:150%}.talloptions.svelte-6s0ykr.svelte-6s0ykr{height:30%}.ownedcards.svelte-6s0ykr.svelte-6s0ykr{display:flex;flex-direction:row;height:20%;position:absolute;top:80%}.hand.svelte-6s0ykr.svelte-6s0ykr{margin:auto;display:flex;flex-direction:row;max-width:90%;max-height:100%;overflow-x:scroll;overflow-y:hidden}.deck.svelte-6s0ykr.svelte-6s0ykr,.discard.svelte-6s0ykr.svelte-6s0ykr{border-radius:3vh;min-width:19vh;max-width:19vh;background-repeat:no-repeat;text-align:center;justify-content:center;align-items:center;display:flex;font-size:6vh}.deck.svelte-6s0ykr.svelte-6s0ykr{margin-right:auto;background-image:url('../images/card-draw.svg')}.discard.svelte-6s0ykr.svelte-6s0ykr{margin-left:auto;background-image:url('../images/card-burn.svg')}.zone.svelte-6s0ykr.svelte-6s0ykr{width:100%;overflow-x:scroll;overflow-y:hidden;display:flex;flex-direction:row}.centerrow.svelte-6s0ykr.svelte-6s0ykr{height:40%;position:absolute;top:15%}.researchrow.svelte-6s0ykr.svelte-6s0ykr{height:40%;align-items:center;padding-left:30vh;width:70vw}.researchrow>div.svelte-6s0ykr.svelte-6s0ykr{height:95%}.playedcards.svelte-6s0ykr.svelte-6s0ykr{height:20%;overflow-x:scroll;position:absolute;top:55%;justify-content:flex-start}.bordered.svelte-6s0ykr.svelte-6s0ykr{border:solid #000;border-width:1px}.svelte-6s0ykr.svelte-6s0ykr::-webkit-scrollbar{display:none}.playercountselector.svelte-6s0ykr>p.svelte-6s0ykr{height:33%;text-align:center;font-size:300%;background-color:rgb(34, 26, 59);border:solid #000;border-width:1px}.playercountselector.svelte-6s0ykr>input.svelte-6s0ykr{height:33%;text-align:center;width:100%;font-size:300%;background-color:rgb(34, 26, 59);border:solid #000;border-width:1px;color:rgb(49, 158, 177);padding:0px;margin:0px}.passtoplayer.svelte-6s0ykr.svelte-6s0ykr{height:80%;width:100%;top:10%;border:solid #000;border-width:1px;text-align:center;font-size:300%;color:white;background-color:rgb(34, 26, 59)}",
	map: "{\"version\":3,\"file\":\"App.svelte\",\"sources\":[\"App.svelte\"],\"sourcesContent\":[\"<script>\\r\\n\\timport Card from '../components/Card.svelte';\\r\\n\\timport Tech from '../components/Tech.svelte';\\r\\n\\timport PlanetCard from '../components/PlanetCard.svelte';\\r\\n\\r\\n\\tlet game, lobby, phases, corephases, actioncardphases, mounted = false, ws,\\r\\n\\tjstr = JSON.stringify, jprs = JSON.parse, log = console.log;\\r\\n\\timport { onMount,afterUpdate, beforeUpdate } from 'svelte';\\r\\n\\tbeforeUpdate(()=>{\\r\\n\\t})\\r\\n\\tafterUpdate(()=>{\\r\\n\\t\\tconsole.log(getActPlyr());\\r\\n\\t\\t// console.log('hand',game.players[0].hand.reduce((acc,cur) => acc+cur.name,''));\\r\\n\\t\\t// let card = game.players[0].hand[0];\\r\\n\\t\\t// console.log('removing ',card.name);\\r\\n\\t\\t// handToLimbo(game.players[0],card);\\r\\n\\t\\t// console.log('hand',game.players[0].hand.reduce((acc,cur) => acc+cur.name,''));\\r\\n\\t})\\r\\n\\tonMount(()=>{\\r\\n\\t\\t////////////////////////////////////////////////////////////////////////////////\\r\\n\\t\\tcorephases = [\\r\\n\\t\\t\\t/*colonize:*/ {\\r\\n\\t\\t\\t\\tactn:[\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Choose between Settling or Colonizing a Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\twrappedOffer([\\\"Colonize\\\",\\\"Settle Colonies\\\"]),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Choose an Unsettled Planet to Settle\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer(false,false,[\\\"unsettled_planets\\\"],\\\"subchoices\\\",finish),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Settle Colonies\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Settling your Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => settle_colonies(getSubChoice(),getActPlyr()),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Settle Colonies\\\"]\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Choose an Unsettled Planet to Colonize\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer(false,false,[\\\"unsettled_planets\\\"],\\\"subchoices\\\",finish),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Colonize\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Colonizing your Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => { colonize(getSubChoice(),getActPlyr().limbo,getActPlyr().limbo.filter(el => el.type == \\\"colonize\\\")[0]); finish(true);},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Colonize\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tlead:[\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose between Settling or Colonizing a Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\twrappedOffer([\\\"Colonize\\\",\\\"Settle Colonies\\\"]),\\r\\n\\t\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose an Unsettled Planet to Settle\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Settle Colonies\\\"],\\r\\n\\t\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Settling your Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {settle_colonies(getSubChoice(), getActPlyr() ); finish(); },\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Settle Colonies\\\"],\\r\\n\\t\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose an Unsettled Planet to Colonize\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Colonizing your Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (getSubChoice().name == \\\"Skip\\\") finish();\\r\\n\\t\\t\\t\\t\\t\\t\\tlet planet = getSubChoice();\\r\\n\\t\\t\\t\\t\\t\\t\\tif (planet.hosted_colonies.reduce( (acc, cur) => acc + cur.icons.colonize,0) >= planet.settle_cost)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcolonize( planet, getActPlyr().limbo,getActPlyr().limbo.filter(el => el.type == \\\"colonize\\\")[0]);\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tfllw:[\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Choose between Settling or Colonizing a Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (0 == getActPlyr().permanents.filter(e => \\\"bureaucracy\\\" == e.type).length) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgame.choices = [{name: \\\"Colonize\\\"}];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfinish(!0);\\r\\n\\t\\t\\t\\t\\t\\t\\t} else simpleOffer([\\\"Colonize\\\",\\\"Settle Colonies\\\"])\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Choose an Unsettled Planet to Settle\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Settle Colonies\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Settling your Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => { settle_colonies(getSubChoice(), getActPlyr()); finish(!0);},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Settle Colonies\\\"],\\r\\n\\t\\t\\t\\t\\t), \\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Choose an Unsettled Planet to Colonize\\\", [\\\"colonize\\\"], \\r\\n\\t\\t\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Colonize\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Colonizing your Planet\\\", [\\\"colonize\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tlet planet = getSubChoices().find((planet)=>planet.hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize ) >= planet.settle_cost);\\r\\n\\t\\t\\t\\t\\t\\t\\tcolonize( planet, getActPlyr().limbo,getActPlyr().limbo.filter(el => el.type == \\\"colonize\\\")[0]);\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Colonize\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tclnp:[ ], \\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t/*/producetrade:/*/ {\\r\\n\\t\\t\\t\\tactn:[\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Choose between Producing or Trading Resources\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\twrappedOffer([\\\"produce\\\",\\\"trade\\\" ]),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Choose a Planet to Produce Resources on\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer( false, false , [\\\"settled_&_conquered_planets\\\"], \\\"subchoices\\\", finish ),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"produce\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Producing a Resource\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => { produce(getSubChoices()); finish(true);},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"produce\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Choose a Planet to Trade Resources from\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer( false, false, [\\\"settled_&_conquered_planets\\\"], \\\"subchoices\\\", finish),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"trade\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Trading a Resource\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {trade(getSubChoices(),getActPlyr()); finish();},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"trade\\\"],\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tlead:[\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose between Producing or Trading Resources\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer( false , false , [\\\"options\\\",[{ name: \\\"produce\\\" }, { name: \\\"trade\\\" }]], \\\"choices\\\", finish ),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose a Planet to Produce Resources on\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer( true , true , [ \\\"settled_&_conquered_planets\\\" ], \\\"subchoices\\\", finish ),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"produce\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Producing a Resource\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().activerole = \\\"produce\\\";\\r\\n\\t\\t\\t\\t\\t\\t\\tlet prd = produce( getSubChoices(), getActPlyr().bstIcons.produce );\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( getActvActn() == \\\"genetic_engineering\\\" ) prd.forEach((plyr)=>plyr = [...plyr,{influence:[...plyr.influence,game.influence.pop()]}]);\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"produce\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose a Planet to Trade Resources from\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer( true , true , [ \\\"settled_&_conquered_planets\\\" ],\\\"subchoices\\\", finish ),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"trade\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Trading a Resource\\\", [\\\"producetrade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().activerole = \\\"trade\\\";\\r\\n\\t\\t\\t\\t\\t\\t\\tlet prd = trade(getSubChoices(),getActPlyr(),getActPlyr().bstIcons.trade );\\r\\n\\t\\t\\t\\t\\t\\t\\tif (getActvActn() == \\\"diverse_markets\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let i in prd) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (prd[i] > 1) {getActPlyr().influence.push(game.influence.pop());\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tif (getActvActn() == \\\"specialization\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let i in Array.from(prd[getActPlyr().specialization])) { //what on earth is this doing?\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgetActPlyr().influence.push(game.influence.pop());\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"trade\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tfllw:[\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Choose a Planet to Produce Resources on\\\", [\\\"produce\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer(!0, !0, [\\\"settled_&_conquered_planets\\\"], \\\"subchoices\\\", finish),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Producing a Resource\\\", [\\\"produce\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tlet e = game;\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().activerole = \\\"produce\\\";\\r\\n\\t\\t\\t\\t\\t\\t\\tproduce(e.subchoices, e.players[game.acting_player_index].bstIcons.produce); finish(!0)\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Choose a Planet to Trade Resources from\\\", [\\\"trade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer(!0, !0, [\\\"settled_&_conquered_planets\\\"], \\\"subchoices\\\", finish),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Trading a Resource\\\", [\\\"trade\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tlet e = game;\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().activerole = \\\"trade\\\";\\r\\n\\t\\t\\t\\t\\t\\t\\ttrade(e.subchoices, getActPlyr(), getActPlyr().bstIcons.trade);\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(!0)\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tclnp:[],\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t/*/politics:/*/ {\\r\\n\\t\\t\\t\\tactn:[ \\r\\n\\t\\t\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose a Role Card to Replace Politics with\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"politics\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer(false, false, [\\\"rolecards\\\"], \\\"choices\\\", finish ),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Swapping the Role Card for your Politics Card\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"politics\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {politics(getActPlyr().limbo.filter(el => el.type == \\\"politics\\\")[0], getChoices()[0], getActPlyr() ); finish(true);},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tlead:[],\\r\\n\\t\\t\\t\\tfllw:[],\\r\\n\\t\\t\\t\\tclnp:[],\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t/*/research:/*/ {\\r\\n\\t\\t\\t\\tactn:[\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Choose up to 2 Cards from your Hand to Remove from the Game\\\", [\\\"research\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer( false, true,[\\\"hand\\\"], \\\"choices\\\", finish),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Removing your Cards from the Game\\\", [\\\"research\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {research(getChoices(),getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tlead:[\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose a Technology to Research\\\", [\\\"research\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer( true , false , [\\\"research\\\" ], \\\"choices\\\", finish   ),\\r\\n\\t\\t\\t\\t\\t), \\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Researching your Technology\\\", [\\\"research\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (getChoice() == \\\"Skip\\\") {finish(true);return;}\\r\\n\\t\\t\\t\\t\\t\\t\\tlet card = getChoices()[0];\\r\\n\\t\\t\\t\\t\\t\\t\\tlet p = { advanced: 0, metallic: 0, fertile: 0 };\\r\\n\\t\\t\\t\\t\\t\\t\\t[...getActPlyr().settled_planets, ...getActPlyr().conquered_planets].map(el => p[el.type]++);\\r\\n\\t\\t\\t\\t\\t\\t\\tlet condition = Object.values(card.planet_requirements).reduce((acc,cur,i)=>(acc) ? cur > p[Object.keys(p)[i]] : acc,true)\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( condition && getActPlyr().bstIcons.research >= card.research_cost ) \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tplay(game.research_deck, (card.is_permanent) ?  getActPlyr().permanents : getActPlyr().limbo, (card.is_permanent) ? \\\"\\\" : \\\"discard\\\", card.id);\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tfllw:[\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Choose a Technology to Research\\\", [\\\"research\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer(!0, !1, [\\\"research\\\"], \\\"choices\\\", finish),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase( \\\"Researching your Technology\\\", [\\\"survey\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tlet e = game;\\r\\n\\t\\t\\t\\t\\t\\t\\tif (\\\"Skip\\\" != e.choices[0].name) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tlet a = { advanced: 0, metallic: 0, fertile: 0 };\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[...e.players[game.acting_player_index].settled_planets, ...e.players[game.acting_player_index].conquered_planets].map(e => {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ta[e.type]++\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tlet p = !0;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfor (let i in e.choices[0].planet_requirements) e.choices[0].planet_requirements[i] > a[i] && (p = !1);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tp && e.players[game.acting_player_index].bstIcons.research >= e.choices[0].research_cost && play(e.research_deck, e.players[game.acting_player_index].limbo, \\\"discard\\\", e.choices[0].id)\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(!0);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tclnp:[ ],\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t/*/survey:/*/ {\\r\\n\\t\\t\\t\\tactn:[        \\r\\n\\t\\t\\t\\t\\tgenActionPhase( \\\"Surveying your Empire\\\", [\\\"survey\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {survey(getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tlead:[\\r\\n\\t\\t\\t\\t\\tgenLeadPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose a Planet from your Galaxy to Explore\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"survey\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( let i = 0; i < getActPlyr().bstIcons.survey; i++ ) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\texplore_planet( getActPlyr() );\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\toffer( true , false , [ \\\"options\\\", game.options ], \\\"choices\\\",finish   );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Surveying your Empire\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"survey\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (getChoice() == \\\"Skip\\\") finish();\\r\\n\\t\\t\\t\\t\\t\\t\\tcatalog_planet( getActPlyr() );\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tfllw:[\\r\\n\\t\\t\\t\\t\\tgenFollowPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose a Planet from your Galaxy to Explore\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"survey\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tlet e = game;\\r\\n\\t\\t\\t\\t\\t\\t\\tfor (let a = 0; a < e.players[game.acting_player_index].bstIcons.survey - 1; a++) explore_planet(e.players[game.acting_player_index]);\\r\\n\\t\\t\\t\\t\\t\\t\\toffer(!0, !1, [\\\"options\\\"], \\\"choices\\\", finish)\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Surveying your Empire\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"survey\\\"], \\r\\n\\t\\t\\t\\t\\t\\t() => { if (getChoice() == \\\"Skip\\\") finish(); catalog_planet(game.players[game.acting_player_index]); finish(!0)},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tclnp:[\\r\\n\\t\\t\\t\\t\\t{\\\"\\\":\\r\\n\\t\\t\\t\\t\\t()=>{}},\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t/*/warfare:/*/ {\\r\\n\\t\\t\\t\\tactn:[\\r\\n\\t\\t\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose between Collecting a Starfighter or Conquering a Planet\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\twrappedOffer([\\\"Conquer a Planet\\\", \\\"Collect a Starfighter\\\"]),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Adding a Starfighter to your Fleet\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {warfare(getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Collect a Starfighter\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose a Planet to Conquer\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offer(false, false, [\\\"unsettled_planets\\\"], \\\"subchoices\\\", finish),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Conquer a Planet\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Conquering your planet\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {conquer(getSubChoice(),getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Conquer a Planet\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tlead:[\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose between Collecting Starfighters or Conquering a Planet\\\", [\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\twrappedOffer([\\\"Conquer a Planet\\\", \\\"Collect Starfighters\\\"]),\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Adding Starfighters to your Fleet\\\", [\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\trange(1,getActPlyr().bstIcons.warfare).forEach( ()=>warfare( getActPlyr() ) );\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Collect Starfighters\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Choose a Planet to Conquer\\\", [\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Conquer a Planet\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenLeadPhase( \\\"Conquering your planet\\\", [\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tconquer(getSubChoice(), getActPlyr() );\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Conquer a Planet\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tfllw:[\\r\\n\\t\\t\\t\\t\\tgenFollowPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose between Collecting Starfighters or Conquering a Planet\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (0 == game.players[game.acting_player_index].permanents.filter(e => \\\"bureaucracy\\\" == e.type).length) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tlet e = game;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\te.choices = [{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tname: \\\"Collect Starfighters\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}];  finish(!0);\\r\\n\\t\\t\\t\\t\\t\\t\\t} else offer(!1, !1, [\\\"options\\\", [{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tname: \\\"Conquer a Planet\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t}, {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tname: \\\"Collect Starfighters\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t}]], \\\"choices\\\", finish);\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Adding Starfighters to your Fleet\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"warfare\\\"],\\r\\n\\t\\t\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tfor (let e = 0; e < game.players[game.acting_player_index].bstIcons.warfare; e++) warfare(game.players[game.acting_player_index]);\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(!0)\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Collect Starfighters\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose a Planet to Conquer\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"warfare\\\"], \\r\\n\\t\\t\\t\\t\\t\\t() => offer(!1, !1, [\\\"unsettled_planets\\\"], \\\"subchoices\\\", finish),\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Conquer a Planet\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\tgenFollowPhase(\\r\\n\\t\\t\\t\\t\\t\\t\\\"Conquering your planet\\\",\\r\\n\\t\\t\\t\\t\\t\\t[\\\"warfare\\\"], \\r\\n\\t\\t\\t\\t\\t\\t() => {conquer(game.subchoices[0], game.players[game.acting_player_index]); finish(!0);},\\r\\n\\t\\t\\t\\t\\t\\t[\\\"Conquer a Planet\\\"],\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t\\tclnp:[\\r\\n\\t\\t\\t\\t\\t{\\\"\\\":\\r\\n\\t\\t\\t\\t\\t()=>{}},\\r\\n\\t\\t\\t\\t],\\r\\n\\t\\t\\t},\\r\\n\\t\\t];\\r\\n\\t\\tactioncardphases = [\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// improved_colonize \\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose wether or not to Settle a Planet\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_colonize\\\"],\\r\\n\\t\\t\\t\\t() => offer( true, false, [ \\\"options\\\", [{ name: \\\"settle\\\" }, { name: \\\"Skip\\\" }]], \\\"choices\\\", finish)\\r\\n\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose a Planet to Settle\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_colonize\\\"],\\r\\n\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t[\\\"settle\\\"],\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Settling your Planet\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_colonize\\\"],\\r\\n\\t\\t\\t\\t() => { settle_colonies(getSubChoice(),getActvPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t[\\\"settle\\\"],\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose between Settling or Colonizing a Planet\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_colonize\\\"],\\r\\n\\t\\t\\t\\twrappedOffer([\\\"Colonize\\\" ,\\\"Settle Colonies\\\"]),\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose an Unsettled Planet to Settle\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_colonize\\\"],\\r\\n\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t[\\\"Settle Colonies\\\"],\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Settling your Planet\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_colonize\\\"],\\r\\n\\t\\t\\t\\t() => { settle_colonies( getSubChoice(), getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t[\\\"Settle Colonies\\\"],\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose an Unsettled Planet to Colonize\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_colonize\\\"],\\r\\n\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t[\\\"Colonize\\\"],\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Colonizing your Planet\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_colonize\\\"],\\r\\n\\t\\t\\t\\t() => { colonize( getSubChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == \\\"improved_colonize\\\")[0]); finish(true);},\\r\\n\\t\\t\\t\\t[\\\"Colonize\\\"],\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// improved_produce : 4\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose an empty Production Zone to Produce in\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_production\\\"],\\r\\n\\t\\t\\t\\t() => offer( true, false, [\\\"settled_&_conquered_planets\\\"], \\\"choices\\\" , finish),\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Producing your Resource\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_production\\\"],\\r\\n\\t\\t\\t\\t() => { \\r\\n\\t\\t\\t\\t\\tif (getChoice() == \\\"Skip\\\") finish(); produce(game.choices); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose an empty Production Zone to Produce in\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_production\\\"],\\r\\n\\t\\t\\t\\t() => offer(true, false, [\\\"settled_&_conquered_planets\\\"], \\\"choices\\\", finish),\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Producing your Resource\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_production\\\"],\\r\\n\\t\\t\\t\\t() => { if (getChoice() == \\\"Skip\\\") finish();produce(game.choices); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// improved_trade : 1\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Trading your Stocks and Bonds\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_trade\\\"],\\r\\n\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\tgame.players[game.acting_player_index].influence.push( game.influence.pop() );\\r\\n\\t\\t\\t\\t\\tfinish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// improved_research : 2\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose up to 3 Cards from your Hand to Remove from the Game\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_research\\\"],\\r\\n\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\tdraw(getActPlyr());\\r\\n\\t\\t\\t\\t\\toffer(false, true, [\\\"hand\\\"], \\\"choices\\\", finish);}\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Removing your Cards from the Game\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_research\\\"],\\r\\n\\t\\t\\t\\t() => {research(getChoices(), getActPlyr(), 3); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// improved_survey : 1\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Drawing your Cards\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_survey\\\"],\\r\\n\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\tdraw( getActPlyr() ); draw( getActPlyr() ); draw( getActPlyr() ); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// improved_warfare : 4\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose between Collecting a Starfighter or Conquering a Planet\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_warfare\\\"],\\r\\n\\t\\t\\t\\twrappedOffer(\\\"Conquer a Planet\\\",\\\"Collect a Starfighter\\\"),\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Adding a Starfighter to your Fleet\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_warfare\\\"],\\r\\n\\t\\t\\t\\t() => {warfare(getActPlyr()); warfare(getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t[\\\"Collect a Starfighter\\\"]\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose a Planet to Conquer\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_warfare\\\"],\\r\\n\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t[\\\"Conquer a Planet\\\"]\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Conquering your planet\\\",\\r\\n\\t\\t\\t\\t[\\\"improved_warfare\\\"],\\r\\n\\t\\t\\t\\t() => { conquer(getSubChoice(),getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t[\\\"Conquer a Planet\\\"]\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// mobilization : 4\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Collecting your Star Fighters\\\",\\r\\n\\t\\t\\t\\t[\\\"mobilization\\\"],\\r\\n\\t\\t\\t\\t() => { warfare(getActPlyr()); warfare(getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// survey_team : 1\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Adding Top Card of the Planet deck to your Empire\\\",\\r\\n\\t\\t\\t\\t[\\\"survey_team\\\"],\\r\\n\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\tlet { game: game, game: { acting_player: player, planet_deck: planet_deck } } = get();\\r\\n\\t\\t\\t\\t\\tplayer = game.players[game.acting_player_index];\\r\\n\\t\\t\\t\\t\\tlet planet = planet_deck.pop();\\r\\n\\t\\t\\t\\t\\tplayer.unsettled_planets.push(planet);\\r\\n\\t\\t\\t\\t\\tfinish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// war_path : 4\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose a Planet to Conquer\\\",\\r\\n\\t\\t\\t\\t[\\\"war_path\\\"],\\r\\n\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Conquering your planet\\\",\\r\\n\\t\\t\\t\\t[\\\"war_path\\\"],\\r\\n\\t\\t\\t\\t() => { if (getChoice() == \\\"Skip\\\") finish(); conquer(getChoice(),getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose a Planet to Conquer\\\",\\r\\n\\t\\t\\t\\t[\\\"war_path\\\"],\\r\\n\\t\\t\\t\\t() => offerUnsettled(),\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Conquering your planet\\\",\\r\\n\\t\\t\\t\\t[\\\"war_path\\\"],\\r\\n\\t\\t\\t\\t() => { if (getChoice() == \\\"Skip\\\") finish(); conquer(getChoice(),getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// terraforming : 2\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose an Unsettled Planet to Terraform\\\",\\r\\n\\t\\t\\t\\t[\\\"terraforming\\\"],\\r\\n\\t\\t\\t\\t() => offerUnsettled()\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Terraforming your Planet\\\",\\r\\n\\t\\t\\t\\t[\\\"terraforming\\\"],\\r\\n\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\tcolonize( getChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == \\\"terraforming\\\")[0]);\\r\\n\\t\\t\\t\\t\\tif (getChoice().hosted_colonies.length > 0) {\\r\\n\\t\\t\\t\\t\\t\\tlet c = getChoice().hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize,0);\\r\\n\\t\\t\\t\\t\\t\\tif (c >= getChoice().settle_cost) settle_colonies(getChoice(),getActPlyr()); }\\r\\n\\t\\t\\t\\t\\tfinish(true); },\\r\\n\\t\\t\\t\\t[\\\"Colonize\\\"]\\r\\n\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// genetic_engineering :1\\r\\n\\t\\t\\t// UNIMPLIMENTED\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Engineering Genetics\\\",\\r\\n\\t\\t\\t\\t[\\\"genetic_engineering\\\"],\\r\\n\\t\\t\\t\\tfinish,\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// artificial_intelligence : 4\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Select a Role Card to take into your Hand\\\",\\r\\n\\t\\t\\t\\t[\\\"artificial_intelligence\\\"],\\r\\n\\t\\t\\t\\t() => offer( false,  false, [\\\"rolecards\\\"], \\\"choices\\\", finish)\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Adding Role Card to your Machine Learning Model\\\",\\r\\n\\t\\t\\t\\t[\\\"artificial_intelligence\\\"],\\r\\n\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\tlet { game: game, game: { acting_player: player } } = get();\\r\\n\\t\\t\\t\\t\\tplayer = game.players[game.acting_player_index];\\r\\n\\t\\t\\t\\t\\tif (game.stacks.pilecount[game.choices[0].type] >= 1) {\\r\\n\\t\\t\\t\\t\\t\\tplayer.hand.push(\\r\\n\\t\\t\\t\\t\\t\\t\\tObject.assign(\\r\\n\\t\\t\\t\\t\\t\\t\\t{ id: gen_unique_id() },\\r\\n\\t\\t\\t\\t\\t\\t\\tgame.stacks.rolecards[game.stacks[game.choices[0].type]]\\r\\n\\t\\t\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\tgame.stacks.pilecount[game.choices[0].type]--;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Select a Role Card to take into your Hand\\\",\\r\\n\\t\\t\\t\\t[\\\"artificial_intelligence\\\"],\\r\\n\\t\\t\\t\\t() => offer( false,  false, [ \\\"rolecards\\\" ], \\\"choices\\\", finish)\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Adding Role Card to your Machine Learning Model\\\",\\r\\n\\t\\t\\t\\t[\\\"artificial_intelligence\\\"],\\r\\n\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\tlet { game: game, game: { acting_player: player } } = get();\\r\\n\\t\\t\\t\\t\\tplayer = game.players[game.acting_player_index];\\r\\n\\t\\t\\t\\t\\tif (game.stacks.pilecount[game.choices[0].type] >= 1) {\\r\\n\\t\\t\\t\\t\\t\\tplayer.hand.push(\\r\\n\\t\\t\\t\\t\\t\\t\\tObject.assign(\\r\\n\\t\\t\\t\\t\\t\\t\\t{ id: gen_unique_id() },\\r\\n\\t\\t\\t\\t\\t\\t\\tgame.stacks.rolecards[game.stacks[game.choices[0].type]]\\r\\n\\t\\t\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\tgame.stacks.pilecount[game.choices[0].type]--;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t}, \\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// diverse_markets : 1\\r\\n\\t\\t\\t// UNIMPLIMENTED\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Diversifying Markets\\\",\\r\\n\\t\\t\\t\\t[\\\"diverse_markets\\\"],\\r\\n\\t\\t\\t\\tfinish\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// specialization : 2\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose a Resource to Specialize in\\\",\\r\\n\\t\\t\\t\\t[\\\"specialization\\\"],\\r\\n\\t\\t\\t\\twrappedOffer(\\\"red\\\",\\\"blue\\\",\\\"gren\\\",\\\"purple\\\")\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Specializaing in your Seleted Resource\\\",\\r\\n\\t\\t\\t\\t[\\\"specialization\\\"],\\r\\n\\t\\t\\t\\t() => { getActPlyr().specialization = getChoice(); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t// #######################################################################################################################################################################################\\r\\n\\t\\t\\t// data_network : 3\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Drawing Your Cards\\\",\\r\\n\\t\\t\\t\\t[\\\"data_network\\\"],\\r\\n\\t\\t\\t\\t() => { draw(getActPlyr()); draw(getActPlyr()); finish(true);},\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Choose any number of Cards from your Hand to Remove from the Game\\\",\\r\\n\\t\\t\\t\\t[\\\"data_network\\\"],\\r\\n\\t\\t\\t\\t() => offer( true, true, [ \\\"hand\\\" ], \\\"choices\\\", finish),\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\tgenActionPhase(\\r\\n\\t\\t\\t\\t\\\"Removing the Selected Cards from the Game\\\",\\r\\n\\t\\t\\t\\t[\\\"data_network\\\"],\\r\\n\\t\\t\\t\\t() => {\\r\\n\\t\\t\\t\\t\\tif (getChoice() == \\\"Skip\\\") finish();\\r\\n\\t\\t\\t\\t\\tlet { game: game, game: { choices: choices, acting_player: player } } = get();\\r\\n\\t\\t\\t\\t\\tplayer = game.players[game.acting_player_index];\\r\\n\\t\\t\\t\\t\\tresearch(choices, player, choices.length); finish(true);},\\r\\n\\t\\t\\t)\\r\\n\\t\\t];\\r\\n\\t\\tlet nonce = 0;\\r\\n\\t\\tgame = {\\r\\n\\t\\t\\tminPlyrs: 2,\\r\\n\\t\\t\\tmaaxPlyrs: 4,\\r\\n\\t\\t\\tpasstoplayer: false,\\r\\n\\t\\t\\tnonce: 0,\\r\\n\\t\\t\\tdisplayinfo: {\\r\\n\\t\\t\\t\\tselectionzone: \\\"\\\",\\r\\n\\t\\t\\t\\tdragged: null,\\r\\n\\t\\t\\t\\tshowoptiontoskip: false,\\r\\n\\t\\t\\t\\talwMulti: false,\\r\\n\\t\\t\\t\\tcenter_or_research: true,\\r\\n\\t\\t\\t\\tcenter_or_planets: true, //true = center, false = planets\\r\\n\\t\\t\\t\\tchoicelabel: \\\"choices\\\"\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tsubchoices: [],\\r\\n\\t\\t\\tinfluence: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\\r\\n\\t\\t\\tmessagetoplayer: ['Waiting for other players to join'],\\r\\n\\t\\t\\toptions: [],\\r\\n\\t\\t\\tplanet_deck: [],\\r\\n\\t\\t\\tcurrentphase: -4,\\r\\n\\t\\t\\tleading_player_index: 0,\\r\\n\\t\\t\\tacting_player_index: 0,\\r\\n\\t\\t\\tnumber_of_players: 2,\\r\\n\\t\\t\\tstarted: false,\\r\\n\\t\\t\\tgamephases: [\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\tstart: [\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"set active player\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif (game.started) {\\r\\n\\t\\t\\t\\t\\t\\tgame.started = true;\\r\\n\\t\\t\\t\\t\\t\\tgame.passt = false;\\r\\n\\t\\t\\t\\t\\t\\tgame.leading_player_index =\\r\\n\\t\\t\\t\\t\\t\\t\\t(game.leading_player_index + 1) % game.number_of_players;\\r\\n\\t\\t\\t\\t\\t\\tgame.acting_player_index = game.leading_player_index;\\r\\n\\t\\t\\t\\t\\t\\tgame.leadingplayer = game.players[game.leading_player_index];\\r\\n\\t\\t\\t\\t\\t\\tgame.acting_player = game.players[game.leading_player_index];\\r\\n\\t\\t\\t\\t\\t\\topenFullscreen();\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif (game.leadingplayer !== undefined) {\\r\\n\\t\\t\\t\\t\\t\\tgame.players[game.leading_player_index].rounds++;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tlet planets = [\\r\\n\\t\\t\\t\\t\\t\\t...game.players[game.leading_player_index].settled_planets,\\r\\n\\t\\t\\t\\t\\t\\t...game.players[game.leading_player_index].conquered_planets\\r\\n\\t\\t\\t\\t\\t\\t];\\r\\n\\t\\t\\t\\t\\t\\tfor (let p in planets) {\\r\\n\\t\\t\\t\\t\\t\\ttallyIcons(game.players[game.leading_player_index],planets[p]);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tfor (let p in game.players[game.leading_player_index].permanents) {\\r\\n\\t\\t\\t\\t\\t\\ttallyIcons(game.players[game.leading_player_index],permanents[p]);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tProductivity: () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().permanents.filter(el => el.type == \\\"productivity\\\").length != 0 ) {\\r\\n\\t\\t\\t\\t\\t\\tgetActPlyr().actionrolesequence = \\\"aar\\\";\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Choose an Order to Perform Your Action and Role Phases\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif (getActPlyr().permanents.filter(el => el.type == \\\"logistics\\\" ).length != 0 ) {\\r\\n\\t\\t\\t\\t\\t\\tlet options = [\\r\\n\\t\\t\\t\\t\\t\\t\\t\\\"Action Phase then Role Phase\\\",\\r\\n\\t\\t\\t\\t\\t\\t\\t\\\"Role Phase then Action Phase\\\"\\r\\n\\t\\t\\t\\t\\t\\t];\\r\\n\\t\\t\\t\\t\\t\\tif (getActPlyr().permanents.filter(el => el.type == \\\"productivity\\\").length != 0 ) {\\r\\n\\t\\t\\t\\t\\t\\t\\t//add aar,ara,and raa as options\\r\\n\\t\\t\\t\\t\\t\\t\\toptions.push(\\\"Action Phase then another Action Phase then Role Phase\\\");\\r\\n\\t\\t\\t\\t\\t\\t\\toptions.push(\\\"Action Phase then Role Phase then another Action Phase\\\");\\r\\n\\t\\t\\t\\t\\t\\t\\toptions.push(\\\"Role Phase then Action Phase then another Action Phase\\\");\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t//offer ar or ra\\r\\n\\t\\t\\t\\t\\t\\tsimpleOffer(options)\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tLogistics: () => {\\r\\n\\t\\t\\t\\t\\t\\tif (getActPlyr().permanents.filter(el => el.type == \\\"logistics\\\").length != 0 ) {\\r\\n\\t\\t\\t\\t\\t\\tif (getChoice() == \\\"Action Phase then Role Phase\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().actionrolesequence = \\\"ar\\\";\\r\\n\\t\\t\\t\\t\\t\\t} else if ( getChoice() == \\\"Role Phase then Action Phase\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().actionrolesequence = \\\"ra\\\";\\r\\n\\t\\t\\t\\t\\t\\t} else if ( getChoice() == \\\"Action Phase then another Action Phase then Role Phase\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().actionrolesequence = \\\"aar\\\";\\r\\n\\t\\t\\t\\t\\t\\t} else if ( getChoice() == \\\"Action Phase then Role Phase then another Action Phase\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().actionrolesequence = \\\"ara\\\";\\r\\n\\t\\t\\t\\t\\t\\t} else if ( getChoice() == \\\"Role Phase then Action Phase then another Action Phase\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().actionrolesequence = \\\"raa\\\";\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t]\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\taction: [\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose an Action to Play\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\toffer( true, false, [ \\\"hand\\\" ], \\\"choices\\\", finish );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\\"Playing your Action\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif (getChoice() == \\\"Skip\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\tlet card = getChoices()[0], plyr = getActPlyr();\\r\\n\\t\\t\\t\\t\\t\\t\\tplyr.activeaction = card.type;\\r\\n\\t\\t\\t\\t\\t\\t\\thandToLimbo(plyr,card);\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true)\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t...getActionCorePhases(),\\r\\n\\t\\t\\t\\t\\t...getActionCardPhases()\\r\\n\\t\\t\\t\\t\\t]\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\trole: [\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Choose a Role Card to Lead with\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\toffer( false , false, [ \\\"rolecards\\\" ], \\\"choices\\\", finish );\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Performing your Role\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tlet card = getChoices()[0];\\r\\n\\t\\t\\t\\t\\t\\tif (game.stacks.pilecount[card.type] >= 1) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (card.type==\\\"producetrade\\\"){\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgetActPlyr().bstIcons[ \\\"produce\\\" ]++;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgetActPlyr().bstIcons[ \\\"trade\\\" ]++;\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgetActPlyr().bstIcons[ card.type ]++;\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tlet newcard = Object.assign(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tid: gen_unique_id(),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfinDest: \\\"discard\\\",\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tselected: true\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgame.stacks.rolecards[game.stacks[card.type]]\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().limbo = [ ...getActPlyr().limbo, newcard];\\r\\n\\t\\t\\t\\t\\t\\t\\tgame.stacks.pilecount[card.type]--;\\r\\n\\t\\t\\t\\t\\t\\t} else if (card.type != \\\"colonize\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().bstIcons[ card.type ]++;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tgetActPlyr().activerole = card.type;\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t]\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\tlead: [\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\\"Choose cards from your hand to Boost the effectiveness of your Role\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\t\\toffer( true , true, [ \\\"hand\\\" ], \\\"choices\\\", finish );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\\"Boosting your Role\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (getChoice() == \\\"Skip\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgetChoices().forEach( (card) => {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tboostWithIcons(getActPlyr(),card);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcard.finDest='discard';\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t//TODO: tally up icons on planets\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t//TODO: tally up icons on technologies\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t...getLeadCorePhases(),\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Pass the device to the Next Player\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tgame.displayinfo.selectionzone = \\\"\\\";\\r\\n\\t\\t\\t\\t\\t\\tgame.passp = true;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"You passed Priority\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tgame.passp = false;\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t]\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\tfollow: [\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Choose between Following or Dissent the Leading Role\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tsimpleOffer([\\\"dissent\\\",getLeadPlyr().activerole]);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tDissenting: () => {\\r\\n\\t\\t\\t\\t\\t\\tgetActPlyr().activerole = getChoice();\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().activerole != \\\"dissent\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\tlet card = getChoices()[0];\\r\\n\\t\\t\\t\\t\\t\\tif (game.stacks.pilecount[card.name] >= 1) {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().bstIcons[ card.name ]++;\\r\\n\\t\\t\\t\\t\\t\\t\\tlet newcard = Object.assign(\\r\\n\\t\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tid: gen_unique_id(),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfinDest: \\\"discard\\\",\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tselected: true\\r\\n\\t\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\t\\tgame.stacks.rolecards[game.stacks[card.name]]\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().limbo = [...getActPlyr().limbo, newcard];\\r\\n\\t\\t\\t\\t\\t\\t\\tgame.stacks.pilecount[card.name]--;\\r\\n\\t\\t\\t\\t\\t\\t} else if (card.name != \\\"colonize\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tboostWithIcons(getActPlyr(),card);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tdraw( getActPlyr() );\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().permanents.filter(el => el.type == \\\"dissension\\\").length != 0 ) {\\r\\n\\t\\t\\t\\t\\t\\t\\tdraw( getActPlyr() );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}, //will auto pass to next phase if follow has been selected\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Choose cards from your hand to Boost the effectiveness of your Role\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr() .activerole == \\\"dissent\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\toffer( true , true , [ \\\"hand\\\" ], \\\"choices\\\",finish   );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Boosting your Role\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().activerole == \\\"dissent\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tif (getChoice() == \\\"Skip\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\tlet cards = getChoices;\\r\\n\\t\\t\\t\\t\\t\\t\\tfor (let i in cards) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tboostWithIcons(getActPlyr(),cards[i]);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t//TODO: tally up icons on planets\\r\\n\\t\\t\\t\\t\\t\\t\\t//TODO: tally up icons on technologies\\r\\n\\t\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t...getFollowCorePhases(),\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Pass the device to the Next Player\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tgame.displayinfo.selectionzone = \\\"\\\";\\r\\n\\t\\t\\t\\t\\t\\tgame.passp = true;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"You passed Priority\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tgame.passp = false;\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t]\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\t// discard : 2\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\tdiscard: [\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Would you like to Mobilize against a Planet\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr() .activeaction != \\\"mobilization\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\toffer( true , false , [ \\\"options\\\", [{ name: \\\"mobilize\\\" }, { name: \\\"skip\\\" }] ], \\\"choices\\\",finish   );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Choose a Planet to Mobilize Against\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr() .activeaction != \\\"mobilization\\\" ||  getChoice() != \\\"mobilize\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tofferUnsettled();\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Mobalizing against your Planet\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().activeaction != \\\"mobilization\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tconquer(getSubChoice(), getActPlyr() );\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Would you like to Streamline Your Empire\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif (getActPlyr().permanents.filter(el => el.type == \\\"streamlining\\\" ).length == 0\\r\\n\\t\\t\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\toffer( false , false , [ \\\"options\\\", [{ name: \\\"Decline\\\" }, { name: \\\"Streamline Empire\\\" }]  ], \\\"choices\\\",finish   );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Choose a Card from Your Hand to Remove from the Game\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().permanents.filter(el => el.type == \\\"streamlining\\\").length == 0 || getChoice() != \\\"Streamline Empire\\\"\\r\\n\\t\\t\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\toffer( true , false , [ \\\"hand\\\" ], \\\"subchoices\\\", finish );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Streamlining Your Empire\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().permanents.filter(el => el.type == \\\"streamlining\\\" ).length == 0 || getChoice() != \\\"Streamline Empire\\\" || getChoice() == \\\"Skip\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tresearch( getChoices(), getActPlyr(), 1 );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Would you like to Utilize Your Empire's Hyperefficiency\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().permanents.filter(el => el.type == \\\"hyperefficiency\\\" ).length == 0 ) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tsimpleOffer([\\\"Decline\\\", \\\"Utilize Hyperefficiency\\\" ]);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Choose a Card from Your Hand to Remove from the Game\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().permanents.filter(el => el.type == \\\"hyperefficiency\\\").length == 0 || getChoice() != \\\"Utilize Hyperefficiency\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\toffer( true , true , [ \\\"hand\\\" ], \\\"subchoices\\\",finish );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Your Empire is Hyperefficient\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif ( getActPlyr().permanents.filter(el => el.type == \\\"hyperefficiency\\\").length == 0 || getChoice() != \\\"Utilize Hyperefficiency\\\" || getChoice() == \\\"Skip\\\" ) {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tresearch( getChoices(), getActPlyr(), getChoices().length );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Choose any Cards you would like to Discard\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\toffer( true , true, [ \\\"hand\\\" ], \\\"choices\\\", finish );\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Discarding your Selected Cards\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tif (getChoice() == \\\"Skip\\\") {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tgetChoices().forEach((card) => {\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().discard = [...getActPlyr().discard,card];\\r\\n\\t\\t\\t\\t\\t\\t\\tgetActPlyr().limbo = getActPlyr().limbo.filter(c=>c.id!=card.id);\\r\\n\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t]\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t//cleanup : 1\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\tcleanup: [\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Drawing up to your Hand Size\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tcleanup();\\r\\n\\t\\t\\t\\t\\t\\tlet handsize = getActPlyr().handsize;\\r\\n\\t\\t\\t\\t\\t\\tfor (let index in getActPlyr().settled_planets) {\\r\\n\\t\\t\\t\\t\\t\\thandsize += getActPlyr().settled_planets[index].handsize_modifier;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tfor (let index in getActPlyr().conquered_planets) {\\r\\n\\t\\t\\t\\t\\t\\thandsize += getActPlyr().conquered_planets[index].handsize_modifier;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tlet l = getActPlyr().hand.length;\\r\\n\\t\\t\\t\\t\\t\\tif (l < handsize) {\\r\\n\\t\\t\\t\\t\\t\\tdraw( getActPlyr(), handsize - l );\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tgame.players.forEach(resetIconBoost);\\r\\n\\t\\t\\t\\t\\t\\tif ( game.started && checkforendgame() && (game.players.reduce((t, p) => t + p.rounds, 0) % game.number_of_players) == 0 ) {\\r\\n\\t\\t\\t\\t\\t\\ttotalinfluence();\\r\\n\\t\\t\\t\\t\\t\\tgame.nextphase = endgame;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"Pass the device to the Next Player\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tgame.displayinfo.selectionzone = \\\"\\\";\\r\\n\\t\\t\\t\\t\\t\\tgame.displayinfo.showoptiontoskip = false;\\r\\n\\t\\t\\t\\t\\t\\tgame.displayinfo.alwMulti = false;\\r\\n\\t\\t\\t\\t\\t\\tgame.passp = false;\\r\\n\\t\\t\\t\\t\\t\\tgame.passt = true;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\\"You passed the Turn\\\": () => {\\r\\n\\t\\t\\t\\t\\t\\tgame.passt = false;\\r\\n\\t\\t\\t\\t\\t\\tfinish(true);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t]\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t],\\r\\n\\t\\t\\tplayers: [],\\r\\n\\t\\t\\twinner: false,\\r\\n\\t\\t\\tstacks: {\\r\\n\\t\\t\\t\\tpilecount: { research: 20, producetrade: 16, colonize: 20, warfare: 16, survey: 20 },\\r\\n\\t\\t\\t\\tsurvey: 0, warfare: 1, colonize: 2, producetrade: 3, research: 4, //indexes\\r\\n\\t\\t\\t\\trolecards: [\\r\\n\\t\\t\\t\\tgenEmptyCard(\\\"survey\\\",\\\"Survey\\\",{survey:1}),\\r\\n\\t\\t\\t\\tgenEmptyCard(\\\"warfare\\\",\\\"Warfare\\\",{warfare:1}),\\r\\n\\t\\t\\t\\tgenEmptyCard(\\\"colonize\\\",\\\"Colonize\\\",{colonize:1}),\\r\\n\\t\\t\\t\\tgenEmptyCard(\\\"producetrade\\\",\\\"Produce / Trade\\\",{ produce:1, trade:1}),\\r\\n\\t\\t\\t\\tgenEmptyCard(\\\"research\\\",\\\"Research\\\",{research:1},{research_deck: []}),\\r\\n\\t\\t\\t\\t]\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tlet url = location.origin.replace(/^http/, \\\"ws\\\"); \\r\\n\\t\\t\\tlobby = {\\r\\n\\t\\t\\t\\tscreenname: \\\"\\\",\\r\\n\\t\\t\\t\\turl: url,\\r\\n\\t\\t\\t\\tsets: [\\\"Base Game\\\"],\\r\\n\\t\\t\\t\\tnumber_of_players: [2, 3, 4],\\r\\n\\t\\t\\t\\texistinggames: []\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tgame.nonce = nonce;\\r\\n\\t\\t\\tmounted = true;\\r\\n\\t\\r\\n\\t\\t\\r\\n\\t\\r\\n\\t})\\r\\n\\t///////////////////////////////////////////////////////////////////////////////\\r\\n\\tlet  \\tclearOptions = () => game.options = [],\\r\\n\\t\\t\\tofferUnsettled = () => offer( false,  false, [\\\"unsettled_planets\\\"], \\\"subchoices\\\", finish),\\r\\n            getActionCardPhases = () => actioncardphases,\\r\\n            getActvActn = () => getActPlyr().activeaction,\\r\\n            getActvRole = () => getActPlyr().activerole,\\r\\n            getChoice = () => game.choices[0].name,\\r\\n            getChoices = () => game.choices,\\r\\n            getSubChoice = () => getSubChoices()[0],\\r\\n            getSubChoices = () => game.subchoices,\\r\\n            finish = (cond=false) => phasefinishfunction(cond),\\r\\n            getActPlyr = () => game.players[game.acting_player_index],\\r\\n            getLeadPlyr = () => game.players[game.leading_player_index],\\r\\n            simpleOffer = (choices) => offer( false, false, [\\\"options\\\", choices.reduce((acc,cur)=>[...acc,{name:cur}],[])], \\\"choices\\\", finish),\\r\\n            wrappedOffer = (choices) => () => simpleOffer(choices),\\r\\n            getActionCorePhases = () => corephases.reduce((acc,cur)=>[...acc,cur.actn],[]).reduce((acc,cur)=>[...acc,...cur],[]),\\r\\n            getLeadCorePhases =   () => corephases.reduce((acc,cur)=>[...acc,cur.lead],[]).reduce((acc,cur)=>[...acc,...cur],[]),\\r\\n            getFollowCorePhases = () => corephases.reduce((acc,cur)=>[...acc,cur.fllw],[]).reduce((acc,cur)=>[...acc,...cur],[]),\\r\\n            genActionPhase = (name,actions,phase,choices=[],cond=false) => ({ [name] : ()=>{ if ( actions.includes(getActvActn()) && (choices.length==0 || choices.includes(getChoice()))) { phase() } else { finish(cond) } }}),\\r\\n            genLeadPhase   = (name,actions,phase,choices=[],cond=false) => ({ [name] : ()=>{ if ( actions.includes(getActvRole()) && (choices.length==0 || choices.includes(getChoice()))) { phase() } else { finish(cond) } }}),\\r\\n            genFollowPhase = (name,actions,phase,choices=[],cond=false) => ({ [name] : ()=>{ if ( actions.includes(getActvRole()) && (choices.length==0 || choices.includes(getChoice()))) { phase() } else { finish(cond) } }}),\\r\\n            genEmptyCard = (type, name, symbols, extras={}) => ({ type: type,selected: false, name: name, selected: false, icons: {...{ survey: 0, warfare: 0, colonize: 0, produce: 0, trade: 0, research: 1},...symbols},image: null, ...extras}),\\r\\n            tallyIcons = (dest,src) => [\\\"survey\\\",\\\"warfare\\\",\\\"trade\\\",\\\"produce\\\",\\\"research\\\",/*\\\"colonize\\\"*/].forEach( icon => dest.icons[icon] += src.icons[icon] ),\\r\\n            handToLimboWithLimboDuplicatePurge = (plyr,card) => { rmFromField(\\\"limbo\\\",plyr,card); handToLimbo(plyr,card);},\\r\\n            handToLimbo = (plyr,card) => {playToField(\\\"limbo\\\",plyr,card,'discard'); rmFromField(\\\"hand\\\",plyr,card);},\\r\\n            limboToHand = (plyr,card) => {playToField(\\\"hand\\\",plyr,card,''); rmFromField(\\\"limbo\\\",plyr,card);},\\r\\n            playToField = (fld,plyr,card,fDest) => plyr[fld] = [...plyr[fld], { ...card, finDest: fDest }],\\r\\n            rmFromField = (fld,plyr,card) => plyr[fld] = plyr[fld].filter(el => card.id != el.id),\\r\\n            boostWithIcons = (plyr, src) => Object.keys(src.icons).forEach((icon) => plyr.bstIcons[icon]+=src.icons[icon]),\\r\\n            resetIconBoost = (plyr) => plyr.bstIcons = {survey: 0, warfare: 0, colonize: 0, produce: 0, trade: 0, research: 0 },\\r\\n            resetSelection = (selected) => selected.forEach((s) => s.selected = false),\\r\\n            offlineOrIsClientTurn = () => (lobby.screenname == getActPlyr().name || !lobby.online),\\r\\n            setChoice = (chc) => game[game.displayinfo.choicelabel] = chc,\\r\\n            cleanOptions = () => game.options=[],\\r\\n            displayPlanets = () => game.displayinfo.center_or_planets = false,\\r\\n            displayCenter = () => game.displayinfo.center_or_planets = true,\\r\\n            clearChoices = () => game[game.displayinfo.choicelabel] = [],\\r\\n            setDisplayInfo = (zone,multiple,skippable,label) => game.displayinfo = {...game.displayinfo,...{selectionzone:zone,alwMulti:multiple,showoptiontoskip:skippable,choicelabel:label}},\\r\\n            getAllCards = (plyr) => [...plyr.deck,...plyr.discard, ...plyr.limbo, ...plyr.hand],\\r\\n            isPlanet = (p) => p.type=='planet' || p.type=='fertile' || p.type=='metallic' || p.type=='advanced',\\r\\n            chkForPerm = (perm) => getActPlyr().permanents.filter( (el)=>el.type==perm ).length != 0,\\r\\n            range = (min,max) => (min <= max) ? [...range(min, max-1),max] : [],\\r\\n            singleCllBck = (cllBck,e,func) => () => {func(); document.removeEventListener(e,this); cllBck();},\\r\\n            produceTradeHelper = (filled,planets,resources,func=()=>{}) => { let prd = {blue:0,green:0,purple:0,red:0}; planets.forEach((planet) =>  planet.production_zones.forEach((zone)=>{     if (!zone.filled && resources > 0) {         zone.filled = filled;         prd[zone.type]++;         resources--;         func()     }  }) );return prd;};\\r\\n\\t\\r\\n\\tlet choosewrapper = (c,zone) => {\\r\\n\\t\\tif ((game.displayinfo.selectionzone == zone) && offlineOrIsClientTurn()){\\r\\n\\t\\t\\t(game.displayinfo.alwMulti) ? multiplechoose(c) : choose([c]);\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\tlet multiplechoose = (choice) => {\\r\\n\\t\\tif (offlineOrIsClientTurn()){\\t\\t\\r\\n\\t\\t\\tif ( !game[game.displayinfo.choicelabel].includes(choice) ) {\\r\\n\\t\\t\\t\\tsetChoice([...game[game.displayinfo.choicelabel],choice]);\\r\\n\\t\\t\\t\\tchoice.selected=true;\\r\\n\\t\\t\\t\\tif (!isPlanet(choice) && choice.name != 'Skip') handToLimbo(getActPlyr(),choice);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tchoice.selected=false;\\r\\n\\t\\t\\t\\tif (!isPlanet(choice) && choice.name != 'Skip'){\\r\\n\\t\\t\\t\\t\\tsetChoice(game[game.displayinfo.choicelabel].filter( (el)=> el.id != choice.id ));\\r\\n\\t\\t\\t\\t\\tlimboToHand(getActPlyr(),choice);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\tlet choose = (choices) => {\\r\\n\\t\\tif (offlineOrIsClientTurn()){\\r\\n\\t\\t\\tclearOptions();\\r\\n\\t\\t\\tresetSelection(choices);\\r\\n\\t\\t\\tsetChoice(choices);\\r\\n\\t\\t\\tfinish();\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\tlet unchoose = (choice) => {\\r\\n\\t\\tif (offlineOrIsClientTurn()){\\r\\n\\t\\t\\tif ( game[game.displayinfo.choicelabel].includes(choice) ) {\\r\\n\\t\\t\\t\\tchoice.selected=false;\\r\\n\\t\\t\\t\\tsetChoice( game[game.displayinfo.choicelabel].filter( (el) => el.id != choice.id ));\\r\\n\\t\\t\\t\\tlimboToHand(getActPlyr(),choice);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\tlet offer = (\\r\\n\\t\\tskippable /*option to skip | sets game.displayinfo.showoptiontoskip=boolean */,\\r\\n\\t\\tmultiple /*allows multiple choices | sets game.displayinfo.alwMulti=boolean */, \\r\\n\\t\\t[field_label, choices] /* available cards to choose from | game.displayinfo.selectionzone={'hand|discard|options|planets|research|rolecards'}, sets choices=array if specified*/, \\r\\n\\t\\tchoice_label /* label for where the choice is stored | set with game[label]=*/,\\r\\n\\t\\tcallback /*callback that handles the choice or finishes the phase*/, \\r\\n\\t) => {\\r\\n\\t\\tsetDisplayInfo(field_label,multiple,skippable,choice_label);\\r\\n\\t\\tswitch (field_label){\\r\\n\\t\\t\\tcase 'hand': choices = getActPlyr().hand; break;\\r\\n\\t\\t\\tcase 'research': choices = game.research_deck; break;\\r\\n\\t\\t\\tcase 'discard': choices = getActPlyr().discard; break;\\r\\n\\t\\t\\tcase 'planets': choices = game.planet_deck; break;\\r\\n\\t\\t\\tcase 'rolecards': choices = game.stacks.rolecards; displayCenter(); break;\\r\\n\\t\\t\\tcase 'unsettled_planets': choices = getActPlyr().unsettled_planets; displayPlanets(); break;\\r\\n\\t\\t\\tcase 'settled_planets': choices = getActPlyr().settled_planets; displayPlanets(); break;\\r\\n\\t\\t\\tcase 'conquered_planets': choices = getActPlyr().conquered_planets; displayPlanets(); break;\\r\\n\\t\\t\\tcase 'settled_&_conquered_planets': choices = [...getActPlyr().settled_planets, ...getActPlyr().conquered_planets]; displayPlanets(); break;\\r\\n\\t\\t}\\r\\n\\t\\tclearChoices();\\r\\n\\t\\tpresent_as_choice(choices);\\r\\n\\t\\tsendstate();\\r\\n\\r\\n\\t};\\r\\n\\tlet discard = (source_array, destination_array, id) => {\\r\\n\\t\\tlet toRemove = source_array.find((e) => id == e.id);\\r\\n\\t\\tdestination_array = [...destination_array,toRemove];\\r\\n\\t\\tsource_array = source_array.filter((e) => e.id != toRemove.id);\\r\\n\\t};\\r\\n\\t//draw deck->hand\\r\\n\\tlet totalinfluence = () => {\\r\\n\\t\\tgame.players.forEach((plyr) => {\\r\\n\\t\\t\\tplyr.influence = plyr.influence.reduce((acc,cur) => acc + cur,0) + getAllCards(plyr).reduce((acc,cur) => acc + cur.influence);\\r\\n\\t\\t}) ;\\r\\n\\t};\\r\\n\\tlet endgame = () => {\\r\\n\\t\\t//display victor\\r\\n\\t\\tlet scores = game.players.map(e => e.influence);\\r\\n\\t\\tlet winner = '';\\r\\n\\t\\tlet highest = scores[0];\\r\\n\\t\\tgame.players.map((e) => { if ( highest < e.influence ) { winner = e.name; highest = e.influence; } } );\\r\\n\\t};\\r\\n\\tlet checkforendgame = () => {\\r\\n\\t\\tlet depletedstacks = game.stacks.pilecount.reduce((acc,cur) => acc + (cur < 1) ? 1 : 0,0);\\r\\n\\t\\tlet stacklimit = (game.number_of_players == 1 || game.number_of_players == 2) ? 1 : 2 ;\\r\\n\\t\\treturn ( stacklimit <= depletedstacks || game.influence.length == 0);\\r\\n\\t};\\r\\n\\tlet draw = (player, quantity=1) => {\\r\\n\\t\\tfor ( let i = 0; i < quantity; i++){\\r\\n\\t\\t\\tif ( player.deck.length == 0) {\\r\\n\\t\\t\\t\\tif (player.discard.length == 0) return player;\\r\\n\\t\\t\\t\\tplayer.deck = knuthshuffle([...player.discard]);\\r\\n\\t\\t\\t\\tplayer.discard = [];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tplayer.hand = [...player.hand, player.deck.pop()];\\r\\n\\t\\t\\tplayer.deck = player.deck;\\r\\n\\t\\t}\\r\\n\\t\\treturn player;\\r\\n\\t};\\r\\n\\tlet play = (source_array, destination_array, finDest, id) => {\\r\\n\\t\\tlet toRemove = source_array.find((e) => id == e.id);\\r\\n\\t\\tdestination_array = [...destination_array,{...toRemove,finDest:finDest}];\\r\\n\\t\\tsource_array = source_array.filter((e) => e.id != toRemove.id);\\r\\n\\t};\\r\\n\\tlet gen_research_card = (name) => {\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tname:name,\\r\\n\\t\\t\\ttype:name,\\r\\n\\t\\t\\tid:gen_unique_id(),\\r\\n\\t\\t\\ticons:{'survey':0,'warfare':0,'colonize':0,'produce':0,'trade':0,'research':0},\\r\\n\\t\\t\\tplanet_requirements:{'advanced':0, 'metallic':0, 'fertile':0},\\r\\n\\t\\t\\tresearch_cost:0,\\r\\n\\t\\t\\taction:()=>{},\\r\\n\\t\\t\\tis_permanent:false,\\r\\n\\t\\t\\tis_doublesided:false,\\r\\n\\t\\t\\timgurl:\\\"/images/\\\",\\r\\n\\t\\t\\tInfluence_value:0,\\r\\n\\t\\t\\timg:function(im){this.imgurl+=im;return this;},\\r\\n\\t\\t\\tinfluence:function(inf){this.influence_value = inf ; return this;},\\r\\n\\t\\t\\tmetallic:function(met){this.planet_requirements.metallic = met ; return this;},\\r\\n\\t\\t\\tadvanced:function(adv){this.planet_requirements.advanced = adv; return this;},\\r\\n\\t\\t\\tfertile:function(fer){this.planet_requirements.fertile = fer; return this;},\\r\\n\\t\\t\\tresearch:function(res){this.research_cost = res; return this;},\\r\\n\\t\\t\\tpermanent:function(){this.is_permanent = true; return this;},\\r\\n\\t\\t\\tdoubleside:function(){this.is_doublesided = true; return this;},\\r\\n\\t\\t\\ticons:function(icons){this.icons = Object.assign(this.icons, icons); return this;},\\r\\n\\t\\t\\timproved_colonize:function(){this.research(3);this.imgurl+=\\\"improvedcolonize\\\";return this;},\\r\\n\\t\\t\\timproved_survey:  function(){this.research(3);this.imgurl+=\\\"improvedsurvey\\\";return this;},\\r\\n\\t\\t\\timproved_research:function(){this.research(3);this.imgurl+=\\\"improvedresearch\\\";return this;},\\r\\n\\t\\t\\timproved_warfare: function(){this.research(3);this.imgurl+=\\\"improvedwarfare\\\";return this;},\\r\\n\\t\\t\\timproved_production:function(){this.research(3);this.imgurl+=\\\"improvedproduction\\\";return this;},\\r\\n\\t\\t\\timproved_trade:  \\t\\tfunction(){this.research(3);this.imgurl+=\\\"improvedtrade\\\";return this;},\\r\\n\\t\\t\\tsurveyteam:\\t\\t\\tfunction(){return this.research(5).metallic(2).influence(2).icons({'survey':2}).img('surveyteam');},\\r\\n\\t\\t\\twarpath:\\t\\t\\t\\tfunction(){return this.research(5).metallic(2).influence(2).icons({'warfare':2}).img('warpath');},\\r\\n\\t\\t\\tterraforming:\\t\\t\\tfunction(){return this.research(5).fertile(2).influence(2).icons({'colonize':2}).img('terraforming');},\\r\\n\\t\\t\\tgeneticengineering:\\tfunction(){return this.research(5).fertile(2).influence(2).icons({'produce':2}).img('geneticengineering');},\\r\\n\\t\\t\\tartificialintelligence:\\tfunction(){return this.research(5).fertile(2).influence(2).icons({'colonize':1,'produce':1}).img('artificialintelligence');},\\r\\n\\t\\t\\tdiversemarkets:\\t\\tfunction(){return this.research(5).advanced(2).influence(2).icons({'research':1,'trade':1}).img('diversemarkets');},\\r\\n\\t\\t\\tspecialization:\\t\\t\\tfunction(){return this.research(5).advanced(2).influence(2).icons({'trade':2}).img('specialization');},\\r\\n\\t\\t\\tmobilization:\\t\\t\\tfunction(){return this.research(5).metallic(2).influence(2).icons({'survey':1,'warfare':1}).img('mobilization');},\\r\\n\\t\\t\\tdatanetwork:\\t\\t\\tfunction(){return this.research(5).advanced(2).influence(2).icons({'research':2}).img('datanetwork');},\\r\\n\\t\\t\\tabundance:   \\t\\t\\tfunction(){this.research(5);this.imgurl+=\\\"abundance\\\"; this.is_doublesided=true; this.is_permanent=true; return this.fertile(2).influence(2);},\\r\\n\\t\\t\\tadaptability:\\t\\t   \\tfunction(){this.research(7);this.imgurl+=\\\"adaptability\\\"; this.is_doublesided=true; this.is_permanent=true; return this.advanced(3).influence(5);},\\r\\n\\t\\t\\tbureaucracy:  \\t\\t\\tfunction(){this.research(7);this.imgurl+=\\\"bureaucracy\\\"; this.is_doublesided=true; this.is_permanent=true; return this.fertile(3).influence(5);},\\r\\n\\t\\t\\tdissension:\\t\\t\\t\\tfunction(){return this.research(7).fertile(3).influence(5).permanent().doubleside().img('dissension');},\\r\\n\\t\\t\\thyperefficiency:\\t\\tfunction(){return this.research(7).advanced(3).influence(5).permanent().doubleside().img('hyperefficiency');},\\r\\n\\t\\t\\timperialism:\\t\\t\\tfunction(){return this.research(5).metallic(2).influence(2).permanent().doubleside().img('imperialism').icons({'survey':1,'trade':1,'warfare':1,});},\\r\\n\\t\\t\\tlogistics:\\t\\t\\t\\tfunction(){return this.research(7).metallic(3).influence(5).permanent().doubleside().img('logistics');},\\r\\n\\t\\t\\tproductivity:\\t\\t\\tfunction(){return this.research(7).metallic(3).influence(5).permanent().doubleside().img('productivity');},\\r\\n\\t\\t\\tscorchedearthpolicy:\\tfunction(){return this.research(5).metallic(2).influence(2).permanent().doubleside().img('scorchedearthpolicy');},\\r\\n\\t\\t\\tstreamlining:\\t\\t\\tfunction(){return this.research(5).advanced(2).influence(2).permanent().doubleside().img('streamlining');},\\r\\n\\t\\t\\tweaponsemporium:\\t\\tfunction(){return this.research(5).advanced(2).influence(2).permanent().doubleside().img('weaponemporium');},\\r\\n\\t\\t\\tfertilegrounds:\\t\\t\\tfunction(){return this.research(5).fertile(2).influence(2).permanent().doubleside().img('fertilegrounds').icons({'research':1,'colonize':1,'produce':1,});},\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\tlet gen_research_deck = () => {\\r\\n\\t\\tgame.research_deck =[\\r\\n\\t\\t\\tgen_research_card('improved_production').metallic(1).icons({'warfare':1,'produce':1}).improved_production().img(\\\"wp.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_production').metallic(1).icons({'survey':1,'produce':1}).improved_production().img(\\\"sp.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_trade')     .metallic(1).icons({'survey':1,'trade':1}).improved_trade().img(\\\"st.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_trade')     .metallic(1).icons({'warfare':1,'trade':1}).improved_trade().img(\\\"wt.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_research')  .metallic(1).icons({'warfare':1,'research':1}).improved_research().img(\\\"wr.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_research')  .metallic(1).icons({'survey':1,'research':1}).improved_research().img(\\\"sr.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_colonize')  .metallic(1).icons({'warfare':1,'colonize':1}).improved_colonize().img(\\\"wc.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_colonize')  .metallic(1).icons({'survey':1,'colonize':1}).improved_colonize().img(\\\"sc.png\\\"),\\r\\n\\t\\t\\r\\n\\t\\t\\tgen_research_card('improved_warfare')   .fertile(1).icons({'produce':1,'warfare':1}).improved_warfare().img(\\\"pw.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_warfare')   .fertile(1).icons({'colonize':1,'warfare':1}).improved_warfare().img(\\\"cw.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_trade')     .fertile(1).icons({'produce':1,'trade':1}).improved_trade().img(\\\"pt.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_trade')     .fertile(1).icons({'colonize':1,'trade':1}).improved_trade().img(\\\"ct.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_research')  .fertile(1).icons({'produce':1,'research':1}).improved_research().img(\\\"pr.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_research')  .fertile(1).icons({'colonize':1,'research':1}).improved_research().img(\\\"cr.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_survey')    .fertile(1).icons({'produce':1,'survey':1}).improved_survey().img(\\\"ps.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_survey')    .fertile(1).icons({'colonize':1,'survey':1}).improved_survey().img(\\\"cs.png\\\"),\\r\\n\\t\\t\\r\\n\\t\\t\\tgen_research_card('improved_production').advanced(1).icons({'research':1,'produce':1}).improved_production().img(\\\"rp.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_production').advanced(1).icons({'trade':1,'produce':1}).improved_production().img(\\\"tp.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_warfare')   .advanced(1).icons({'warfare':1,'trade':1}).improved_warfare().img(\\\"tw.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_warfare')   .advanced(1).icons({'research':1,'warfare':1}).improved_warfare().img(\\\"rw.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_colonize')  .advanced(1).icons({'colonize':1,'trade':1}).improved_colonize().img(\\\"tc.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_colonize')  .advanced(1).icons({'research':1,'colonize':1}).improved_colonize().img(\\\"rc.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_survey')    .advanced(1).icons({'trade':1,'survey':1}).improved_survey().img(\\\"ts.png\\\"),\\r\\n\\t\\t\\tgen_research_card('improved_survey')    .advanced(1).icons({'research':1,'survey':1}).improved_survey().img(\\\"rs.png\\\"),\\r\\n\\r\\n\\t\\t\\tgen_research_card('survey_team').surveyteam().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('war_path').warpath().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('terraforming').terraforming().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('genetic_engineering').geneticengineering().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('artificial_intelligence').artificialintelligence().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('diverse_markets').diversemarkets().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('specialization').specialization().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('mobilization').\\tmobilization().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('data_network').datanetwork().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('abundance').abundance().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('adaptability').adaptability().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('bureaucracy').bureaucracy().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('dissension').dissension().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('hyperefficiency').hyperefficiency().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('imperialism').imperialism().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('logistics').logistics().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('productivity').productivity().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('scorched_earth_policy').scorchedearthpolicy().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('streamlining').streamlining().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('weapons_emporium').weaponsemporium().img(\\\".png\\\"),\\r\\n\\t\\t\\tgen_research_card('fertile_grounds').fertilegrounds().img(\\\".png\\\"),\\r\\n\\r\\n\\t\\t];\\r\\n\\t};\\r\\n\\tlet genplayer = (_id) => {\\r\\n\\t\\tlet _player = {\\r\\n\\t\\t\\t'id':_id,\\r\\n\\t\\t\\t'actionrolesequence':'ar', //can be ar. ra, aar, ara, raa\\r\\n\\t\\t\\t'specialization':'',\\r\\n\\t\\t\\t'available':true,\\r\\n\\t\\t\\t'rounds':0,\\r\\n\\t\\t\\t'limbo': [],\\r\\n\\t\\t\\t'deck' : knuthshuffle(gennewdeck()),\\r\\n\\t\\t\\t'hand' : [],\\r\\n\\t\\t\\t'permanents' : [] ,\\r\\n\\t\\t\\t'discard' : [],\\r\\n\\t\\t\\t'handsize':5,\\r\\n\\t\\t\\t'activeaction' : null,\\r\\n\\t\\t\\t'activerole' : '',\\r\\n\\t\\t\\t'handsize' : 5,\\r\\n\\t\\t\\t'bstIcons' : {'survey':0,'warfare':0,'colonize':0,'produce':0,'trade':0,'research':0},\\r\\n\\t\\t\\t'unsettled_planets' : [game.stacks.startingplanets.pop()],\\r\\n\\t\\t\\t'settled_planets' : [],\\r\\n\\t\\t\\t'conquered_planets' : [],\\r\\n\\t\\t\\t'starfighters' : {'small':0,'medium':0,'large':0},\\r\\n\\t\\t\\t'combatvalue' : 0,\\r\\n\\t\\t\\t'influence':[],\\r\\n\\t\\t};\\r\\n\\t\\tdraw(_player,_player.handsize);\\r\\n\\t\\tgame.players = [...game.players,_player];\\r\\n\\t};\\r\\n\\tlet genplanet = (name_in) => {\\t\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tid:gen_unique_id(),\\r\\n\\t\\t\\tname:name_in,\\r\\n\\t\\t\\ttype:'planet',\\r\\n\\t\\t\\tsettle_cost:2,\\r\\n\\t\\t\\tsettled:false,\\r\\n\\t\\t\\tconquer_cost:2,\\r\\n\\t\\t\\tproduction_zones:[],\\r\\n\\t\\t\\tinfluence_value:2,\\r\\n\\t\\t\\ticons:{'survey':0,'warfare':0,'colonize':0,'produce':0,'trade':0,'research':0,},\\r\\n\\t\\t\\thandsize_modifier:0,\\r\\n\\t\\t\\thosted_colonies:[],\\r\\n\\t\\t\\tmetallic:function(){this.type='metallic';return this;},\\r\\n\\t\\t\\tadvanced:function(){this.type='advanced';return this;},\\r\\n\\t\\t\\tfertile:function(){this.type='fertile';return this;},\\r\\n\\t\\t\\ticon:function(icon_name){this.icons[icon_name]++;return this;},\\r\\n\\t\\t\\thandsize:function(modifier){this.handsize_modifier=modifier;return this;},\\r\\n\\t\\t\\tinfluence:function(influence){this.influence_value = influence;return this;},\\r\\n\\t\\t\\tsettle:function(cost){this.settle_cost=cost;return this;},\\r\\n\\t\\t\\tconquer:function(cost){this.conquer_cost=cost;return this;},\\r\\n\\t\\t\\tzone:function(zone){this.production_zones.push({type:zone, filled:false});return this;},\\r\\n\\t\\t};\\r\\n\\t};\\r\\n\\tlet genplanetdeck = () => { \\r\\n\\t\\tgame.planet_deck = knuthshuffle([\\r\\n\\t\\t\\t//fertile planets\\r\\n\\t\\t\\tgenplanet('MISHBURR ITO-A').fertile().settle(5).conquer(4).zone('food')              .influence(3).icon('produce')   ,\\r\\n\\t\\t\\tgenplanet('STYKU').fertile().settle(4).conquer(5).zone('water')               .influence(3).icon('colonize')  ,\\r\\n\\t\\t\\tgenplanet('ANGUS DUFFY').fertile().settle(3).conquer(6).zone('food').zone('water') .influence(3)                   ,\\r\\n\\t\\t\\tgenplanet('GERDLAND').fertile().settle(4).conquer(5).zone('water')               .influence(3).icon('produce')   ,\\r\\n\\t\\t\\tgenplanet('MIK-MIK').fertile().settle(5).conquer(4).zone('food')              .influence(3).icon('colonize')  ,\\r\\n\\t\\t\\tgenplanet('NELOS IV').fertile().settle(5).conquer(4).zone('food')              .influence(2)      .handsize(1) ,\\r\\n\\t\\t\\tgenplanet('SPIELBANY VI').fertile().settle(4).conquer(5).zone('water')               .influence(2)      .handsize(1) ,\\r\\n\\t\\t\\tgenplanet('NEW TEXAS').fertile().settle(3).conquer(6).zone('food').zone('water') .influence(2).icon('colonize')  ,\\r\\n\\t\\t\\tgenplanet('ARTIGAS GNS-111').fertile().settle(3).conquer(6).zone('food').zone('water') .influence(2).icon('produce')   ,\\r\\n\\t\\t\\t//advanced planets\\r\\n\\t\\t\\tgenplanet('HANOJ - T').advanced().settle(5).conquer(4).influence(3).zone('silicon').icon('trade'),\\r\\n\\t\\t\\tgenplanet('OKNOW').advanced().settle(4).conquer(5).influence(2).zone('silicon')                              .handsize(1),\\r\\n\\t\\t\\tgenplanet('SROD AVEIN N2').advanced().settle(3).conquer(6).influence(4)                             .icon('research'),\\r\\n\\t\\t\\tgenplanet(\\\"RAL GAI'GAW\\\").advanced().settle(4).conquer(5).influence(3).zone('silicon').icon('trade'),\\r\\n\\t\\t\\tgenplanet('ECHO ROSE').advanced().settle(5).conquer(4).influence(3).zone('silicon')              .icon('research'),\\r\\n\\t\\t\\tgenplanet('SHOLMICAN').advanced().settle(3).conquer(6).influence(4).zone('silicon'),\\r\\n\\t\\t\\tgenplanet('ZEPHAN').advanced().settle(3).conquer(6).influence(4)               .icon('trade'),\\r\\n\\t\\t\\tgenplanet('SIMA-07C').advanced().settle(5).conquer(4).influence(2).zone('silicon')                              .handsize(1),\\r\\n\\t\\t\\tgenplanet('LYTTLE').advanced().settle(4).conquer(5).influence(3).zone('silicon')              .icon('research'),\\r\\n\\t\\t\\t//mettalic planets\\r\\n\\t\\t\\tgenplanet('KYRIE & JUNO').metallic().settle(3).conquer(6).influence(4)            .icon('survey'),\\r\\n\\t\\t\\tgenplanet('MARGHANNAH PRIME').metallic().settle(4).conquer(5).influence(3)                           .handsize(1),\\r\\n\\t\\t\\tgenplanet('TANKAHSHIN').metallic().settle(4).conquer(5).influence(3).zone('metallic').icon('warfare'),\\r\\n\\t\\t\\tgenplanet('VOSON').metallic().settle(4).conquer(5).influence(3).zone('metallic').icon('survey'),\\r\\n\\t\\t\\tgenplanet('PINK SONAR').metallic().settle(5).conquer(4).influence(3).zone('metallic').icon('survey'),\\r\\n\\t\\t\\tgenplanet(\\\"OVERLORD BETZEL'S DOMAIN\\\").metallic().settle(3).conquer(6).influence(4)            .icon('warfare'),\\r\\n\\t\\t\\tgenplanet('8910 SPIELEN').metallic().settle(4).conquer(5).influence(2).zone('metallic')               .handsize(1),\\r\\n\\t\\t\\tgenplanet('IDROYOS').metallic().settle(3).conquer(6).influence(5),\\r\\n\\t\\t\\tgenplanet('ERKAM-W').metallic().settle(5).conquer(4).influence(3).zone('metallic').icon('warfare')\\r\\n\\t\\t]);\\r\\n\\t\\tgame.stacks.startingplanets = knuthshuffle([\\r\\n\\t\\t\\tgenplanet('MESIA SEDNIM').fertile().settle(2).conquer(2).influence(2).zone('water'),\\r\\n\\t\\t\\tgenplanet('DRAWDE').fertile().settle(2).conquer(2).influence(2).zone('food'),\\r\\n\\t\\t\\tgenplanet('LIAGIBA').advanced().settle(2).conquer(2).influence(2).zone('silicon'),\\r\\n\\t\\t\\tgenplanet('POMERENE').advanced().settle(2).conquer(2).influence(2).zone('silicon'),\\r\\n\\t\\t\\tgenplanet('CHRISPEN').metallic().settle(2).conquer(2).influence(2).zone('metallic'),\\r\\n\\t\\t\\tgenplanet('PIEDRA SECA').metallic().settle(2).conquer(2).influence(2).zone('metallic'),\\r\\n\\t\\t])   \\r\\n\\t};\\r\\n\\tlet cleanup = () => {\\r\\n\\t\\tgetActPlyr().limbo.forEach(card => {\\r\\n\\t\\t\\tgetActPlyr()[card.finDest] = [ ...getActPlyr()[card.finDest], card ];\\r\\n\\t\\t});\\r\\n\\t};\\r\\n\\tlet purchase = (src, dest, finDest, id) => { // duplicate of discard & duplicate of play\\r\\n\\t\\tlet toRemove = src.find((e) => id == e.id);\\r\\n\\t\\tdest = [...dest,{...toRemove,finDest:finDest}];\\r\\n\\t\\tsrc = src.filter((e) => e.id != toRemove.id);\\r\\n\\t};\\r\\n\\tlet remove_from_game = (source_array, toRemove) => { //remove_from_game hand->exile\\\\\\r\\n\\t\\ttoRemove.finDest=\\\"exile\\\";\\r\\n\\t\\treturn source_array.filter((e) => e.id != toRemove.id);\\r\\n\\t};\\r\\n\\tlet present_as_choice = (options) => game.options = options;\\r\\n\\tlet settle_colonies = (planet, plyr) => {\\r\\n\\t\\tlet planets = [...plyr.settled_planets,...plyr.conquered_planets];\\r\\n\\t\\tlet reduction = [...planets,...getLeadPlyr().permanents].reduce((acc,cur)=>acc+cur.icons.colonize,0);\\r\\n\\t\\tif (planet.settle_cost - reduction <= planet.hosted_colonies.length){\\r\\n\\t\\t\\tif (chkForPerm('abundance') && planet.production_zones.length != 0){\\r\\n\\t\\t\\t\\tplanet.production_zones = planet.production_zones.map((pz)=>{return {type:pz.type,filled:true};})\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tplyr.discard = [...plyr.discard, ...planet.hosted_colonies];\\r\\n\\t\\t\\tplanet.hosted_colonies = [];\\r\\n\\t\\t\\tplanet.settled = true;\\r\\n\\t\\t\\tdiscard(plyr.unsettled_planets,plyr.settled_planets,planet.id);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t};\\r\\n\\t//pass_turn leadingplayer->nextplayer\\r\\n\\tlet pass_turn = () => {\\r\\n\\t\\tif (!lobby.online || lobby.screenname == getActPlyr().name ){\\r\\n\\t\\t\\tgame.passt=false;\\r\\n\\t\\t\\tgame.acting_player_index = game.leading_player_index = (game.leading_player_index+1)%game.number_of_players;\\r\\n\\t\\t\\tgame.leadingplayer = game.players[game.leading_player_index];\\r\\n\\t\\t\\tgame.acting_player = game.players[game.leading_player_index];\\r\\n\\t\\t\\tfinish();\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\t//pass_priority actingplayer->nextplayer\\r\\n\\tlet pass_priority = () => {\\r\\n\\t\\tif (offlineOrIsClientTurn()){\\r\\n\\t\\t\\tgame.passp=false;\\r\\n\\t\\t\\tgame.acting_player_index = (game.acting_player_index+1)%game.number_of_players;\\r\\n\\t\\t\\tgame.acting_player = getActPlyr();\\r\\n\\t\\t\\tfinish();\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\t//determine_number_of_players logic->options->choice->number_of_players\\r\\n\\tlet determine_number_of_players = (callback) => {\\r\\n\\t\\tdocument.addEventListener('choicemade',singleCllBck( callback, 'choicemade', () => game.number_of_players = game.choices));\\r\\n\\t\\tpresent_as_choice(range( game.minPlyrs, game.maxPlyrs));\\r\\n\\t};\\r\\n\\t//produce poduction_pile->host\\r\\n\\tlet produce = (planets, resources=1) => produceTradeHelper(true,planets,resources);\\r\\n\\t//trade host->production_pile, influence_pile->player_influence\\r\\n\\t//let trade = (planets, player, resources=1) => produceTradeHelper(false,planets,resources,()=>player.influence.push(game.influence.pop()));\\r\\n\\tlet trade = (plnt,plyr,res)=>{\\r\\n\\t\\tlet prd = { blue: 0, green: 0, purple: 0, red: 0  };\\r\\n\\t\\tif (res < 1) return prd;\\r\\n\\t\\tfor (let i = 0; i < plnt.length; i++){\\r\\n\\t\\t\\tfor(let j = 0; j < plnt[i].production_zones.length; j++) {\\r\\n\\t\\t\\t\\tif ( res > 0 && plnt[i].production_zones[j].filled ) {\\r\\n\\t\\t\\t\\t\\tif (game.influence.length != 1) game.influence = game.influence.slice(1);\\r\\n\\t\\t\\t\\t\\tplnt[i].production_zones[j].filled = false;\\r\\n\\t\\t\\t\\t\\tprd[plnt[i].production_zones[j].type]++;\\r\\n\\t\\t\\t\\t\\tplyr.influence = [...plyr.influence, 1];\\r\\n\\t\\t\\t\\t\\tres--;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t} return prd;\\r\\n\\t};\\r\\n\\t//politics hand->limbo->exile, stacks->hand\\r\\n\\tlet politics = (politics_card, card, player) => {\\r\\n\\t\\tpolitics_card.finDest=\\\"exile\\\";\\r\\n\\t\\tif (game.stacks.pilecount[card.type] >= 1){\\r\\n\\t\\t\\tplayer.hand = [...player.hand, {...game.stacks.rolecards[game.stacks[card.type]], 'id':gen_unique_id()}];\\r\\n\\t\\t\\tgame.stacks.pilecount[card.type]--;\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\t//research hand->exile\\r\\n\\tlet research = (cards, player, limit=2) => {\\r\\n\\t\\tfor (let i = 0; (i < cards.length && i < limit); i++){\\r\\n\\t\\t\\tgetActPlyr().limbo =  remove_from_game(getActPlyr().limbo, cards[i]);\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\t//boost logic->player_icons\\r\\n\\tlet boost = (cards, plyr) => cards.forEach((card) => boostWithIcons(plyr,card));\\r\\n\\t//survey deck->hand\\r\\n\\tlet survey = (player) => player = draw(player,2);\\r\\n\\t//colonize hand/limbo->host\\r\\n\\tlet colonize = (planet, source_array, card, isRole=false) => {\\r\\n\\t\\tlet l = (isRole) ? getActPlyr().bstIcons.colonize : 1;\\r\\n\\t\\tfor (let i = 0; i < l; i++){\\r\\n\\t\\t\\tlet toRemove = source_array.find((e) => card.type == e.type && e.finDest!='exile');\\r\\n\\t\\t\\tplanet.hosted_colonies = [...planet.hosted_colonies,toRemove];\\r\\n\\t\\t\\tsource_array = source_array.filter((e,i) => e.id != toRemove.id);\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\t//warfare starship_pile->player_starship_pile\\r\\n\\tlet warfare = (player) => player.starfighters.small++;\\r\\n\\t//conquer player_starship_pile->starship_pile, player_unconquered_planets->player_conquered_planets\\r\\n\\tlet conquer = (planet, player)=>{\\r\\n\\t\\tif (chkForPerm('scorched_earth_policy')){\\r\\n\\t\\t\\t\\tplanet.production_zones = [];\\r\\n\\t\\t\\t\\tplanet.conquer_cost -= 2;\\r\\n\\t\\t\\t\\tif (planet.conquer_cost < 0) {\\r\\n\\t\\t\\t\\t\\tplanet.conquer_cost = 0;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\tif (player.starfighters.small >= planet.conquer_cost){\\r\\n\\t\\t\\tif (chkForPerm('abundance')){\\r\\n\\t\\t\\t\\tif (planet.production_zones.length != 0){\\r\\n\\t\\t\\t\\t\\tplanet.production_zones = planet.production_zones.map((pz)=>{return {type:pz.type,filled:true};})\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tplayer.starfighters.small -= planet.conquer_cost;\\r\\n\\t\\t\\tplanet = select_via_id(player.unsettled_planets, planet.id);\\r\\n\\t\\t\\tplanet.conquered=true;\\r\\n\\t\\t\\tplayer.conquered_planets.push(planet);\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\t//offer_to_boost present_as_choice, choose, boost\\r\\n\\tlet offer_to_boost = (player) => {\\r\\n\\t\\tgame.displayinfo.selectionzone = 'hand';\\r\\n\\t\\tgame.displayinfo.alwMulti = true;\\r\\n\\t\\tgame.displayinfo.showoptiontoskip = true;\\r\\n\\t\\tpresent_as_choice(player.hand);\\r\\n\\t\\tdocument.addEventListener('choicemade',singleCllBck(()=>{},'choicemade',()=>boost(game.choices, player)));\\r\\n\\t};\\r\\n\\tlet select_via_id = (source, id) => {\\r\\n\\t\\tlet temp = source.find(p=>p.id==id);\\r\\n\\t\\tsource = source.filter(p=>p.id!=id);\\r\\n\\t\\treturn temp\\r\\n\\t};\\r\\n\\tlet boostrolewithcards = (choices, callback=()=>{}) => {\\r\\n\\t\\tif (choices[0].name == 'Skip') return;\\r\\n\\t\\tchoices.forEach((card)=>{\\r\\n\\t\\t\\tboostWithIcons(getActPlyr(),card);\\r\\n\\t\\t\\tplay(getActPlyr().hand,getActPlyr().limbo,'discard',cards[i].id);\\r\\n\\t\\t});\\r\\n\\t\\tcallback();\\r\\n\\t};\\r\\n\\tlet gen_unique_id = () => {\\r\\n\\t\\tgame.nonce++;\\t\\r\\n\\t\\treturn game.nonce;\\r\\n\\t};\\r\\n\\tlet performleaderrole = (callback=()=>{}) => getActPlyr().activerole.role.role.leader(callback);\\r\\n\\tlet performfollowerrole = (callback=null) => {\\r\\n\\t\\tgetActPlyr().activerole.set(game.players[game.leading_player_index].activerole.role);\\r\\n\\t\\tgetActPlyr().activerole.role.role.follower(callback);\\r\\n\\t};\\r\\n\\tlet explore_planet = (player)=>{\\r\\n\\t\\tlet planet = game.planet_deck.pop();\\r\\n\\t\\tplayer.limbo = [...player.limbo,{...planet,'finDest':'planetdeck'}];\\r\\n\\t\\tgame.options = [...game.options,planet];\\r\\n\\t};\\r\\n\\tlet catalog_planet = (player) => {\\r\\n\\t\\tgame.choices[0].finDest = 'unsetttled';\\r\\n\\t\\tplayer.unsettled_planets = [...player.unsettled_planets,game.choices[0]];\\r\\n\\t\\tplayer.limbo = player.limbo.filter(p=>p.id!=game.choices[0].id);\\r\\n\\t\\tplayer.limbo.filter(card => card.finDest=='planetdeck').forEach(planet=> discard(player.limbo,game.planet_deck,planet.id))\\r\\n\\t};\\r\\n\\tlet followcentercardrole = (choices, callback=null) => {\\r\\n\\t\\tlet card = choices[0];\\r\\n\\t\\tgetActPlyr().activerole.set(card);\\r\\n\\t\\tif (game.stacks.pilecount[card.type] >= 1){\\r\\n\\t\\t\\tgetActPlyr().bstIcons[card.type]++;\\r\\n\\t\\t\\tgetActPlyr().limbo.push(Object.assign({'id':gen_unique_id(), 'finDest':'discard'},game.stacks.rolecards[game.stacks[card.type]]));\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tgame.stacks.pilecount[card.type]--;\\r\\n\\t\\t}\\r\\n\\t\\tlet [,,...arr] = arguments;\\r\\n\\t\\tcallback(card,arr);\\r\\n\\t};\\r\\n\\tlet discardcardsfromhand = (choices, callback=null) => {\\r\\n\\t\\tif(choices[0].name!=\\\"Skip\\\"){\\r\\n\\t\\t\\tchoices.forEach(card=>discard(getActPlyr().hand, getActPlyr().discard, card.id));\\r\\n\\t\\t}\\r\\n\\t\\tlet [,,...arr] = arguments;\\r\\n\\t\\tcallback(choices,arr);\\r\\n\\t};\\r\\n\\tlet phasefinishfunction = (send = false) => {\\r\\n\\t\\tgame.currentphase = (game.currentphase + 1) % game.gamesequence.length; \\r\\n\\t\\tlet jsobj = game.gamesequence[game.currentphase];\\r\\n\\t\\tlet nextphase,msg;\\r\\n\\t\\tfor (let key in jsobj){\\r\\n\\t\\t\\tmsg = key\\r\\n\\t\\t\\tnextphase=jsobj[key];\\r\\n\\t\\t}\\r\\n\\t\\tif (game.nextphase !== endgame){\\r\\n\\t\\t\\tgame.nextphase = nextphase;\\r\\n\\t\\t\\tgame.messagetoplayer.push(msg);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (send) sendstate();\\r\\n\\t\\tgame.nextphase();\\r\\n\\t};\\r\\n\\tlet gengamesequence = () => {\\r\\n\\t\\tlet _gamesequence=[];\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[0].start],_gamesequence);\\r\\n\\t\\t//ar. ra, aar, ara, raa\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[1].action],_gamesequence, ()=>{return getActPlyr().actionrolesequence=='aar'});\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[1].action],_gamesequence, ()=>{return getActPlyr().actionrolesequence=='aar' || getActPlyr().actionrolesequence=='ar'  });\\r\\n\\t\\t\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[2].role],_gamesequence);\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[3].lead],_gamesequence);\\r\\n\\t\\tfor (let i = 1; i<game.number_of_players; i++){\\r\\n\\t\\t\\t_gamesequence = gshelper([...game.gamephases[4].follow],_gamesequence);\\r\\n\\t\\t}\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[1].action],_gamesequence, ()=>{return getActPlyr().actionrolesequence=='raa' || getActPlyr().actionrolesequence=='ara'  });\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[1].action],_gamesequence, ()=>{return getActPlyr().actionrolesequence=='raa'});\\r\\n\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[5].discard],_gamesequence);\\r\\n\\t\\t_gamesequence = gshelper([...game.gamephases[6].cleanup],_gamesequence);\\r\\n\\t\\tgame.gamesequence = _gamesequence;\\r\\n\\t};\\r\\n\\tlet gshelper = (source_array, destination_array, wrapperfunction=false) => {\\r\\n\\t\\tfor (let i in source_array){\\r\\n\\t\\t\\tif (wrapperfunction){\\r\\n\\t\\t\\t\\tlet jsobj = source_array[i];\\r\\n\\t\\t\\t\\tlet func,key;\\r\\n\\t\\t\\t\\tlet item = {};\\r\\n\\t\\t\\t\\tfor (key in jsobj){\\r\\n\\t\\t\\t\\t\\tfunc=jsobj[key];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\titem[key] = ()=>{\\r\\n\\t\\t\\t\\t\\tif (wrapperfunction()){\\r\\n\\t\\t\\t\\t\\t\\tfunc();\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tfinish();\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tdestination_array.push(item);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tdestination_array.push(source_array[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn destination_array;\\r\\n\\t};\\r\\n\\tlet gennewdeck = () => {\\r\\n\\t\\tlet deck =  [\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.survey]),\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.survey]),\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.warfare]),\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.producetrade]),\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.producetrade]),\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.colonize]),\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.colonize]),\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.research]),\\r\\n\\t\\t\\tObject.assign({'id':gen_unique_id()}, game.stacks.rolecards[game.stacks.research]),\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\t'id':gen_unique_id(),\\r\\n\\t\\t\\t\\ttype : 'politics',\\r\\n\\t\\t\\t\\t'selected':false,\\r\\n\\t\\t\\t\\taction : (callback)=>{\\r\\n\\t\\t\\t\\t\\tlet callbackwrapper = ()=>{ \\t\\r\\n\\t\\t\\t\\t\\t\\tdocument.removeEventListener('choicemade',callbackwrapper);\\r\\n\\t\\t\\t\\t\\t\\tpolitics(getActPlyr().activeaction, game.choices[0], getActPlyr());\\r\\n\\t\\t\\t\\t\\t\\tcallback();\\r\\n\\t\\t\\t\\t\\t};\\t\\r\\n\\t\\t\\t\\t\\tgame.displayinfo.center_or_planets=true;\\r\\n\\t\\t\\t\\t\\tgame.displayinfo.selectionzone='rolecards';\\r\\n\\t\\t\\t\\t\\tgame.displayinfo.alwMulti=false;\\r\\n\\t\\t\\t\\t\\tgame.displayinfo.showoptiontoskip=false;\\r\\n\\t\\t\\t\\t\\tgame.messagetoplayer.push('choose a card from the center row to add to your hand');\\r\\n\\t\\t\\t\\t\\tdocument.addEventListener('choicemade',callbackwrapper);\\r\\n\\t\\t\\t\\t\\tpresent_as_choice(game.stacks.rolecards);\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\trole : null,\\r\\n\\t\\t\\t\\ticons : {'survey':0,'warfare':0,'colonize':0,'produce':0,'trade':0,'research':0,'politics':1},\\r\\n\\t\\t\\t\\tname : 'Politics',\\r\\n\\t\\t\\t\\timage : null\\r\\n\\t\\t\\t}\\r\\n\\t\\t];\\r\\n\\t\\treturn deck;\\r\\n\\t};\\r\\n\\tlet phaseincrement = () => game.currentphase++;\\r\\n\\tlet newgame = (number_of_players) => {\\r\\n\\t\\tlobby.online=true;\\r\\n\\t\\tinitgame(number_of_players);\\r\\n\\t\\tinitSocket(()=>ws.emit('message',jstr({'header':'newgame',game:game,sets:lobby.sets,number_of_players:game.players.length})));\\r\\n\\t\\t\\r\\n\\t};\\r\\n\\tlet initSocket = (func) => {\\r\\n\\t\\tlet ping = () => { setTimeout( () => { ws.emit('message',jstr({header:'ping'})); ping(); },2000); };\\r\\n\\t\\tws = io();\\r\\n\\t\\tws.on('connect',()=>{ log('connected');\\r\\n\\t\\t\\tws.on('id',(msg)=>{ log('id');\\r\\n\\t\\t\\t\\tlog(jprs(msg));\\r\\n\\t\\t\\t\\tgame = {...game,\\r\\n\\t\\t\\t\\t\\tgame_id:jprs(msg),\\r\\n\\t\\t\\t\\t\\thader:'',\\r\\n\\t\\t\\t\\t\\tcurrentphase:game.currentphase+1};\\r\\n\\t\\t\\t\\tlobby = {...lobby,\\r\\n\\t\\t\\t\\t\\texistinggames:[...lobby.existinggames, game],\\r\\n\\t\\t\\t\\t\\tonline:true};\\r\\n\\t\\t\\t\\tregisterws();\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tws.on('fetch',(msg)=>{ log('fetch');\\r\\n\\t\\t\\t\\tlog(jprs(msg));\\r\\n\\t\\t\\t\\tgame.currentphase = -1;\\r\\n\\t\\t\\t\\tlobby = {...lobby,\\r\\n\\t\\t\\t\\t\\texistinggames: jprs(msg).map(el=>el.game).filter(g=>g.players.filter(ll=>ll.available).length > 0),\\r\\n\\t\\t\\t\\t\\tonline:true}\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tws.on('enter',(msg)=>{ log('enter');\\r\\n\\t\\t\\t\\tlog(jprs(msg));\\r\\n\\t\\t\\t\\tgame = {...jprs(msg),phasse:game.phases,gamesequence:game.gamesequence};\\r\\n\\t\\t\\t\\tlobby = { ...lobby,\\r\\n\\t\\t\\t\\t\\tonline:true,\\r\\n\\t\\t\\t\\t\\tplayer_id:Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10)\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tws.on('join',(msg)=>{ log('join');\\r\\n\\t\\t\\t\\tmsg = jprs(msg);\\r\\n\\t\\t\\t\\tlog(msg);\\r\\n\\t\\t\\t\\tgame.players[msg.slot] = msg.player;\\r\\n\\t\\t\\t\\tlog('available slots: ', game.players.reduce((acc,cur)=>acc + (cur.available) ? 1 : 0,0));\\r\\n\\t\\t\\t\\tif (game.players.reduce((acc,cur)=>acc + (cur.available) ? 1 : 0,0) == 0) finish();\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tws.on('set',(msg)=>{ //log('set'); \\r\\n\\t\\t\\t\\tlog(jprs(msg));\\r\\n\\t\\t\\t\\tgame = {...jprs(msg),phasse:game.phases,gamesequence:game.gamesequence};\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tfunc();\\r\\n\\t\\t\\tping();\\r\\n\\t\\t})\\r\\n\\t}\\r\\n\\tlet fetchexistinggames = () => initSocket(()=> ws.emit('message',jstr({'header':'fetchexisting'})));\\r\\n\\tlet enterexistinggame = (g) => {\\r\\n\\t\\tlet slot = g.players.findIndex(p=>p.available);\\r\\n\\t\\tif (!lobby.init) initgame(g.number_of_players); \\r\\n\\t\\tws.emit('message',jstr({'header':'enterexisting',game_id:g.game_id,player_name:lobby.screename,slot:slot}));\\r\\n\\t};\\r\\n\\tlet sendstate = () => lobby.online && ws.emit('message',jstr({...game,'header':'set','sender':lobby.player_id}));\\r\\n\\tlet registerws = () => ws.emit('message',jstr({...game,'header':'register','sender':lobby.player_id}));\\r\\n\\tlet initgame = (number_of_players) => {\\r\\n\\t\\tgame.label = lobby.screenname;\\r\\n\\t\\tlobby.init=true;\\r\\n\\t\\tgenplanetdeck();\\r\\n\\t\\tfor (let i = 0; i < number_of_players; i++){\\r\\n\\t\\t\\tgenplayer(i);\\r\\n\\t\\t}\\r\\n\\t\\tgen_research_deck();\\r\\n\\t\\tgengamesequence();\\r\\n\\t\\tif (!lobby.online) {\\r\\n\\t\\t\\tgen_game_id();\\r\\n\\t\\t\\tgen_player_names();\\r\\n\\t\\t} \\r\\n\\t};\\r\\n\\tlet gen_player_names = () => game.players.forEach((plyr,i)=>plyr.name = 'Player '+(i+1));\\r\\n\\tlet toggle_center_or_planets = () => game.displayinfo.center_or_planets = !game.displayinfo.center_or_planets;\\r\\n\\tlet toggle_research = () => game.displayinfo.center_or_research = !game.displayinfo.center_or_research;\\r\\n\\tlet togglepasstoplayer = () => {\\r\\n\\t\\tgame.passtoplayer = !game.passtoplayer;\\r\\n\\t\\topenFullscreen();\\r\\n\\t};\\r\\n\\tlet class_gen = (zone, item) => (game.displayinfo.selectionzone==zone) ? ((item.selected) ? \\\"selected\\\" : \\\"selectable\\\" )  : \\\"bordered\\\";\\r\\n\\t\\r\\n\\tlet gen_game_id = () => {\\r\\n\\t\\tgame.game_id ='';\\r\\n\\t\\tgame.game_id += Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\\r\\n\\t};\\r\\n\\tlet knuthshuffle = (array) => {\\r\\n\\t\\tlet currentIndex = array.length;\\r\\n\\t\\tlet temporaryValue, randomIndex;\\r\\n\\t\\t// While there remain elements to shuffle...\\r\\n\\t\\twhile (0 !== currentIndex) {\\r\\n\\t\\t\\t// Pick a remaining element...\\r\\n\\t\\t\\trandomIndex = Math.floor(Math.random() * currentIndex);\\r\\n\\t\\t\\tcurrentIndex -= 1;\\r\\n\\r\\n\\t\\t\\t// And swap it with the current element.\\r\\n\\t\\t\\ttemporaryValue = array[currentIndex];\\r\\n\\t\\t\\tarray[currentIndex] = array[randomIndex];\\r\\n\\t\\t\\tarray[randomIndex] = temporaryValue;\\r\\n\\t\\t}\\r\\n\\t\\treturn array;\\r\\n\\t};\\r\\n\\tlet drag = (evt,item) => () => game.displayinfo.dragged=item;\\r\\n\\tlet drop = (evt,zone) => () => {\\r\\n\\t\\tlet el = document.getElementById('playedcards').getBoundingClientRect();\\r\\n\\t\\tif (evt.changedTouches[0].clientX > el.left\\r\\n\\t\\t&& evt.changedTouches[0].clientX < el.left+ el.width\\r\\n\\t\\t&& evt.changedTouches[0].clientY < el.top+el.height\\r\\n\\t\\t&& evt.changedTouches[0].clientY > el.top){\\r\\n\\t\\t\\tif(game.displayinfo.dragged!==null) \\r\\n\\t\\t\\t\\tchoosewrapper(game.displayinfo.dragged,zone);\\r\\n\\t\\t\\tgame.displayinfo.dragged!=null;\\r\\n\\t\\t}\\r\\n\\t\\tlet ll = document.querySelector('#dragged');\\r\\n\\t\\tll.style.visibility=\\\"hidden\\\";\\r\\n\\t};\\r\\n\\tlet move = (evt, img) => () => {\\r\\n\\t\\tlet touch = evt.targetTouches[0];\\r\\n\\t\\t// Place element where the finger is\\r\\n\\t\\tlet el = document.querySelector('#dragged');\\r\\n\\t\\tel.style.position = \\\"absolute\\\";\\r\\n\\t\\tel.style.visibility=\\\"visible\\\";\\r\\n\\t\\tel.style.top = touch.pageY-75+'px';\\r\\n\\t\\tel.style.left = touch.pageX-50+'px';\\r\\n\\t\\tel.style.width = \\\"100px\\\";\\r\\n\\t\\tel.style.height = \\\"137px\\\";\\r\\n\\t\\tel.style.zIndex = \\\"4\\\";\\r\\n\\t\\tel.style.backgroundImage=\\\"url('\\\"+img+\\\"')\\\";\\r\\n\\t};\\r\\n\\tlet newoffline = () => {\\r\\n\\t\\tlobby.online=false;\\r\\n\\t\\tgame.currentphase = 0;\\r\\n\\t\\tinitgame(2);\\r\\n\\t\\tfinish();;\\r\\n\\t};\\r\\n\\tlet setplayername = (name) => {\\r\\n\\t\\tlobby.screename = name;\\r\\n\\t\\tphaseincrement();\\r\\n\\t};\\r\\n\\tlet openFullscreen = () => {\\r\\n\\t\\tlet elem = document.getElementById(\\\"screen\\\");\\r\\n\\t\\tif (elem.requestFullscreen) {\\r\\n\\t\\telem.requestFullscreen();\\r\\n\\t\\t} else if (elem.mozRequestFullScreen) { /* Firefox */\\r\\n\\t\\telem.mozRequestFullScreen();\\r\\n\\t\\t} else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\\r\\n\\t\\telem.webkitRequestFullscreen();\\r\\n\\t\\t} else if (elem.msRequestFullscreen) { /* IE/Edge */\\r\\n\\t\\telem.msRequestFullscreen();\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\t\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n\\t.show {\\r\\n\\t\\tborder-radius: 0% 50% 50% 0%;\\r\\n\\t}\\r\\n\\t.show, .research {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: 20vh;\\r\\n\\t\\theight: 25vh;\\r\\n\\t\\twidth: 25vh;\\r\\n\\t\\tbackground: rgb(80,80,80);\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\tborder:0.5px solid rgb(49, 158, 177);\\r\\n\\t\\tz-index:2;\\r\\n\\t}\\r\\n\\t.research {\\r\\n\\t\\tborder-radius: 50% 0% 0% 50%;\\r\\n\\t\\tright:0%;\\r\\n\\t}\\r\\n\\t.player {\\r\\n\\t\\tborder-radius: 5vh;\\r\\n\\t\\tbackground: rgb(80,80,80);\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\t\\r\\n\\t}\\r\\n\\t.stars {\\r\\n\\tposition: absolute;\\r\\n\\ttop: 50%;\\r\\n\\tleft: 50%;\\r\\n\\twidth: 2px;\\r\\n\\theight: 2px;\\r\\n\\tbox-shadow: 686px 466px #d4d4d4, 630px 365px whitesmoke, 1140px 224px #ededed, 1048px 344px white, 857px 70px #e3e3e3, 651px 400px #dbdbdb, 431px -107px #d1d1d1, -144px 151px #d4d4d4, 139px 402px #f7f7f7, 1090px -160px #c9c9c9, 1489px 75px #d6d6d6, -404px -113px #e0e0e0, -94px -358px #fafafa, 692px -211px #fcfcfc, 1414px 403px #e3e3e3, 445px -469px whitesmoke, 437px -173px #cfcfcf, -1474px 79px #e8e8e8, 286px -370px #e3e3e3, -389px -74px #f2f2f2, -386px 230px #cccccc, 1289px -415px #f0f0f0, 566px 6px #d1d1d1, 645px 53px #f7f7f7, 90px -232px #d4d4d4, 868px 214px #dedede, 633px -126px #c4c4c4, -1432px -324px #c4c4c4, 486px -11px #f0f0f0, 1484px 338px #f2f2f2, 1496px -127px #e8e8e8, 587px -446px #f0f0f0, 695px -142px #e6e6e6, 1145px 14px #f0f0f0, 339px -36px #d4d4d4, 193px -337px #ebebeb, -1364px -453px #ebebeb, 287px -252px whitesmoke, 888px 94px #fafafa, 485px 148px #c4c4c4, -619px -26px #d6d6d6, -1016px -251px #c9c9c9, -369px -387px #e3e3e3, -87px -433px #f2f2f2, -128px 162px #ededed, 285px 468px #cfcfcf, -715px -447px #cfcfcf, 1124px -404px #d9d9d9, 1209px 248px #e6e6e6, 831px -459px #f7f7f7, -1320px 390px #fafafa, -416px 189px #ebebeb, -1445px -2px #d6d6d6, -765px -181px #e3e3e3, -217px -471px #ededed, 1283px 76px #e6e6e6, -718px -474px #e0e0e0, 198px -71px #dbdbdb, 1009px -200px #f2f2f2, -1418px 200px #d4d4d4, 1354px -349px #dedede, -934px 243px #cfcfcf, -116px 465px #e8e8e8, -314px 446px #c9c9c9, -338px -311px #dbdbdb, 307px 92px #fcfcfc, -1414px 412px #c4c4c4, -1296px 472px #fcfcfc, -787px -76px #e0e0e0, -398px 466px #dbdbdb, -532px 144px #d6d6d6, -1449px -143px #c7c7c7, 755px -101px #d9d9d9, 222px 355px #dbdbdb, -1145px -318px #d4d4d4, 355px -463px whitesmoke, -807px -336px white, -398px -471px #c4c4c4, -935px 152px #d4d4d4, 1082px 166px #d1d1d1, 456px -159px #dedede, -818px 270px #dbdbdb, 63px 270px white, 60px 3px #c9c9c9, 560px 173px whitesmoke, 1217px -292px #ebebeb, -913px -419px #c2c2c2, -790px -386px #e6e6e6, 988px -472px #cfcfcf, -318px -476px #f2f2f2, -179px -282px #f7f7f7, 1079px -27px #fafafa, -1179px -466px #cccccc, 322px -193px #c7c7c7, -545px -269px #cccccc, -1188px 318px #e0e0e0, 19px 227px #d9d9d9, -1141px -437px #d9d9d9, 475px 86px #cfcfcf, 93px 208px #fcfcfc, -734px -222px #fcfcfc, -487px 61px #ebebeb, 1136px 107px #d6d6d6, 211px -291px #ebebeb, -1003px 91px #c2c2c2, 1379px 462px #e8e8e8, -85px -412px #e8e8e8, 549px -129px #cfcfcf, -269px -428px #c4c4c4, -442px 281px #c2c2c2, -116px -186px #c2c2c2, -1092px 252px #e8e8e8, 598px -47px #c4c4c4, 599px 430px #e0e0e0, 946px 225px #e3e3e3, 994px -441px #c9c9c9, -265px 4px #d4d4d4, 1376px -454px #d9d9d9, -963px -224px white, -202px -223px #cfcfcf, 1005px -201px #e3e3e3, -659px -302px #f2f2f2, -325px 397px #c2c2c2, -44px -391px #c2c2c2, 228px -223px #dedede, -603px 221px #dedede, -147px -397px #c9c9c9, 75px -394px #d9d9d9, -308px 239px #f0f0f0, -807px -74px #dbdbdb, -857px -235px #f0f0f0, 1055px 465px #d9d9d9, 307px 252px #cccccc, -1249px 25px #d1d1d1, 669px 304px #dbdbdb, -738px -341px #f0f0f0, -1063px -20px #ebebeb, -1476px -271px #e8e8e8, -20px -415px #cccccc, -1010px 338px #d4d4d4, -166px -3px #cfcfcf, 129px 7px #e0e0e0, 618px 10px #ededed, -1481px -273px #f2f2f2, -965px -193px #c4c4c4, 1271px 431px #f2f2f2, 991px -315px #c4c4c4, -918px 270px #d1d1d1, -1172px -216px #ebebeb, 1483px 449px #dedede, 728px 104px #e6e6e6, 144px -366px white, -656px 42px #f2f2f2, -527px -371px #f7f7f7, 76px 231px #d1d1d1, 1073px -183px #ededed, 520px 120px #e3e3e3, -163px 16px #cccccc, -1367px 82px #d6d6d6, -484px -131px whitesmoke, 279px -435px #e8e8e8, 446px -149px #e0e0e0, -735px 379px #ededed, -794px -442px #f2f2f2, 1314px 452px #c2c2c2, -1146px -65px #d6d6d6, -6px -390px #fafafa, 524px -183px #cccccc, 641px -148px #e3e3e3, 827px -341px #dedede, 150px 150px #d4d4d4, -1206px 417px #cccccc, -86px -451px #d1d1d1, 1144px -22px #e0e0e0, -336px -144px #c2c2c2, 436px 173px #c2c2c2, 506px -318px #fafafa, 167px 90px #cccccc, 128px 220px #ebebeb, -344px 424px #c2c2c2, 609px 393px #fcfcfc, 298px 211px #c2c2c2, -595px -339px #cccccc, 1184px -338px #c7c7c7, -1149px 118px #dbdbdb, -891px 14px #ebebeb, 107px -419px #d9d9d9, -233px -330px #f0f0f0, -1457px 443px #dedede, -217px 86px #d4d4d4, 1142px 83px #c4c4c4, 623px 309px #f7f7f7, 503px -216px #e8e8e8, -989px -176px #ebebeb, -269px 291px #e3e3e3, 483px 22px #fcfcfc, 1290px 302px #cccccc, -1016px -273px #c7c7c7, -1426px -65px #e3e3e3, 162px -341px #c7c7c7, -103px 335px #dbdbdb, 944px -441px #e3e3e3, 1151px 163px #e8e8e8, -1110px -42px #cfcfcf, -901px 15px #c4c4c4, 179px 60px #dbdbdb, 695px -320px #e3e3e3, -923px -348px white, 1102px 373px #e0e0e0, -823px 154px whitesmoke, -695px 424px #f2f2f2, 1421px -336px #d9d9d9, -947px -471px #fcfcfc, 1267px -410px #fafafa, 140px -470px #d1d1d1, -931px -476px #d4d4d4, 650px -354px #c7c7c7, -838px -426px #dedede, 810px 339px #d1d1d1, -1405px 343px #d9d9d9, 183px -17px #e3e3e3, -1275px -237px #f2f2f2, -666px -74px white, -1155px 61px #e6e6e6, -1478px 48px #ebebeb, -146px 288px #f0f0f0, 936px -277px #e3e3e3, 770px 409px #d6d6d6, 935px 443px #c4c4c4, -616px -408px #f0f0f0, -97px -268px #c9c9c9, -6px -292px white, 10px 262px #ebebeb, 791px 438px #f2f2f2, 470px -34px #d6d6d6, 679px -298px #d6d6d6, 1271px -303px whitesmoke, 480px 166px #e0e0e0, -502px -241px #d9d9d9, 599px -435px #d1d1d1, 1317px 176px #c2c2c2, 1124px -126px #d6d6d6, 17px -358px #c2c2c2, 1364px 232px #cccccc, -1176px -248px #c2c2c2, 1178px -175px white, 84px -98px #c9c9c9, -494px 305px #cccccc, -464px 476px whitesmoke, 269px -250px #e3e3e3, -381px 59px #e3e3e3, 805px -247px #e8e8e8, 103px -60px #d6d6d6, -1368px -210px #f0f0f0, 304px 39px whitesmoke, 1189px 457px #d9d9d9, -1171px 447px #ebebeb, -1447px -25px #f2f2f2, -507px -347px #f7f7f7, 835px -473px #cfcfcf, 544px 133px #cccccc, -254px 36px #c9c9c9, -134px 4px #d9d9d9, -727px -88px #ededed, 200px 92px #f7f7f7, -1372px -93px #e6e6e6, -16px -17px #d1d1d1, 707px -152px #cfcfcf, -442px 311px #c4c4c4, -77px 112px #ebebeb, -1488px 226px #c2c2c2, -1151px 431px white, 1180px -95px #d6d6d6, -836px -263px #f2f2f2, -35px 327px #fafafa, 1242px -238px #e8e8e8, -679px -273px #c4c4c4, 296px 401px #cfcfcf, -724px 70px #f0f0f0, -1350px -171px #f0f0f0, 53px 113px whitesmoke, 1112px -207px #fafafa, 276px -437px #d9d9d9, 513px 429px whitesmoke, 30px 343px #cccccc, 60px 86px #dbdbdb, 654px -157px #f2f2f2, 970px 299px #cfcfcf, -1247px -264px #ebebeb, -697px 301px #c7c7c7, -205px 50px #ebebeb, -332px 192px #fcfcfc, 1077px -374px #c9c9c9, -856px -449px #e6e6e6, 313px 389px #fcfcfc, 262px -378px #c7c7c7, -801px -206px #c7c7c7, -330px -8px #f7f7f7, 284px 3px #cccccc, -1264px 478px #cccccc, 1458px -160px whitesmoke, -906px -225px #dedede, 503px -98px #c7c7c7, 93px -84px #dedede, 1201px -347px #f7f7f7, 580px 265px #e0e0e0, 1495px -157px whitesmoke, -100px -255px #e8e8e8, 214px 462px #ebebeb, 20px -185px #ededed, 1134px -381px #ededed, -1263px 281px #ebebeb, -748px 113px #ebebeb, -1371px -137px whitesmoke, 13px -13px #cfcfcf, 1116px 101px #e6e6e6, -139px -410px #c7c7c7, 258px -83px #c9c9c9, -1336px 351px #e6e6e6, 502px 1px #e0e0e0, 268px -269px #c2c2c2, -549px 50px #c9c9c9, 1191px -363px #c7c7c7, -117px -271px #f2f2f2, 287px 288px #dbdbdb, -78px -95px #fafafa, -567px 228px #cfcfcf, -911px -285px #c2c2c2, 1242px -257px #fafafa, 1304px 336px #ededed, -66px -117px #c4c4c4, -560px 198px #c9c9c9, -1229px -245px whitesmoke, -980px 144px #d1d1d1, -982px -453px #ebebeb, -1056px 272px #d4d4d4, -30px -247px #e8e8e8, -741px 456px #d6d6d6, -1467px 397px #f2f2f2, -1341px 134px #dbdbdb, 1226px -408px #cfcfcf, 995px 345px #c7c7c7, 564px 167px #e6e6e6, -333px 33px #f7f7f7, -1198px 433px #ebebeb, 1308px 356px #e3e3e3, 997px 286px #d1d1d1, 734px 213px #ebebeb, -1256px -173px whitesmoke, 847px -200px #cfcfcf, -751px 429px #dedede;\\r\\n\\tanimation: fly 3s linear infinite;\\r\\n\\ttransform-style: preserve-3d;\\r\\n\\t}\\r\\n\\t.stars:before, .stars:after {\\r\\n\\tcontent: \\\"\\\";\\r\\n\\tposition: absolute;\\r\\n\\twidth: inherit;\\r\\n\\theight: inherit;\\r\\n\\tbox-shadow: inherit;\\r\\n\\t}\\r\\n\\t.stars:before {\\r\\n\\ttransform: translateZ(-300px);\\r\\n\\tanimation: fade1 3s linear infinite;\\r\\n\\t}\\r\\n\\t.stars:after {\\r\\n\\ttransform: translateZ(-600px);\\r\\n\\tanimation: fade2 3s linear infinite;\\r\\n\\t}\\r\\n\\r\\n\\t@keyframes fly {\\r\\n\\tfrom {\\r\\n\\t\\ttransform: translateZ(0px);\\r\\n\\t}\\r\\n\\tto {\\r\\n\\t\\ttransform: translateZ(300px);\\r\\n\\t}\\r\\n\\t}\\r\\n\\t@keyframes fade1 {\\r\\n\\tfrom {\\r\\n\\t\\topacity: .5;\\r\\n\\t}\\r\\n\\tto {\\r\\n\\t\\topacity: 1;\\r\\n\\t}\\r\\n\\t}\\r\\n\\t@keyframes fade2 {\\r\\n\\tfrom {\\r\\n\\t\\topacity: 0;\\r\\n\\t}\\r\\n\\tto {\\r\\n\\t\\topacity: .5;\\r\\n\\t}\\r\\n\\t}\\r\\n\\r\\n\\t.pass {\\r\\n\\t\\tborder-radius:1vh;\\r\\n\\t\\theight: 50px;\\r\\n\\t\\tmin-width: 200px;\\r\\n\\t\\tbackground:rgb(80,80,80);\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t}\\r\\n\\t.messagetoplayer{\\r\\n\\t\\ttext-align: center;\\r\\n\\t\\tbackground: rgb(80,80,80);\\r\\n\\t\\tborder-radius: 5vh;\\r\\n\\t\\twidth: 60%;\\r\\n\\t\\tmargin-left: 20%;\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop:75%;\\r\\n\\t}\\r\\n\\t.selectable{\\r\\n\\t\\tborder: solid rgb(114, 210, 223);\\r\\n\\t\\tborder-width: 1px;\\r\\n\\t}\\r\\n\\t.selected{\\r\\n\\t\\tborder: solid rgb(50, 190, 132);\\r\\n\\t\\tborder-width: 1px;\\r\\n\\t}\\r\\n\\t.flex {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t}\\r\\n\\r\\n\\t.playerinfo {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t\\tjustify-content:flex-start;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 10%;\\r\\n\\t}\\r\\n\\r\\n\\t.playingfield {\\r\\n\\t\\toverflow: hidden;\\r\\n\\t\\tmin-height:100vh;\\r\\n\\t\\tmin-width: 100vw;\\r\\n\\t\\tmin-height:100vh;\\r\\n\\t\\tmin-width: 100vw;\\r\\n\\t\\tbackground: radial-gradient(rgb(82,48,103), rgb(10,10,10));\\r\\n\\t\\tbackground-repeat: no-repeat;\\r\\n\\t\\tbackground-size: cover;\\r\\n\\t}\\r\\n\\t\\r\\n\\t.options, .talloptions{\\r\\n\\t\\tbackground-image: url(\\\"/images/embackground.png\\\");\\r\\n\\t\\tbackground-repeat: no-repeat;\\r\\n\\t\\tdisplay:flex; \\r\\n\\t\\tflex-direction:row; \\r\\n\\t\\tjustify-content: space-around;\\r\\n\\t\\tposition: absolute; \\r\\n\\t\\tright:10%;\\r\\n\\t\\ttop: 50%;\\r\\n\\t\\theight: 15%;\\r\\n\\t\\twidth:80%;\\r\\n\\t\\tfont-size: 150%;\\r\\n\\t}\\r\\n\\t.talloptions{\\r\\n\\t\\theight:30%;\\r\\n\\t}\\r\\n\\t.ownedcards{\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t\\theight:20%;\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop:80%;\\r\\n\\t}\\r\\n\\t.hand{\\r\\n\\t\\tmargin: auto;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t\\tmax-width: 90%;\\r\\n\\t\\tmax-height: 100%;\\r\\n\\t\\toverflow-x: scroll;\\r\\n\\t\\toverflow-y: hidden;\\r\\n\\t}\\r\\n\\t.deck, .discard {\\r\\n\\t\\tborder-radius: 3vh;\\r\\n\\t\\tmin-width: 19vh;\\r\\n\\t\\tmax-width: 19vh;\\r\\n\\t\\tbackground-repeat:no-repeat;\\r\\n\\t\\ttext-align:center;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tfont-size: 6vh;\\r\\n\\t}\\r\\n\\t.deck{\\r\\n\\t\\tmargin-right:auto;\\r\\n\\t\\tbackground-image:url('../images/card-draw.svg');\\r\\n\\t}\\r\\n\\t.discard{\\r\\n\\t\\tmargin-left:auto;\\r\\n\\t\\tbackground-image:url('../images/card-burn.svg');\\r\\n\\t}\\r\\n\\t.zone {\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\toverflow-x: scroll;\\r\\n\\t\\toverflow-y: hidden;\\r\\n\\t\\tdisplay:flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t}\\r\\n\\t.centerrow{\\r\\n\\t\\theight:40%;\\r\\n\\t\\tposition:absolute;\\r\\n\\t\\ttop:15%;\\r\\n\\t}\\r\\n\\t.researchrow{\\r\\n\\t\\theight:40%;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tpadding-left: 30vh;\\r\\n\\t\\twidth: 70vw;\\r\\n\\t}\\r\\n\\t.researchrow > div{\\r\\n\\t\\theight:95%;\\r\\n\\t}\\r\\n\\t.playedcards{\\r\\n\\t\\theight:20%;\\r\\n\\t\\toverflow-x:scroll;\\r\\n\\t\\tposition:absolute;\\r\\n\\t\\ttop:55%;\\r\\n\\t\\tjustify-content: flex-start;\\r\\n\\t}\\r\\n\\t.bordered{\\r\\n\\t\\tborder: solid #000;\\r\\n\\t\\tborder-width: 1px;\\r\\n\\t}\\r\\n\\t::-webkit-scrollbar { \\r\\n\\t\\tdisplay: none;  \\r\\n\\t}\\r\\n\\t.playercountselector > p {\\r\\n\\t\\theight:33%; \\r\\n\\t\\ttext-align: center; \\r\\n\\t\\tfont-size: 300%;\\r\\n\\t\\tbackground-color: rgb(34, 26, 59);\\r\\n\\t\\tborder: solid #000;\\r\\n\\t\\tborder-width: 1px;\\r\\n\\t}\\r\\n\\t.playercountselector > input {\\r\\n\\t\\theight:33%; \\r\\n\\t\\ttext-align: center; \\r\\n\\t\\twidth:100%;\\r\\n\\t\\tfont-size: 300%;\\r\\n\\t\\tbackground-color: rgb(34, 26, 59);\\r\\n\\t\\tborder: solid #000;\\r\\n\\t\\tborder-width: 1px;\\r\\n\\t\\tcolor: rgb(49, 158, 177);\\r\\n\\t\\tpadding: 0px;\\r\\n\\t\\tmargin:0px;\\r\\n\\t}\\r\\n\\t.passtoplayer{\\r\\n\\t\\theight:80%;\\r\\n\\t\\twidth:100%;\\r\\n\\t\\ttop:10%;\\r\\n\\t\\tborder: solid #000;\\r\\n\\t\\tborder-width: 1px;\\r\\n\\t\\ttext-align: center;\\r\\n\\t\\tfont-size: 300%;\\r\\n\\t\\tcolor:white;\\r\\n\\t\\tbackground-color: rgb(34, 26, 59);\\r\\n\\t}\\r\\n</style>\\r\\n{#if mounted}\\r\\n\\t{#if game.currentphase==-4}\\r\\n\\t<div class=\\\"playercountselector\\\">\\r\\n\\t\\t<p> Choose your Screen Name</p>\\t\\r\\n\\t\\t<input type=\\\"text\\\" bind:value={lobby.screenname} on:keypress={(e)=>{if(e.key=='Enter') setplayername(lobby.screenname)} }>\\r\\n\\t\\t<p on:click=\\\"{()=>setplayername(lobby.screenname)}\\\" on:tap=\\\"{()=>setplayername(lobby.screenname)}\\\">Finished</p>\\r\\n\\t</div>\\r\\n\\t{:else if game.currentphase==-3}\\r\\n\\t<div class=\\\"playercountselector\\\">\\r\\n\\t\\t<p on:click={()=>phaseincrement()} on:tap={()=>phaseincrement()}>Start a New Online Game</p>\\r\\n\\t\\t<p on:click={()=>fetchexistinggames()} on:tap={()=>fetchexistinggames()}>Join an Existing Online Game</p>\\r\\n\\t\\t<p on:click={()=>newoffline()} on:tap={()=>newoffline()}>Start a New Offline Game</p>\\r\\n\\t</div>\\r\\n\\t{:else if game.currentphase==-2}\\r\\n\\t<div class=\\\"playercountselector\\\">\\r\\n\\t\\t<p> Choose your Game's number of Players</p>\\r\\n\\t\\t<p on:click={(e) => newgame(2)} on:tap={(e) => newgame(2)}>2</p>\\r\\n\\t\\t<p on:click={(e) => newgame(3)} on:tap={(e) => newgame(3)}>3</p>\\r\\n\\t\\t<p on:click={(e) => newgame(4)} on:tap={(e) => newgame(4)}>4</p>\\r\\n\\t</div>\\r\\n\\t{:else if game.currentphase==-1}\\r\\n\\t\\t<div class=\\\"playercountselector\\\">\\r\\n\\t\\t\\t<p>Choose a Game to Join</p>\\r\\n\\t\\t\\t{#each lobby.existinggames as g}\\r\\n\\t\\t\\t\\t<p on:click=\\\"{()=>enterexistinggame(g)}\\\" on:tap=\\\"{()=>enterexistinggame(g)}\\\">{g.label+\\\"'s Game\\\"}</p>\\r\\n\\t\\t\\t{/each}\\r\\n\\t\\t</div>\\r\\n\\t{:else if game.passtoplayer && !lobby.online}\\r\\n\\t\\t<div class='passtoplayer' on:click=\\\"{()=>togglepasstoplayer()}\\\" on:tap=\\\"{()=>togglepasstoplayer()}\\\">\\r\\n\\t\\t\\tpass to next player\\r\\n\\t\\t</div>\\r\\n\\t{:else if !!game.winner}\\r\\n\\t\\t<div class='passtoplayer'>\\r\\n\\t\\t\\t{game.winner} WON!!!!\\r\\n\\t\\t</div>\\r\\n\\t{:else}\\r\\n\\t\\t<div class='stars'></div>\\r\\n\\t\\t<div id=\\\"screen\\\" style=\\\"height:100%;width:100%;\\\" class=\\\"flex\\\">\\r\\n\\t\\t\\t{#each game.players as player}\\r\\n\\t\\t\\t\\t{#if game.players[game.acting_player_index]!==undefined && ((lobby.screenname==player.name && lobby.online) || (game.players[game.acting_player_index].id==player.id && !lobby.online)) }\\r\\n\\t\\t\\t\\t\\t<div class=\\\"bordered playingfield\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div id='dragged'></div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"playerinfo bordered\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t{#each game.players as p}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div style=\\\"width:{100/game.number_of_players}%\\\" class=\\\"flex player {(game.players[game.acting_player_index] !== undefined && p.name == game.players[game.acting_player_index].name) ? 'selectable' : 'bordered'}\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div style=\\\"width:33%; text-align: center;\\\"> Military Might {p.starfighters.small}</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div style=\\\"width:33%; text-align: center;\\\"> Galactic Influence {p.influence.length}</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div style=\\\"width:33%; text-align: center;\\\"> {p.name}</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t\\t\\t\\t\\t<!-- <div style=\\\"width:100%; text-align: center;\\\" class=\\\"bordered\\\"> Remaining Influence throughout the Galaxy {game.influence.length}</div> -->\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<!-- stacks / planets toggle -->\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"show\\\" on:click={()=>toggle_center_or_planets()} on:tap={()=>toggle_center_or_planets()}>\\r\\n\\t\\t\\t\\t\\t\\t\\tshow {(game.displayinfo.center_or_planets) ? \\\"planets\\\" : \\\"center row\\\"}\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"research\\\" on:click={()=>toggle_research()} on:tap={()=>toggle_research()}>\\r\\n\\t\\t\\t\\t\\t\\t\\tshow {(game.displayinfo.center_or_research) ? \\\"research\\\" : \\\"center row\\\"}\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<!-- stacks -->\\r\\n\\t\\t\\t\\t\\t\\t{#if game.displayinfo.selectionzone=='research' || !game.displayinfo.center_or_research}\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"zone researchrow\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{#each game.research_deck as card (card.id)}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Card on:click=\\\"{()=>choosewrapper(card,'research')}\\\" on:tap=\\\"{()=>choosewrapper(card,'research')}\\\" selectable={(game.displayinfo.selectionzone=='research')} {card}/>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t{:else if game.displayinfo.center_or_planets}\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"flex zone centerrow\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{#each game.stacks.rolecards as card (card.name)}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Card {card} selectable={game.displayinfo.selectionzone=='rolecards'} pilecount=\\\"{game.stacks.pilecount[card.type]}\\\" on:click=\\\"{()=>choosewrapper(card,'rolecards')}\\\" on:tap=\\\"{()=>choosewrapper(card,'rolecards')}\\\" on:touchmove=\\\"{(event)=>move(event, '/images/'+card.type+'.png','rolecards')}\\\" on:touchstart=\\\"{(event)=>drag(event,card,'rolecards')}\\\" on:touchend=\\\"{(event)=>drop(event,'rolecards')}\\\"/>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t{/if}\\r\\n\\t\\t\\t\\t\\t\\t{#if !game.displayinfo.center_or_planets}\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"flex zone centerrow\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{#each player.unsettled_planets as planet (planet.id)}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<PlanetCard planet={planet} on:click={()=>choosewrapper(planet,'unsettled_planets')} on:tap={()=>choosewrapper(planet,'unsettled_planets')}/>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{#each [...player.settled_planets, ...player.conquered_planets] as planet (planet.id)}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<PlanetCard planet={planet} selected={game.displayinfo.selectionzone=='settled_&_conquered_planets'} on:click={()=>choosewrapper(planet,'settled_&_conquered_planets')} on:tap={()=>choosewrapper(planet,'settled_&_conquered_planets')} />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t{/if}\\r\\n\\t\\t\\t\\t\\t\\t<!-- played cards-->\\r\\n\\t\\t\\t\\t\\t\\t<div id=\\\"playedcards\\\" class=\\\"flex zone playedcards\\\" >\\r\\n\\t\\t\\t\\t\\t\\t\\t<div style=\\\"margin-right:auto\\\" class=\\\"selectable pass\\\" \\r\\n\\t\\t\\t\\t\\t\\t\\t\\ton:click={(game.displayinfo.showoptiontoskip)?()=>choose([{name:'Skip'}]):()=>{}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ton:tap={(game.displayinfo.showoptiontoskip)?()=>choose([{name:'Skip'}]):()=>{}}>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{(game.displayinfo.showoptiontoskip)?'[Choose None]':'[______]'}\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t{#each game.players[game.acting_player_index].limbo as card (card.id)}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<Card mini={true} on:click={()=>unchoose(card)} on:tap={()=>unchoose(card)} {card}/>\\r\\n\\t\\t\\t\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t\\t\\t\\t\\t<div style=\\\"margin-left:auto\\\" class=\\\"selectable pass\\\" \\r\\n\\t\\t\\t\\t\\t\\t\\t\\ton:click={(game.passp)?()=>pass_priority():(game.passt)?()=>pass_turn():(game.displayinfo.alwMulti && game.choices.length>0)?()=>choose(game[game.displayinfo.choicelabel]):()=>{}}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ton:tap={(game.passp)?()=>pass_priority():(game.passt)?()=>pass_turn():(game.displayinfo.alwMulti && game.choices.length>0)?()=>choose(game[game.displayinfo.choicelabel]):()=>{}}>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{(game.passp)?'[Pass to <br> Next Player]':(game.passt)?'[End Turn]':(game.displayinfo.alwMulti && game.choices.length>0)?'[Choose Selected]':'[______]'}\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"messagetoplayer bordered\\\">{game.messagetoplayer[game.messagetoplayer.length-1]}</div>\\r\\n\\t\\t\\t\\t\\t\\t<!-- hand -->\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"flex zone ownedcards\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class='bordered deck'>{player.deck.length}</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class='hand'>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{#each player.hand as card (card.id)}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Card card={card} mini={true} selectable={game.displayinfo.selectionzone=='hand'} on:touchstart={(event)=>drag(event, card,'hand')} on:touchend={(event)=>drop(event,'hand')} on:touchmove={(event)=>move(event, card.imgurl,'hand')} on:click={()=>{log(card);choosewrapper(card,'hand');}} on:tap={()=>choosewrapper(card,'hand')} />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"bordered discard\\\">{player.discard.length}</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t{/if}\\r\\n\\t\\t\\t{/each}\\r\\n\\t\\t\\t<!-- game.options -->\\r\\n\\t\\t\\t{#if game.displayinfo.selectionzone=='options'}\\r\\n\\t\\t\\t\\t<div class=\\\"{( game.options[0] !== undefined && game.options[0].type !== undefined) ? 'talloptions' : 'options'}\\\">\\r\\n\\t\\t\\t\\t\\t{#each game.options as option (option.name)}\\r\\n\\t\\t\\t\\t\\t\\t{#if option.type !== undefined}\\r\\n\\t\\t\\t\\t\\t\\t\\t<PlanetCard planet={option} selectable={game.displayinfo.selectionzone=='options'} on:click={()=>choosewrapper(option,'options')} on:tap={()=>choosewrapper(option,'options')}/>\\r\\n\\t\\t\\t\\t\\t\\t\\t<PlanetCard planet={{...option,settled:true}} selectable={game.displayinfo.selectionzone=='options'} on:click={()=>choosewrapper(option,'options')} on:tap={()=>choosewrapper(option,'options')}/>\\r\\n\\t\\t\\t\\t\\t\\t{:else}\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"pass {(game.displayinfo.selectionzone=='options') ? ( (option.selected) ? 'selected' : 'selectable' ): 'bordered'}\\\" on:click=\\\"{()=>choosewrapper(option,'options')}\\\" on:tap=\\\"{()=>choosewrapper(option,'options')}\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{option.name}\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t{/if}\\r\\n\\t\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t{/if}\\r\\n\\t\\t</div>\\r\\n\\t{/if}\\r\\n{/if}\"],\"names\":[],\"mappings\":\"AAo4DC,KAAK,4BAAC,CAAC,AACN,aAAa,CAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,AAC7B,CAAC,AACD,iCAAK,CAAE,SAAS,4BAAC,CAAC,AACjB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACzB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,QAAQ,CAAC,AACV,CAAC,AACD,SAAS,4BAAC,CAAC,AACV,aAAa,CAAE,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAC5B,MAAM,EAAE,AACT,CAAC,AACD,OAAO,4BAAC,CAAC,AACR,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACzB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACpB,CAAC,AACD,MAAM,4BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CACllP,SAAS,CAAE,iBAAG,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CACjC,eAAe,CAAE,WAAW,AAC5B,CAAC,AACD,kCAAM,OAAO,CAAE,kCAAM,MAAM,AAAC,CAAC,AAC7B,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,OAAO,AACnB,CAAC,AACD,kCAAM,OAAO,AAAC,CAAC,AACf,SAAS,CAAE,WAAW,MAAM,CAAC,CAC7B,SAAS,CAAE,mBAAK,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,AACnC,CAAC,AACD,kCAAM,MAAM,AAAC,CAAC,AACd,SAAS,CAAE,WAAW,MAAM,CAAC,CAC7B,SAAS,CAAE,mBAAK,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,AACnC,CAAC,AAED,WAAW,iBAAI,CAAC,AAChB,IAAI,AAAC,CAAC,AACL,SAAS,CAAE,WAAW,GAAG,CAAC,AAC3B,CAAC,AACD,EAAE,AAAC,CAAC,AACH,SAAS,CAAE,WAAW,KAAK,CAAC,AAC7B,CAAC,AACD,CAAC,AACD,WAAW,mBAAM,CAAC,AAClB,IAAI,AAAC,CAAC,AACL,OAAO,CAAE,EAAE,AACZ,CAAC,AACD,EAAE,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACX,CAAC,AACD,CAAC,AACD,WAAW,mBAAM,CAAC,AAClB,IAAI,AAAC,CAAC,AACL,OAAO,CAAE,CAAC,AACX,CAAC,AACD,EAAE,AAAC,CAAC,AACH,OAAO,CAAE,EAAE,AACZ,CAAC,AACD,CAAC,AAED,KAAK,4BAAC,CAAC,AACN,cAAc,GAAG,CACjB,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,KAAK,CAChB,WAAW,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACxB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IAAI,AACd,CAAC,AACD,4CAAgB,CAAC,AAChB,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACzB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,GAAG,CAChB,QAAQ,CAAE,QAAQ,CAClB,IAAI,GAAG,AACR,CAAC,AACD,uCAAW,CAAC,AACX,MAAM,CAAE,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAChC,YAAY,CAAE,GAAG,AAClB,CAAC,AACD,qCAAS,CAAC,AACT,MAAM,CAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC/B,YAAY,CAAE,GAAG,AAClB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,MAAM,AACxB,CAAC,AAED,WAAW,4BAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,gBAAgB,UAAU,CAC1B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,AACZ,CAAC,AAED,aAAa,4BAAC,CAAC,AACd,QAAQ,CAAE,MAAM,CAChB,WAAW,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,WAAW,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,gBAAgB,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC1D,iBAAiB,CAAE,SAAS,CAC5B,eAAe,CAAE,KAAK,AACvB,CAAC,AAED,oCAAQ,CAAE,wCAAY,CAAC,AACtB,gBAAgB,CAAE,IAAI,0BAA0B,CAAC,CACjD,iBAAiB,CAAE,SAAS,CAC5B,QAAQ,IAAI,CACZ,eAAe,GAAG,CAClB,eAAe,CAAE,YAAY,CAC7B,QAAQ,CAAE,QAAQ,CAClB,MAAM,GAAG,CACT,GAAG,CAAE,GAAG,CACR,MAAM,CAAE,GAAG,CACX,MAAM,GAAG,CACT,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,wCAAY,CAAC,AACZ,OAAO,GAAG,AACX,CAAC,AACD,uCAAW,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,OAAO,GAAG,CACV,QAAQ,CAAE,QAAQ,CAClB,IAAI,GAAG,AACR,CAAC,AACD,iCAAK,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,MAAM,AACnB,CAAC,AACD,iCAAK,CAAE,QAAQ,4BAAC,CAAC,AAChB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,IAAI,CACf,SAAS,CAAE,IAAI,CACf,kBAAkB,SAAS,CAC3B,WAAW,MAAM,CACjB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,GAAG,AACf,CAAC,AACD,iCAAK,CAAC,AACL,aAAa,IAAI,CACjB,iBAAiB,IAAI,yBAAyB,CAAC,AAChD,CAAC,AACD,oCAAQ,CAAC,AACR,YAAY,IAAI,CAChB,iBAAiB,IAAI,yBAAyB,CAAC,AAChD,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,MAAM,CAClB,QAAQ,IAAI,CACZ,cAAc,CAAE,GAAG,AACpB,CAAC,AACD,sCAAU,CAAC,AACV,OAAO,GAAG,CACV,SAAS,QAAQ,CACjB,IAAI,GAAG,AACR,CAAC,AACD,wCAAY,CAAC,AACZ,OAAO,GAAG,CACV,WAAW,CAAE,MAAM,CACnB,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,IAAI,AACZ,CAAC,AACD,YAAY,CAAG,+BAAG,CAAC,AAClB,OAAO,GAAG,AACX,CAAC,AACD,wCAAY,CAAC,AACZ,OAAO,GAAG,CACV,WAAW,MAAM,CACjB,SAAS,QAAQ,CACjB,IAAI,GAAG,CACP,eAAe,CAAE,UAAU,AAC5B,CAAC,AACD,qCAAS,CAAC,AACT,MAAM,CAAE,KAAK,CAAC,IAAI,CAClB,YAAY,CAAE,GAAG,AAClB,CAAC,4BACD,mBAAmB,AAAC,CAAC,AACpB,OAAO,CAAE,IAAI,AACd,CAAC,AACD,kCAAoB,CAAG,CAAC,cAAC,CAAC,AACzB,OAAO,GAAG,CACV,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACjC,MAAM,CAAE,KAAK,CAAC,IAAI,CAClB,YAAY,CAAE,GAAG,AAClB,CAAC,AACD,kCAAoB,CAAG,KAAK,cAAC,CAAC,AAC7B,OAAO,GAAG,CACV,UAAU,CAAE,MAAM,CAClB,MAAM,IAAI,CACV,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACjC,MAAM,CAAE,KAAK,CAAC,IAAI,CAClB,YAAY,CAAE,GAAG,CACjB,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACxB,OAAO,CAAE,GAAG,CACZ,OAAO,GAAG,AACX,CAAC,AACD,yCAAa,CAAC,AACb,OAAO,GAAG,CACV,MAAM,IAAI,CACV,IAAI,GAAG,CACP,MAAM,CAAE,KAAK,CAAC,IAAI,CAClB,YAAY,CAAE,GAAG,CACjB,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,IAAI,CACf,MAAM,KAAK,CACX,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AAClC,CAAC\"}"
};

const App = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let game,
		lobby,
		corephases,
		actioncardphases,
		mounted = false,
		ws,
		jstr = JSON.stringify;

	beforeUpdate(() => {
		
	});

	afterUpdate(() => {
		console.log(getActPlyr());
	}); // console.log('hand',game.players[0].hand.reduce((acc,cur) => acc+cur.name,''));
	// let card = game.players[0].hand[0];
	// console.log('removing ',card.name);
	// handToLimbo(game.players[0],card);

	// console.log('hand',game.players[0].hand.reduce((acc,cur) => acc+cur.name,''));
	onMount(() => {
		////////////////////////////////////////////////////////////////////////////////
		corephases = [
			/*colonize:*/
			{
				actn: [
					genActionPhase("Choose between Settling or Colonizing a Planet", ["colonize"], wrappedOffer(["Colonize", "Settle Colonies"])),
					genActionPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offer(false, false, ["unsettled_planets"], "subchoices"), ["Settle Colonies"]),
					genActionPhase("Settling your Planet", ["colonize"], () => settle_colonies(getSubChoice(), getActPlyr()), ["Settle Colonies"]),
					genActionPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offer(false, false, ["unsettled_planets"], "subchoices"), ["Colonize"]),
					genActionPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							colonize(getSubChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				lead: [
					genLeadPhase("Choose between Settling or Colonizing a Planet", ["colonize"], wrappedOffer(["Colonize", "Settle Colonies"])),
					genLeadPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offerUnsettled(), ["Settle Colonies"]),
					genLeadPhase(
						"Settling your Planet",
						["colonize"],
						() => {
							settle_colonies(getSubChoice(), getActPlyr());
							finish();
						},
						["Settle Colonies"]
					),
					genLeadPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offerUnsettled(), ["Colonize"]),
					genLeadPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							if (getSubChoice().name == "Skip") finish();
							let planet = getSubChoice();
							if (planet.hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize, 0) >= planet.settle_cost) colonize(planet, getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				fllw: [
					genFollowPhase("Choose between Settling or Colonizing a Planet", ["colonize"], () => {
						if (0 == getActPlyr().permanents.filter(e => "bureaucracy" == e.type).length) {
							game.choices = [{ name: "Colonize" }];
							finish(!0);
						} else simpleOffer(["Colonize", "Settle Colonies"]);
					}),
					genFollowPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offerUnsettled(), ["Settle Colonies"]),
					genFollowPhase(
						"Settling your Planet",
						["colonize"],
						() => {
							settle_colonies(getSubChoice(), getActPlyr());
							finish(!0);
						},
						["Settle Colonies"]
					),
					genFollowPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offerUnsettled(), ["Colonize"]),
					genFollowPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							let planet = getSubChoices().find(planet => planet.hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize) >= planet.settle_cost);
							colonize(planet, getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				clnp: []
			},
			/*/producetrade:/*/
			{
				actn: [
					genActionPhase("Choose between Producing or Trading Resources", ["producetrade"], wrappedOffer(["produce", "trade"])),
					genActionPhase("Choose a Planet to Produce Resources on", ["producetrade"], () => offer(false, false, ["settled_&_conquered_planets"], "subchoices"), ["produce"]),
					genActionPhase(
						"Producing a Resource",
						["producetrade"],
						() => {
							produce(getSubChoices());
							finish(true);
						},
						["produce"]
					),
					genActionPhase("Choose a Planet to Trade Resources from", ["producetrade"], () => offer(false, false, ["settled_&_conquered_planets"], "subchoices"), ["trade"]),
					genActionPhase(
						"Trading a Resource",
						["producetrade"],
						() => {
							trade(getSubChoices(), getActPlyr());
							finish();
						},
						["trade"]
					)
				],
				lead: [
					genLeadPhase("Choose between Producing or Trading Resources", ["producetrade"], () => offer(false, false, ["options", [{ name: "produce" }, { name: "trade" }]], "choices")),
					genLeadPhase("Choose a Planet to Produce Resources on", ["producetrade"], () => offer(true, true, ["settled_&_conquered_planets"], "subchoices"), ["produce"]),
					genLeadPhase(
						"Producing a Resource",
						["producetrade"],
						() => {
							getActPlyr().activerole = "produce";
							let prd = produce(getSubChoices(), getActPlyr().bstIcons.produce);

							if (getActvActn() == "genetic_engineering") prd.forEach(plyr => plyr = [
								...plyr,
								{
									influence: [...plyr.influence, game.influence.pop()]
								}
							]);

							finish(true);
						},
						["produce"]
					),
					genLeadPhase("Choose a Planet to Trade Resources from", ["producetrade"], () => offer(true, true, ["settled_&_conquered_planets"], "subchoices"), ["trade"]),
					genLeadPhase(
						"Trading a Resource",
						["producetrade"],
						() => {
							getActPlyr().activerole = "trade";
							let prd = trade(getSubChoices(), getActPlyr(), getActPlyr().bstIcons.trade);

							if (getActvActn() == "diverse_markets") {
								for (let i in prd) {
									if (prd[i] > 1) {
										getActPlyr().influence.push(game.influence.pop());
									}
								}
							}

							if (getActvActn() == "specialization") {
								for (let i in Array.from(prd[getActPlyr().specialization])) {
									//what on earth is this doing?
									getActPlyr().influence.push(game.influence.pop());
								}
							}

							finish(true);
						},
						["trade"]
					)
				],
				fllw: [
					genFollowPhase("Choose a Planet to Produce Resources on", ["produce"], () => offer(!0, !0, ["settled_&_conquered_planets"], "subchoices")),
					genFollowPhase("Producing a Resource", ["produce"], () => {
						let e = game;
						getActPlyr().activerole = "produce";
						produce(e.subchoices, e.players[game.acting_player_index].bstIcons.produce);
						finish(!0);
					}),
					genFollowPhase("Choose a Planet to Trade Resources from", ["trade"], () => offer(!0, !0, ["settled_&_conquered_planets"], "subchoices")),
					genFollowPhase("Trading a Resource", ["trade"], () => {
						let e = game;
						getActPlyr().activerole = "trade";
						trade(e.subchoices, getActPlyr(), getActPlyr().bstIcons.trade);
						finish(!0);
					})
				],
				clnp: []
			},
			/*/politics:/*/
			{
				actn: [
					genActionPhase("Choose a Role Card to Replace Politics with", ["politics"], () => offer(false, false, ["rolecards"], "choices")),
					genActionPhase("Swapping the Role Card for your Politics Card", ["politics"], () => {
						politics(getActPlyr().limbo.filter(el => el.type == "politics")[0], getChoices()[0], getActPlyr());
						finish(true);
					})
				],
				lead: [],
				fllw: [],
				clnp: []
			},
			/*/research:/*/
			{
				actn: [
					genActionPhase("Choose up to 2 Cards from your Hand to Remove from the Game", ["research"], () => offer(false, true, ["hand"], "choices")),
					genActionPhase("Removing your Cards from the Game", ["research"], () => {
						research(getChoices(), getActPlyr());
						finish(true);
					})
				],
				lead: [
					genLeadPhase("Choose a Technology to Research", ["research"], () => offer(true, false, ["research"], "choices")),
					genLeadPhase("Researching your Technology", ["research"], () => {
						if (getChoice() == "Skip") {
							finish(true);
							return;
						}

						let card = getChoices()[0];
						let p = { advanced: 0, metallic: 0, fertile: 0 };
						[...getActPlyr().settled_planets, ...getActPlyr().conquered_planets].map(el => p[el.type]++);
						let condition = Object.values(card.planet_requirements).reduce((acc, cur, i) => acc ? cur > p[Object.keys(p)[i]] : acc, true);

						if (condition && getActPlyr().bstIcons.research >= card.research_cost) play(
							game.research_deck,
							card.is_permanent
							? getActPlyr().permanents
							: getActPlyr().limbo,
							card.is_permanent ? "" : "discard",
							card.id
						);

						finish(true);
					})
				],
				fllw: [
					genFollowPhase("Choose a Technology to Research", ["research"], () => offer(!0, !1, ["research"], "choices")),
					genFollowPhase("Researching your Technology", ["survey"], () => {
						let e = game;

						if ("Skip" != e.choices[0].name) {
							let a = { advanced: 0, metallic: 0, fertile: 0 };

							[
								...e.players[game.acting_player_index].settled_planets,
								...e.players[game.acting_player_index].conquered_planets
							].map(e => {
								a[e.type]++;
							});

							let p = !0;
							for (let i in e.choices[0].planet_requirements) e.choices[0].planet_requirements[i] > a[i] && (p = !1);
							p && e.players[game.acting_player_index].bstIcons.research >= e.choices[0].research_cost && play(e.research_deck, e.players[game.acting_player_index].limbo, "discard", e.choices[0].id);
						}

						finish(!0);
					})
				],
				clnp: []
			},
			/*/survey:/*/
			{
				actn: [
					genActionPhase("Surveying your Empire", ["survey"], () => {
						survey(getActPlyr());
						finish(true);
					})
				],
				lead: [
					genLeadPhase("Choose a Planet from your Galaxy to Explore", ["survey"], () => {
						for (let i = 0; i < getActPlyr().bstIcons.survey; i++) {
							explore_planet(getActPlyr());
						}

						offer(true, false, ["options", game.options], "choices");
					}),
					genLeadPhase("Surveying your Empire", ["survey"], () => {
						if (getChoice() == "Skip") finish();
						catalog_planet(getActPlyr());
						finish(true);
					})
				],
				fllw: [
					genFollowPhase("Choose a Planet from your Galaxy to Explore", ["survey"], () => {
						let e = game;
						for (let a = 0; a < e.players[game.acting_player_index].bstIcons.survey - 1; a++) explore_planet(e.players[game.acting_player_index]);
						offer(!0, !1, ["options"], "choices");
					}),
					genFollowPhase("Surveying your Empire", ["survey"], () => {
						if (getChoice() == "Skip") finish();
						catalog_planet(game.players[game.acting_player_index]);
						finish(!0);
					})
				],
				clnp: [
					{
						"": () => {
							
						}
					}
				]
			},
			/*/warfare:/*/
			{
				actn: [
					genActionPhase("Choose between Collecting a Starfighter or Conquering a Planet", ["warfare"], wrappedOffer(["Conquer a Planet", "Collect a Starfighter"])),
					genActionPhase(
						"Adding a Starfighter to your Fleet",
						["warfare"],
						() => {
							warfare(getActPlyr());
							finish(true);
						},
						["Collect a Starfighter"]
					),
					genActionPhase("Choose a Planet to Conquer", ["warfare"], () => offer(false, false, ["unsettled_planets"], "subchoices"), ["Conquer a Planet"]),
					genActionPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(getSubChoice(), getActPlyr());
							finish(true);
						},
						["Conquer a Planet"]
					)
				],
				lead: [
					genLeadPhase("Choose between Collecting Starfighters or Conquering a Planet", ["warfare"], wrappedOffer(["Conquer a Planet", "Collect Starfighters"])),
					genLeadPhase(
						"Adding Starfighters to your Fleet",
						["warfare"],
						() => {
							range(1, getActPlyr().bstIcons.warfare).forEach(() => warfare(getActPlyr()));
							finish(true);
						},
						["Collect Starfighters"]
					),
					genLeadPhase("Choose a Planet to Conquer", ["warfare"], () => offerUnsettled(), ["Conquer a Planet"]),
					genLeadPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(getSubChoice(), getActPlyr());
							finish(true);
						},
						["Conquer a Planet"]
					)
				],
				fllw: [
					genFollowPhase("Choose between Collecting Starfighters or Conquering a Planet", ["warfare"], () => {
						if (0 == game.players[game.acting_player_index].permanents.filter(e => "bureaucracy" == e.type).length) {
							let e = game;
							e.choices = [{ name: "Collect Starfighters" }];
							finish(!0);
						} else offer(
							!1,
							!1,
							[
								"options",
								[{ name: "Conquer a Planet" }, { name: "Collect Starfighters" }]
							],
							"choices");
					}),
					genFollowPhase(
						"Adding Starfighters to your Fleet",
						["warfare"],
						() => {
							for (let e = 0; e < game.players[game.acting_player_index].bstIcons.warfare; e++) warfare(game.players[game.acting_player_index]);
							finish(!0);
						},
						["Collect Starfighters"]
					),
					genFollowPhase("Choose a Planet to Conquer", ["warfare"], () => offer(!1, !1, ["unsettled_planets"], "subchoices"), ["Conquer a Planet"]),
					genFollowPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(game.subchoices[0], game.players[game.acting_player_index]);
							finish(!0);
						},
						["Conquer a Planet"]
					)
				],
				clnp: [
					{
						"": () => {
							
						}
					}
				]
			}
		];

		actioncardphases = [
			// #######################################################################################################################################################################################
			// improved_colonize 
			genActionPhase("Choose wether or not to Settle a Planet", ["improved_colonize"], () => offer(true, false, ["options", [{ name: "settle" }, { name: "Skip" }]], "choices")),
			genActionPhase("Choose a Planet to Settle", ["improved_colonize"], () => offerUnsettled(), ["settle"]),
			genActionPhase(
				"Settling your Planet",
				["improved_colonize"],
				() => {
					settle_colonies(getSubChoice(), getActvPlyr());
					finish(true);
				},
				["settle"]
			),
			genActionPhase("Choose between Settling or Colonizing a Planet", ["improved_colonize"], wrappedOffer(["Colonize", "Settle Colonies"])),
			genActionPhase("Choose an Unsettled Planet to Settle", ["improved_colonize"], () => offerUnsettled(), ["Settle Colonies"]),
			genActionPhase(
				"Settling your Planet",
				["improved_colonize"],
				() => {
					settle_colonies(getSubChoice(), getActPlyr());
					finish(true);
				},
				["Settle Colonies"]
			),
			genActionPhase("Choose an Unsettled Planet to Colonize", ["improved_colonize"], () => offerUnsettled(), ["Colonize"]),
			genActionPhase(
				"Colonizing your Planet",
				["improved_colonize"],
				() => {
					colonize(getSubChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "improved_colonize")[0]);
					finish(true);
				},
				["Colonize"]
			),
			// #######################################################################################################################################################################################
			// improved_produce : 4
			genActionPhase("Choose an empty Production Zone to Produce in", ["improved_production"], () => offer(true, false, ["settled_&_conquered_planets"], "choices")),
			genActionPhase("Producing your Resource", ["improved_production"], () => {
				if (getChoice() == "Skip") finish();
				produce(game.choices);
				finish(true);
			}),
			genActionPhase("Choose an empty Production Zone to Produce in", ["improved_production"], () => offer(true, false, ["settled_&_conquered_planets"], "choices")),
			genActionPhase("Producing your Resource", ["improved_production"], () => {
				if (getChoice() == "Skip") finish();
				produce(game.choices);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_trade : 1
			genActionPhase("Trading your Stocks and Bonds", ["improved_trade"], () => {
				game.players[game.acting_player_index].influence.push(game.influence.pop());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_research : 2
			genActionPhase("Choose up to 3 Cards from your Hand to Remove from the Game", ["improved_research"], () => {
				draw(getActPlyr());
				offer(false, true, ["hand"], "choices");
			}),
			genActionPhase("Removing your Cards from the Game", ["improved_research"], () => {
				research(getChoices(), getActPlyr(), 3);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_survey : 1
			genActionPhase("Drawing your Cards", ["improved_survey"], () => {
				draw(getActPlyr());
				draw(getActPlyr());
				draw(getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_warfare : 4
			genActionPhase("Choose between Collecting a Starfighter or Conquering a Planet", ["improved_warfare"], wrappedOffer("Conquer a Planet")),
			genActionPhase(
				"Adding a Starfighter to your Fleet",
				["improved_warfare"],
				() => {
					warfare(getActPlyr());
					warfare(getActPlyr());
					finish(true);
				},
				["Collect a Starfighter"]
			),
			genActionPhase("Choose a Planet to Conquer", ["improved_warfare"], () => offerUnsettled(), ["Conquer a Planet"]),
			genActionPhase(
				"Conquering your planet",
				["improved_warfare"],
				() => {
					conquer(getSubChoice(), getActPlyr());
					finish(true);
				},
				["Conquer a Planet"]
			),
			// #######################################################################################################################################################################################
			// mobilization : 4
			genActionPhase("Collecting your Star Fighters", ["mobilization"], () => {
				warfare(getActPlyr());
				warfare(getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// survey_team : 1
			genActionPhase("Adding Top Card of the Planet deck to your Empire", ["survey_team"], () => {
				let { game, game: { acting_player: player, planet_deck } } = get();
				player = game.players[game.acting_player_index];
				let planet = planet_deck.pop();
				player.unsettled_planets.push(planet);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// war_path : 4
			genActionPhase("Choose a Planet to Conquer", ["war_path"], () => offerUnsettled()),
			genActionPhase("Conquering your planet", ["war_path"], () => {
				if (getChoice() == "Skip") finish();
				conquer(getChoice(), getActPlyr());
				finish(true);
			}),
			genActionPhase("Choose a Planet to Conquer", ["war_path"], () => offerUnsettled()),
			genActionPhase("Conquering your planet", ["war_path"], () => {
				if (getChoice() == "Skip") finish();
				conquer(getChoice(), getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// terraforming : 2
			genActionPhase("Choose an Unsettled Planet to Terraform", ["terraforming"], () => offerUnsettled()),
			genActionPhase(
				"Terraforming your Planet",
				["terraforming"],
				() => {
					colonize(getChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "terraforming")[0]);

					if (getChoice().hosted_colonies.length > 0) {
						let c = getChoice().hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize, 0);
						if (c >= getChoice().settle_cost) settle_colonies(getChoice(), getActPlyr());
					}

					finish(true);
				},
				["Colonize"]
			),
			// #######################################################################################################################################################################################
			// genetic_engineering :1
			// UNIMPLIMENTED
			genActionPhase("Engineering Genetics", ["genetic_engineering"], finish),
			// #######################################################################################################################################################################################
			// artificial_intelligence : 4
			genActionPhase("Select a Role Card to take into your Hand", ["artificial_intelligence"], () => offer(false, false, ["rolecards"], "choices")),
			genActionPhase("Adding Role Card to your Machine Learning Model", ["artificial_intelligence"], () => {
				let { game, game: { acting_player: player } } = get();
				player = game.players[game.acting_player_index];

				if (game.stacks.pilecount[game.choices[0].type] >= 1) {
					player.hand.push(Object.assign({ id: gen_unique_id() }, game.stacks.rolecards[game.stacks[game.choices[0].type]]));
					game.stacks.pilecount[game.choices[0].type]--;
				}

				finish(true);
			}),
			genActionPhase("Select a Role Card to take into your Hand", ["artificial_intelligence"], () => offer(false, false, ["rolecards"], "choices")),
			genActionPhase("Adding Role Card to your Machine Learning Model", ["artificial_intelligence"], () => {
				let { game, game: { acting_player: player } } = get();
				player = game.players[game.acting_player_index];

				if (game.stacks.pilecount[game.choices[0].type] >= 1) {
					player.hand.push(Object.assign({ id: gen_unique_id() }, game.stacks.rolecards[game.stacks[game.choices[0].type]]));
					game.stacks.pilecount[game.choices[0].type]--;
				}

				finish(true);
			}),
			// #######################################################################################################################################################################################
			// diverse_markets : 1
			// UNIMPLIMENTED
			genActionPhase("Diversifying Markets", ["diverse_markets"], finish),
			// #######################################################################################################################################################################################
			// specialization : 2
			genActionPhase("Choose a Resource to Specialize in", ["specialization"], wrappedOffer("red")),
			genActionPhase("Specializaing in your Seleted Resource", ["specialization"], () => {
				getActPlyr().specialization = getChoice();
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// data_network : 3
			genActionPhase("Drawing Your Cards", ["data_network"], () => {
				draw(getActPlyr());
				draw(getActPlyr());
				finish(true);
			}),
			genActionPhase("Choose any number of Cards from your Hand to Remove from the Game", ["data_network"], () => offer(true, true, ["hand"], "choices")),
			genActionPhase("Removing the Selected Cards from the Game", ["data_network"], () => {
				if (getChoice() == "Skip") finish();
				let { game, game: { choices, acting_player: player } } = get();
				player = game.players[game.acting_player_index];
				research(choices, player, choices.length);
				finish(true);
			})
		];

		let nonce = 0;

		game = {
			minPlyrs: 2,
			maaxPlyrs: 4,
			passtoplayer: false,
			nonce: 0,
			displayinfo: {
				selectionzone: "",
				dragged: null,
				showoptiontoskip: false,
				alwMulti: false,
				center_or_research: true,
				center_or_planets: true, //true = center, false = planets
				choicelabel: "choices"
			},
			subchoices: [],
			influence: [
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			messagetoplayer: ["Waiting for other players to join"],
			options: [],
			planet_deck: [],
			currentphase: -4,
			leading_player_index: 0,
			acting_player_index: 0,
			number_of_players: 2,
			started: false,
			gamephases: [
				{
					start: [
						{
							"set active player": () => {
								if (game.started) {
									game.started = true;
									game.passt = false;
									game.leading_player_index = (game.leading_player_index + 1) % game.number_of_players;
									game.acting_player_index = game.leading_player_index;
									game.leadingplayer = game.players[game.leading_player_index];
									game.acting_player = game.players[game.leading_player_index];
									openFullscreen();
								}

								if (game.leadingplayer !== undefined) {
									game.players[game.leading_player_index].rounds++;
								}

								let planets = [
									...game.players[game.leading_player_index].settled_planets,
									...game.players[game.leading_player_index].conquered_planets
								];

								for (let p in planets) {
									tallyIcons(game.players[game.leading_player_index], planets[p]);
								}

								for (let p in game.players[game.leading_player_index].permanents) {
									tallyIcons(game.players[game.leading_player_index], permanents[p]);
								}

								finish(true);
							}
						},
						{
							Productivity: () => {
								if (getActPlyr().permanents.filter(el => el.type == "productivity").length != 0) {
									getActPlyr().actionrolesequence = "aar";
								}

								finish();
							}
						},
						{
							"Choose an Order to Perform Your Action and Role Phases": () => {
								if (getActPlyr().permanents.filter(el => el.type == "logistics").length != 0) {
									let options = ["Action Phase then Role Phase", "Role Phase then Action Phase"];

									if (getActPlyr().permanents.filter(el => el.type == "productivity").length != 0) {
										//add aar,ara,and raa as options
										options.push("Action Phase then another Action Phase then Role Phase");

										options.push("Action Phase then Role Phase then another Action Phase");
										options.push("Role Phase then Action Phase then another Action Phase");
									}

									//offer ar or ra
									simpleOffer(options);
								} else {
									finish();
								}
							}
						},
						{
							Logistics: () => {
								if (getActPlyr().permanents.filter(el => el.type == "logistics").length != 0) {
									if (getChoice() == "Action Phase then Role Phase") {
										getActPlyr().actionrolesequence = "ar";
									} else if (getChoice() == "Role Phase then Action Phase") {
										getActPlyr().actionrolesequence = "ra";
									} else if (getChoice() == "Action Phase then another Action Phase then Role Phase") {
										getActPlyr().actionrolesequence = "aar";
									} else if (getChoice() == "Action Phase then Role Phase then another Action Phase") {
										getActPlyr().actionrolesequence = "ara";
									} else if (getChoice() == "Role Phase then Action Phase then another Action Phase") {
										getActPlyr().actionrolesequence = "raa";
									}

									finish(true);
								} else {
									finish();
								}
							}
						}
					]
				},
				{
					action: [
						{
							"Choose an Action to Play": () => {
								offer(true, false, ["hand"], "choices");
							}
						},
						{
							"Playing your Action": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									let card = getChoices()[0], plyr = getActPlyr();
									plyr.activeaction = card.type;
									handToLimbo(plyr, card);
									finish(true);
								}
							}
						},
						...getActionCorePhases(),
						...getActionCardPhases()
					]
				},
				{
					role: [
						{
							"Choose a Role Card to Lead with": () => {
								offer(false, false, ["rolecards"], "choices");
							}
						},
						{
							"Performing your Role": () => {
								let card = getChoices()[0];

								if (game.stacks.pilecount[card.type] >= 1) {
									if (card.type == "producetrade") {
										getActPlyr().bstIcons["produce"]++;
										getActPlyr().bstIcons["trade"]++;
									} else {
										getActPlyr().bstIcons[card.type]++;
									}

									let newcard = Object.assign(
										{
											id: gen_unique_id(),
											finDest: "discard",
											selected: true
										},
										game.stacks.rolecards[game.stacks[card.type]]
									);

									getActPlyr().limbo = [...getActPlyr().limbo, newcard];
									game.stacks.pilecount[card.type]--;
								} else if (card.type != "colonize") {
									getActPlyr().bstIcons[card.type]++;
								}

								getActPlyr().activerole = card.type;
								finish(true);
							}
						}
					]
				},
				{
					lead: [
						{
							"Choose cards from your hand to Boost the effectiveness of your Role": () => {
								offer(true, true, ["hand"], "choices");
							}
						},
						{
							"Boosting your Role": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									getChoices().forEach(card => {
										boostWithIcons(getActPlyr(), card);
										card.finDest = "discard";
									});

									//TODO: tally up icons on planets
									//TODO: tally up icons on technologies
									finish(true);
								}
							}
						},
						...getLeadCorePhases(),
						{
							"Pass the device to the Next Player": () => {
								game.displayinfo.selectionzone = "";
								game.passp = true;
							}
						},
						{
							"You passed Priority": () => {
								game.passp = false;
								finish(true);
							}
						}
					]
				},
				{
					follow: [
						{
							"Choose between Following or Dissent the Leading Role": () => {
								simpleOffer(["dissent", getLeadPlyr().activerole]);
							}
						},
						{
							Dissenting: () => {
								getActPlyr().activerole = getChoice();

								if (getActPlyr().activerole != "dissent") {
									let card = getChoices()[0];

									if (game.stacks.pilecount[card.name] >= 1) {
										getActPlyr().bstIcons[card.name]++;

										let newcard = Object.assign(
											{
												id: gen_unique_id(),
												finDest: "discard",
												selected: true
											},
											game.stacks.rolecards[game.stacks[card.name]]
										);

										getActPlyr().limbo = [...getActPlyr().limbo, newcard];
										game.stacks.pilecount[card.name]--;
									} else if (card.name != "colonize") {
										boostWithIcons(getActPlyr(), card);
									}

									finish(true);
								} else {
									draw(getActPlyr());

									if (getActPlyr().permanents.filter(el => el.type == "dissension").length != 0) {
										draw(getActPlyr());
									}

									finish(true);
								}
							}
						},
						{
							"Choose cards from your hand to Boost the effectiveness of your Role": () => {
								if (getActPlyr().activerole == "dissent") {
									finish(); //will auto pass to next phase if follow has been selected
								} else {
									offer(true, true, ["hand"], "choices");
								}
							}
						},
						{
							"Boosting your Role": () => {
								if (getActPlyr().activerole == "dissent") {
									finish();
								} else {
									if (getChoice() == "Skip") {
										finish();
									} else {
										let cards = getChoices;

										for (let i in cards) {
											boostWithIcons(getActPlyr(), cards[i]);
										}

										//TODO: tally up icons on planets
										//TODO: tally up icons on technologies
										finish(true);
									}
								}
							}
						},
						...getFollowCorePhases(),
						{
							"Pass the device to the Next Player": () => {
								game.displayinfo.selectionzone = "";
								game.passp = true;
							}
						},
						{
							"You passed Priority": () => {
								game.passp = false;
								finish(true);
							}
						}
					]
				},
				// discard : 2
				{
					discard: [
						{
							"Would you like to Mobilize against a Planet": () => {
								if (getActPlyr().activeaction != "mobilization") {
									finish();
								} else {
									offer(true, false, ["options", [{ name: "mobilize" }, { name: "skip" }]], "choices");
								}
							}
						},
						{
							"Choose a Planet to Mobilize Against": () => {
								if (getActPlyr().activeaction != "mobilization" || getChoice() != "mobilize") {
									finish();
								} else {
									offerUnsettled();
								}
							}
						},
						{
							"Mobalizing against your Planet": () => {
								if (getActPlyr().activeaction != "mobilization") {
									finish();
								} else {
									conquer(getSubChoice(), getActPlyr());
									finish(true);
								}
							}
						},
						{
							"Would you like to Streamline Your Empire": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0) {
									finish();
								} else {
									offer(
										false,
										false,
										[
											"options",
											[{ name: "Decline" }, { name: "Streamline Empire" }]
										],
										"choices");
								}
							}
						},
						{
							"Choose a Card from Your Hand to Remove from the Game": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0 || getChoice() != "Streamline Empire") {
									finish();
								} else {
									offer(true, false, ["hand"], "subchoices");
								}
							}
						},
						{
							"Streamlining Your Empire": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0 || getChoice() != "Streamline Empire" || getChoice() == "Skip") {
									finish();
								} else {
									research(getChoices(), getActPlyr(), 1);
								}
							}
						},
						{
							"Would you like to Utilize Your Empire's Hyperefficiency": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0) {
									finish();
								} else {
									simpleOffer(["Decline", "Utilize Hyperefficiency"]);
								}
							}
						},
						{
							"Choose a Card from Your Hand to Remove from the Game": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0 || getChoice() != "Utilize Hyperefficiency") {
									finish();
								} else {
									offer(true, true, ["hand"], "subchoices");
								}
							}
						},
						{
							"Your Empire is Hyperefficient": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0 || getChoice() != "Utilize Hyperefficiency" || getChoice() == "Skip") {
									finish();
								} else {
									research(getChoices(), getActPlyr(), getChoices().length);
								}
							}
						},
						{
							"Choose any Cards you would like to Discard": () => {
								offer(true, true, ["hand"], "choices");
							}
						},
						{
							"Discarding your Selected Cards": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									getChoices().forEach(card => {
										getActPlyr().discard = [...getActPlyr().discard, card];
										getActPlyr().limbo = getActPlyr().limbo.filter(c => c.id != card.id);
									});

									finish(true);
								}
							}
						}
					]
				},
				//cleanup : 1
				{
					cleanup: [
						{
							"Drawing up to your Hand Size": () => {
								cleanup();
								let handsize = getActPlyr().handsize;

								for (let index in getActPlyr().settled_planets) {
									handsize += getActPlyr().settled_planets[index].handsize_modifier;
								}

								for (let index in getActPlyr().conquered_planets) {
									handsize += getActPlyr().conquered_planets[index].handsize_modifier;
								}

								let l = getActPlyr().hand.length;

								if (l < handsize) {
									draw(getActPlyr(), handsize - l);
								}

								game.players.forEach(resetIconBoost);

								if (game.started && checkforendgame() && game.players.reduce((t, p) => t + p.rounds, 0) % game.number_of_players == 0) {
									totalinfluence();
									game.nextphase = endgame;
								}

								finish(true);
							}
						},
						{
							"Pass the device to the Next Player": () => {
								game.displayinfo.selectionzone = "";
								game.displayinfo.showoptiontoskip = false;
								game.displayinfo.alwMulti = false;
								game.passp = false;
								game.passt = true;
							}
						},
						{
							"You passed the Turn": () => {
								game.passt = false;
								finish(true);
							}
						}
					]
				}
			],
			players: [],
			winner: false,
			stacks: {
				pilecount: {
					research: 20,
					producetrade: 16,
					colonize: 20,
					warfare: 16,
					survey: 20
				},
				survey: 0,
				warfare: 1,
				colonize: 2,
				producetrade: 3,
				research: 4, //indexes
				rolecards: [
					genEmptyCard("survey", "Survey", { survey: 1 }),
					genEmptyCard("warfare", "Warfare", { warfare: 1 }),
					genEmptyCard("colonize", "Colonize", { colonize: 1 }),
					genEmptyCard("producetrade", "Produce / Trade", { produce: 1, trade: 1 }),
					genEmptyCard("research", "Research", { research: 1 }, { research_deck: [] })
				]
			}
		};

		let url = location.origin.replace(/^http/, "ws");

		lobby = {
			screenname: "",
			url,
			sets: ["Base Game"],
			number_of_players: [2, 3, 4],
			existinggames: []
		};

		game.nonce = nonce;
		mounted = true;
	});

	///////////////////////////////////////////////////////////////////////////////
	let offerUnsettled = () => offer(false, false, ["unsettled_planets"], "subchoices"),
		getActionCardPhases = () => actioncardphases,
		getActvActn = () => getActPlyr().activeaction,
		getActvRole = () => getActPlyr().activerole,
		getChoice = () => game.choices[0].name,
		getChoices = () => game.choices,
		getSubChoice = () => getSubChoices()[0],
		getSubChoices = () => game.subchoices,
		finish = (cond = false) => phasefinishfunction(cond),
		getActPlyr = () => game.players[game.acting_player_index],
		getLeadPlyr = () => game.players[game.leading_player_index],
		simpleOffer = choices => offer(false, false, ["options", choices.reduce((acc, cur) => [...acc, { name: cur }], [])], "choices"),
		wrappedOffer = choices => () => simpleOffer(choices),
		getActionCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.actn], []).reduce((acc, cur) => [...acc, ...cur], []),
		getLeadCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.lead], []).reduce((acc, cur) => [...acc, ...cur], []),
		getFollowCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.fllw], []).reduce((acc, cur) => [...acc, ...cur], []),
		genActionPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvActn()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genLeadPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvRole()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genFollowPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvRole()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genEmptyCard = (type, name, symbols, extras = {}) => ({
			type,
			selected: false,
			name,
			selected: false,
			icons: {
				...{
					survey: 0,
					warfare: 0,
					colonize: 0,
					produce: 0,
					trade: 0,
					research: 1
				},
				...symbols
			},
			image: null,
			...extras
		}),
		tallyIcons = (dest, src) => ["survey", "warfare", "trade", "produce", "research"].forEach(icon => dest.icons[icon] += src.icons[icon]),
		handToLimbo = (plyr, card) => {
			playToField("limbo", plyr, card, "discard");
			rmFromField("hand", plyr, card);
		},
		playToField = (fld, plyr, card, fDest) => plyr[fld] = [...plyr[fld], { ...card, finDest: fDest }],
		rmFromField = (fld, plyr, card) => plyr[fld] = plyr[fld].filter(el => card.id != el.id),
		boostWithIcons = (plyr, src) => Object.keys(src.icons).forEach(icon => plyr.bstIcons[icon] += src.icons[icon]),
		resetIconBoost = plyr => plyr.bstIcons = {
			survey: 0,
			warfare: 0,
			colonize: 0,
			produce: 0,
			trade: 0,
			research: 0
		},
		displayPlanets = () => game.displayinfo.center_or_planets = false,
		displayCenter = () => game.displayinfo.center_or_planets = true,
		clearChoices = () => game[game.displayinfo.choicelabel] = [],
		setDisplayInfo = (zone, multiple, skippable, label) => game.displayinfo = {
			...game.displayinfo,
			...{
				selectionzone: zone,
				alwMulti: multiple,
				showoptiontoskip: skippable,
				choicelabel: label
			}
		},
		getAllCards = plyr => [...plyr.deck, ...plyr.discard, ...plyr.limbo, ...plyr.hand],
		chkForPerm = perm => getActPlyr().permanents.filter(el => el.type == perm).length != 0,
		range = (min, max) => min <= max ? [...range(min, max - 1), max] : [],
		produceTradeHelper = (filled, planets, resources, func = () => {
				
			}) => {
			let prd = { blue: 0, green: 0, purple: 0, red: 0 };

			planets.forEach(planet => planet.production_zones.forEach(zone => {
				if (!zone.filled && resources > 0) {
					zone.filled = filled;
					prd[zone.type]++;
					resources--;
					func();
				}
			}));

			return prd;
		};

	let offer = (skippable, multiple, [field_label, choices], choice_label, callback) => {
		setDisplayInfo(field_label, multiple, skippable, choice_label); /*option to skip | sets game.displayinfo.showoptiontoskip=boolean */ /*allows multiple choices | sets game.displayinfo.alwMulti=boolean */ /* available cards to choose from | game.displayinfo.selectionzone={'hand|discard|options|planets|research|rolecards'}, sets choices=array if specified*/ /* label for where the choice is stored | set with game[label]=*/ /*callback that handles the choice or finishes the phase*/

		switch (field_label) {
			case "hand":
				choices = getActPlyr().hand;
				break;
			case "research":
				choices = game.research_deck;
				break;
			case "discard":
				choices = getActPlyr().discard;
				break;
			case "planets":
				choices = game.planet_deck;
				break;
			case "rolecards":
				choices = game.stacks.rolecards;
				displayCenter();
				break;
			case "unsettled_planets":
				choices = getActPlyr().unsettled_planets;
				displayPlanets();
				break;
			case "settled_planets":
				choices = getActPlyr().settled_planets;
				displayPlanets();
				break;
			case "conquered_planets":
				choices = getActPlyr().conquered_planets;
				displayPlanets();
				break;
			case "settled_&_conquered_planets":
				choices = [...getActPlyr().settled_planets, ...getActPlyr().conquered_planets];
				displayPlanets();
				break;
		}

		clearChoices();
		present_as_choice(choices);
		sendstate();
	};

	let discard = (source_array, destination_array, id) => {
		let toRemove = source_array.find(e => id == e.id);
		source_array = source_array.filter(e => e.id != toRemove.id);
	};

	//draw deck->hand
	let totalinfluence = () => {
		game.players.forEach(plyr => {
			plyr.influence = plyr.influence.reduce((acc, cur) => acc + cur, 0) + getAllCards(plyr).reduce((acc, cur) => acc + cur.influence);
		});
	};

	let endgame = () => {
		//display victor
		let scores = game.players.map(e => e.influence);

		let winner = "";
		let highest = scores[0];

		game.players.map(e => {
			if (highest < e.influence) {
				winner = e.name;
				highest = e.influence;
			}
		});
	};

	let checkforendgame = () => {
		let depletedstacks = game.stacks.pilecount.reduce((acc, cur) => acc + (cur < 1) ? 1 : 0, 0);

		let stacklimit = game.number_of_players == 1 || game.number_of_players == 2
		? 1
		: 2;

		return stacklimit <= depletedstacks || game.influence.length == 0;
	};

	let draw = (player, quantity = 1) => {
		for (let i = 0; i < quantity; i++) {
			if (player.deck.length == 0) {
				if (player.discard.length == 0) return player;
				player.deck = knuthshuffle([...player.discard]);
				player.discard = [];
			}

			player.hand = [...player.hand, player.deck.pop()];
			player.deck = player.deck;
		}

		return player;
	};

	let play = (source_array, destination_array, finDest, id) => {
		let toRemove = source_array.find(e => id == e.id);
		source_array = source_array.filter(e => e.id != toRemove.id);
	};

	let cleanup = () => {
		getActPlyr().limbo.forEach(card => {
			getActPlyr()[card.finDest] = [...getActPlyr()[card.finDest], card];
		});
	};

	let remove_from_game = (source_array, toRemove) => {
		//remove_from_game hand->exile\
		toRemove.finDest = "exile";

		return source_array.filter(e => e.id != toRemove.id);
	};

	let present_as_choice = options => game.options = options;

	let settle_colonies = (planet, plyr) => {
		let planets = [...plyr.settled_planets, ...plyr.conquered_planets];
		let reduction = [...planets, ...getLeadPlyr().permanents].reduce((acc, cur) => acc + cur.icons.colonize, 0);

		if (planet.settle_cost - reduction <= planet.hosted_colonies.length) {
			if (chkForPerm("abundance") && planet.production_zones.length != 0) {
				planet.production_zones = planet.production_zones.map(pz => {
					return { type: pz.type, filled: true };
				});
			}

			plyr.discard = [...plyr.discard, ...planet.hosted_colonies];
			planet.hosted_colonies = [];
			planet.settled = true;
			discard(plyr.unsettled_planets, plyr.settled_planets, planet.id);
		}
	};

	//produce poduction_pile->host
	let produce = (planets, resources = 1) => produceTradeHelper(true, planets, resources);

	//trade host->production_pile, influence_pile->player_influence
	//let trade = (planets, player, resources=1) => produceTradeHelper(false,planets,resources,()=>player.influence.push(game.influence.pop()));
	let trade = (plnt, plyr, res) => {
		let prd = { blue: 0, green: 0, purple: 0, red: 0 };
		if (res < 1) return prd;

		for (let i = 0; i < plnt.length; i++) {
			for (let j = 0; j < plnt[i].production_zones.length; j++) {
				if (res > 0 && plnt[i].production_zones[j].filled) {
					if (game.influence.length != 1) game.influence = game.influence.slice(1);
					plnt[i].production_zones[j].filled = false;
					prd[plnt[i].production_zones[j].type]++;
					plyr.influence = [...plyr.influence, 1];
					res--;
				}
			}
		}

		return prd;
	};

	//politics hand->limbo->exile, stacks->hand
	let politics = (politics_card, card, player) => {
		politics_card.finDest = "exile";

		if (game.stacks.pilecount[card.type] >= 1) {
			player.hand = [
				...player.hand,
				{
					...game.stacks.rolecards[game.stacks[card.type]],
					"id": gen_unique_id()
				}
			];

			game.stacks.pilecount[card.type]--;
		}
	};

	//research hand->exile
	let research = (cards, player, limit = 2) => {
		for (let i = 0; i < cards.length && i < limit; i++) {
			getActPlyr().limbo = remove_from_game(getActPlyr().limbo, cards[i]);
		}
	};

	//survey deck->hand
	let survey = player => player = draw(player, 2);

	//colonize hand/limbo->host
	let colonize = (planet, source_array, card, isRole = false) => {
		let l = isRole ? getActPlyr().bstIcons.colonize : 1;

		for (let i = 0; i < l; i++) {
			let toRemove = source_array.find(e => card.type == e.type && e.finDest != "exile");
			planet.hosted_colonies = [...planet.hosted_colonies, toRemove];
			source_array = source_array.filter((e, i) => e.id != toRemove.id);
		}
	};

	//warfare starship_pile->player_starship_pile
	let warfare = player => player.starfighters.small++;

	//conquer player_starship_pile->starship_pile, player_unconquered_planets->player_conquered_planets
	let conquer = (planet, player) => {
		if (chkForPerm("scorched_earth_policy")) {
			planet.production_zones = [];
			planet.conquer_cost -= 2;

			if (planet.conquer_cost < 0) {
				planet.conquer_cost = 0;
			}
		}

		if (player.starfighters.small >= planet.conquer_cost) {
			if (chkForPerm("abundance")) {
				if (planet.production_zones.length != 0) {
					planet.production_zones = planet.production_zones.map(pz => {
						return { type: pz.type, filled: true };
					});
				}
			}

			player.starfighters.small -= planet.conquer_cost;
			planet = select_via_id(player.unsettled_planets, planet.id);
			planet.conquered = true;
			player.conquered_planets.push(planet);
		}
	};

	let select_via_id = (source, id) => {
		let temp = source.find(p => p.id == id);
		source = source.filter(p => p.id != id);
		return temp;
	};

	let gen_unique_id = () => {
		game.nonce++;
		return game.nonce;
	};

	let explore_planet = player => {
		let planet = game.planet_deck.pop();
		player.limbo = [...player.limbo, { ...planet, "finDest": "planetdeck" }];
		game.options = [...game.options, planet];
	};

	let catalog_planet = player => {
		game.choices[0].finDest = "unsetttled";
		player.unsettled_planets = [...player.unsettled_planets, game.choices[0]];
		player.limbo = player.limbo.filter(p => p.id != game.choices[0].id);
		player.limbo.filter(card => card.finDest == "planetdeck").forEach(planet => discard(player.limbo, game.planet_deck, planet.id));
	};

	let phasefinishfunction = (send = false) => {
		game.currentphase = (game.currentphase + 1) % game.gamesequence.length;
		let jsobj = game.gamesequence[game.currentphase];
		let nextphase, msg;

		for (let key in jsobj) {
			msg = key;
			nextphase = jsobj[key];
		}

		if (game.nextphase !== endgame) {
			game.nextphase = nextphase;
			game.messagetoplayer.push(msg);
		}

		if (send) sendstate();
		game.nextphase();
	};

	let sendstate = () => lobby.online && ws.emit("message", jstr({
		...game,
		"header": "set",
		"sender": lobby.player_id
	}));

	let knuthshuffle = array => {
		let currentIndex = array.length;
		let temporaryValue, randomIndex;

		// While there remain elements to shuffle...
		while (0 !== currentIndex) {
			// Pick a remaining element...
			randomIndex = Math.floor(Math.random() * currentIndex);

			currentIndex -= 1;

			// And swap it with the current element.
			temporaryValue = array[currentIndex];

			array[currentIndex] = array[randomIndex];
			array[randomIndex] = temporaryValue;
		}

		return array;
	};

	let openFullscreen = () => {
		let elem = document.getElementById("screen");

		if (elem.requestFullscreen) {
			elem.requestFullscreen();
		} else if (elem.mozRequestFullScreen) {
			/* Firefox */
			elem.mozRequestFullScreen();
		} else if (elem.webkitRequestFullscreen) {
			/* Chrome, Safari and Opera */
			elem.webkitRequestFullscreen();
		} else if (elem.msRequestFullscreen) {
			/* IE/Edge */
			elem.msRequestFullscreen();
		}
	};

	$$result.css.add(css$5);

	return `${mounted
	? `${game.currentphase == -4
		? `<div class="${"playercountselector svelte-6s0ykr"}"><p class="${"svelte-6s0ykr"}">Choose your Screen Name</p>	
		<input type="${"text"}" class="${"svelte-6s0ykr"}"${add_attribute("value", lobby.screenname, 1)}>
		<p class="${"svelte-6s0ykr"}">Finished</p></div>`
		: `${game.currentphase == -3
			? `<div class="${"playercountselector svelte-6s0ykr"}"><p class="${"svelte-6s0ykr"}">Start a New Online Game</p>
		<p class="${"svelte-6s0ykr"}">Join an Existing Online Game</p>
		<p class="${"svelte-6s0ykr"}">Start a New Offline Game</p></div>`
			: `${game.currentphase == -2
				? `<div class="${"playercountselector svelte-6s0ykr"}"><p class="${"svelte-6s0ykr"}">Choose your Game&#39;s number of Players</p>
		<p class="${"svelte-6s0ykr"}">2</p>
		<p class="${"svelte-6s0ykr"}">3</p>
		<p class="${"svelte-6s0ykr"}">4</p></div>`
				: `${game.currentphase == -1
					? `<div class="${"playercountselector svelte-6s0ykr"}"><p class="${"svelte-6s0ykr"}">Choose a Game to Join</p>
			${each(lobby.existinggames, g => `<p class="${"svelte-6s0ykr"}">${escape(g.label + "'s Game")}</p>`)}</div>`
					: `${game.passtoplayer && !lobby.online
						? `<div class="${"passtoplayer svelte-6s0ykr"}">pass to next player
		</div>`
						: `${!!game.winner
							? `<div class="${"passtoplayer svelte-6s0ykr"}">${escape(game.winner)} WON!!!!
		</div>`
							: `<div class="${"stars svelte-6s0ykr"}"></div>
		<div id="${"screen"}" style="${"height:100%;width:100%;"}" class="${"flex svelte-6s0ykr"}">${each(game.players, player => `${game.players[game.acting_player_index] !== undefined && (lobby.screenname == player.name && lobby.online || game.players[game.acting_player_index].id == player.id && !lobby.online)
								? `<div class="${"bordered playingfield svelte-6s0ykr"}"><div id="${"dragged"}" class="${"svelte-6s0ykr"}"></div>
						<div class="${"playerinfo bordered svelte-6s0ykr"}">${each(game.players, p => `<div style="${"width:" + escape(100 / game.number_of_players) + "%"}" class="${"flex player " + escape(game.players[game.acting_player_index] !== undefined && p.name == game.players[game.acting_player_index].name
									? "selectable"
									: "bordered") + " svelte-6s0ykr"}"><div style="${"width:33%; text-align: center;"}" class="${"svelte-6s0ykr"}">Military Might ${escape(p.starfighters.small)}</div>
									<div style="${"width:33%; text-align: center;"}" class="${"svelte-6s0ykr"}">Galactic Influence ${escape(p.influence.length)}</div>
									<div style="${"width:33%; text-align: center;"}" class="${"svelte-6s0ykr"}">${escape(p.name)}</div>
								</div>`)}
							</div>
						
						<div class="${"show svelte-6s0ykr"}">show ${escape(game.displayinfo.center_or_planets
									? "planets"
									: "center row")}</div>
						<div class="${"research svelte-6s0ykr"}">show ${escape(game.displayinfo.center_or_research
									? "research"
									: "center row")}</div>
						
						${game.displayinfo.selectionzone == "research" || !game.displayinfo.center_or_research
									? `<div class="${"zone researchrow svelte-6s0ykr"}">${each(game.research_deck, card => `${validate_component(Card, "Card").$$render(
											$$result,
											{
												selectable: game.displayinfo.selectionzone == "research",
												card
											},
											{},
											{}
										)}`)}
							</div>`
									: `${game.displayinfo.center_or_planets
										? `<div class="${"flex zone centerrow svelte-6s0ykr"}">${each(game.stacks.rolecards, card => `${validate_component(Card, "Card").$$render(
												$$result,
												{
													card,
													selectable: game.displayinfo.selectionzone == "rolecards",
													pilecount: game.stacks.pilecount[card.type]
												},
												{},
												{}
											)}`)}
							</div>`
										: ``}`}
						${!game.displayinfo.center_or_planets
									? `<div class="${"flex zone centerrow svelte-6s0ykr"}">${each(player.unsettled_planets, planet => `${validate_component(PlanetCard, "PlanetCard").$$render($$result, { planet }, {}, {})}`)}
								${each([...player.settled_planets, ...player.conquered_planets], planet => `${validate_component(PlanetCard, "PlanetCard").$$render(
											$$result,
											{
												planet,
												selected: game.displayinfo.selectionzone == "settled_&_conquered_planets"
											},
											{},
											{}
										)}`)}
							</div>`
									: ``}
						
						<div id="${"playedcards"}" class="${"flex zone playedcards svelte-6s0ykr"}"><div style="${"margin-right:auto"}" class="${"selectable pass svelte-6s0ykr"}">${escape(game.displayinfo.showoptiontoskip
									? "[Choose None]"
									: "[______]")}</div>
							${each(game.players[game.acting_player_index].limbo, card => `${validate_component(Card, "Card").$$render($$result, { mini: true, card }, {}, {})}`)}
							<div style="${"margin-left:auto"}" class="${"selectable pass svelte-6s0ykr"}">${escape(game.passp
									? "[Pass to <br> Next Player]"
									: game.passt
										? "[End Turn]"
										: game.displayinfo.alwMulti && game.choices.length > 0
											? "[Choose Selected]"
											: "[______]")}
							</div></div>
						<div class="${"messagetoplayer bordered svelte-6s0ykr"}">${escape(game.messagetoplayer[game.messagetoplayer.length - 1])}</div>
						
						<div class="${"flex zone ownedcards svelte-6s0ykr"}"><div class="${"bordered deck svelte-6s0ykr"}">${escape(player.deck.length)}</div>
							<div class="${"hand svelte-6s0ykr"}">${each(player.hand, card => `${validate_component(Card, "Card").$$render(
										$$result,
										{
											card,
											mini: true,
											selectable: game.displayinfo.selectionzone == "hand"
										},
										{},
										{}
									)}`)}</div>
							<div class="${"bordered discard svelte-6s0ykr"}">${escape(player.discard.length)}</div></div>
					</div>`
								: ``}`)}
			
			${game.displayinfo.selectionzone == "options"
								? `<div class="${escape(null_to_empty(game.options[0] !== undefined && game.options[0].type !== undefined
									? "talloptions"
									: "options")) + " svelte-6s0ykr"}">${each(game.options, option => `${option.type !== undefined
									? `${validate_component(PlanetCard, "PlanetCard").$$render(
											$$result,
											{
												planet: option,
												selectable: game.displayinfo.selectionzone == "options"
											},
											{},
											{}
										)}
							${validate_component(PlanetCard, "PlanetCard").$$render(
											$$result,
											{
												planet: { ...option, settled: true },
												selectable: game.displayinfo.selectionzone == "options"
											},
											{},
											{}
										)}`
									: `<div class="${"pass " + escape(game.displayinfo.selectionzone == "options"
										? option.selected ? "selected" : "selectable"
										: "bordered") + " svelte-6s0ykr"}">${escape(option.name)}
							</div>`}`)}</div>`
								: ``}</div>`}`}`}`}`}`}`
	: ``}`;
});

/* src\routes\index.svelte generated by Svelte v3.20.1 */

const Routes = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	return `${validate_component(App, "App").$$render($$result, {}, {}, {})}`;
});

/* src\node_modules\@sapper\internal\layout.svelte generated by Svelte v3.20.1 */

const Layout = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	return `${$$slots.default ? $$slots.default({}) : ``}`;
});

/* src\node_modules\@sapper\internal\error.svelte generated by Svelte v3.20.1 */

const Error$1 = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { error } = $$props;
	let { status } = $$props;
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);

	return `<h1>${escape(status)}</h1>

<p>${escape(error.message)}</p>

${ `<pre>${escape(error.stack)}</pre>`
	}`;
});

// This file is generated by Sapper — do not edit it!

const manifest = {
	server_routes: [
		
	],

	pages: [
		{
			// index.svelte
			pattern: /^\/$/,
			parts: [
				{ name: "index", file: "index.svelte", component: Routes }
			]
		}
	],

	root: Layout,
	root_preload: () => {},
	error: Error$1
};

const build_dir = "__sapper__/dev";

const src_dir = "src";

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

const CONTEXT_KEY = {};

/* src\node_modules\@sapper\internal\App.svelte generated by Svelte v3.20.1 */

const App$1 = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { stores } = $$props;
	let { error } = $$props;
	let { status } = $$props;
	let { segments } = $$props;
	let { level0 } = $$props;
	let { level1 = null } = $$props;
	setContext(CONTEXT_KEY, stores);
	if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.segments === void 0 && $$bindings.segments && segments !== void 0) $$bindings.segments(segments);
	if ($$props.level0 === void 0 && $$bindings.level0 && level0 !== void 0) $$bindings.level0(level0);
	if ($$props.level1 === void 0 && $$bindings.level1 && level1 !== void 0) $$bindings.level1(level1);

	return `


${validate_component(Layout, "Layout").$$render($$result, Object.assign({ segment: segments[0] }, level0.props), {}, {
		default: () => `${error
		? `${validate_component(Error$1, "Error").$$render($$result, { error, status }, {}, {})}`
		: `${validate_component(level1.component || missing_component, "svelte:component").$$render($$result, Object.assign(level1.props), {}, {})}`}`
	})}`;
});

/**
 * @param typeMap [Object] Map of MIME type -> Array[extensions]
 * @param ...
 */
function Mime() {
  this._types = Object.create(null);
  this._extensions = Object.create(null);

  for (var i = 0; i < arguments.length; i++) {
    this.define(arguments[i]);
  }

  this.define = this.define.bind(this);
  this.getType = this.getType.bind(this);
  this.getExtension = this.getExtension.bind(this);
}

/**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * If a type declares an extension that has already been defined, an error will
 * be thrown.  To suppress this error and force the extension to be associated
 * with the new type, pass `force`=true.  Alternatively, you may prefix the
 * extension with "*" to map the type to extension, without mapping the
 * extension to the type.
 *
 * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});
 *
 *
 * @param map (Object) type definitions
 * @param force (Boolean) if true, force overriding of existing definitions
 */
Mime.prototype.define = function(typeMap, force) {
  for (var type in typeMap) {
    var extensions = typeMap[type].map(function(t) {return t.toLowerCase()});
    type = type.toLowerCase();

    for (var i = 0; i < extensions.length; i++) {
      var ext = extensions[i];

      // '*' prefix = not the preferred type for this extension.  So fixup the
      // extension, and skip it.
      if (ext[0] == '*') {
        continue;
      }

      if (!force && (ext in this._types)) {
        throw new Error(
          'Attempt to change mapping for "' + ext +
          '" extension from "' + this._types[ext] + '" to "' + type +
          '". Pass `force=true` to allow this, otherwise remove "' + ext +
          '" from the list of extensions for "' + type + '".'
        );
      }

      this._types[ext] = type;
    }

    // Use first extension as default
    if (force || !this._extensions[type]) {
      var ext = extensions[0];
      this._extensions[type] = (ext[0] != '*') ? ext : ext.substr(1);
    }
  }
};

/**
 * Lookup a mime type based on extension
 */
Mime.prototype.getType = function(path) {
  path = String(path);
  var last = path.replace(/^.*[/\\]/, '').toLowerCase();
  var ext = last.replace(/^.*\./, '').toLowerCase();

  var hasPath = last.length < path.length;
  var hasDot = ext.length < last.length - 1;

  return (hasDot || !hasPath) && this._types[ext] || null;
};

/**
 * Return file extension associated with a mime type
 */
Mime.prototype.getExtension = function(type) {
  type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
  return type && this._extensions[type.toLowerCase()] || null;
};

var Mime_1 = Mime;

var standard = {"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma","es"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hjson":["hjson"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/n-quads":["nq"],"application/n-triples":["nt"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf","owl"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/sieve":["siv","sieve"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["*3gpp"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":["*mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/wav":["wav"],"audio/wave":["*wav"],"audio/webm":["weba"],"audio/xm":["xm"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/aces":["exr"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/dicom-rle":["drle"],"image/emf":["emf"],"image/fits":["fits"],"image/g3fax":["g3"],"image/gif":["gif"],"image/heic":["heic"],"image/heic-sequence":["heics"],"image/heif":["heif"],"image/heif-sequence":["heifs"],"image/ief":["ief"],"image/jls":["jls"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/jxr":["jxr"],"image/ktx":["ktx"],"image/png":["png"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/t38":["t38"],"image/tiff":["tif","tiff"],"image/tiff-fx":["tfx"],"image/webp":["webp"],"image/wmf":["wmf"],"message/disposition-notification":["disposition-notification"],"message/global":["u8msg"],"message/global-delivery-status":["u8dsn"],"message/global-disposition-notification":["u8mdn"],"message/global-headers":["u8hdr"],"message/rfc822":["eml","mime"],"model/3mf":["3mf"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/stl":["stl"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["*x3db","x3dbz"],"model/x3d+fastinfoset":["x3db"],"model/x3d+vrml":["*x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"model/x3d-vrml":["x3dv"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/mdx":["mdx"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/richtext":["rtx"],"text/rtf":["*rtf"],"text/sgml":["sgml","sgm"],"text/shex":["shex"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vtt":["vtt"],"text/xml":["*xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["*jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"]};

var lite = new Mime_1(standard);

function get_server_route_handler(routes) {
	async function handle_route(route, req, res, next) {
		req.params = route.params(route.pattern.exec(req.path));

		const method = req.method.toLowerCase();
		// 'delete' cannot be exported from a module because it is a keyword,
		// so check for 'del' instead
		const method_export = method === 'delete' ? 'del' : method;
		const handle_method = route.handlers[method_export];
		if (handle_method) {
			if (process.env.SAPPER_EXPORT) {
				const { write, end, setHeader } = res;
				const chunks = [];
				const headers = {};

				// intercept data so that it can be exported
				res.write = function(chunk) {
					chunks.push(Buffer.from(chunk));
					write.apply(res, arguments);
				};

				res.setHeader = function(name, value) {
					headers[name.toLowerCase()] = value;
					setHeader.apply(res, arguments);
				};

				res.end = function(chunk) {
					if (chunk) chunks.push(Buffer.from(chunk));
					end.apply(res, arguments);

					process.send({
						__sapper__: true,
						event: 'file',
						url: req.url,
						method: req.method,
						status: res.statusCode,
						type: headers['content-type'],
						body: Buffer.concat(chunks).toString()
					});
				};
			}

			const handle_next = (err) => {
				if (err) {
					res.statusCode = 500;
					res.end(err.message);
				} else {
					process.nextTick(next);
				}
			};

			try {
				await handle_method(req, res, handle_next);
			} catch (err) {
				console.error(err);
				handle_next(err);
			}
		} else {
			// no matching handler for method
			process.nextTick(next);
		}
	}

	return function find_route(req, res, next) {
		for (const route of routes) {
			if (route.pattern.test(req.path)) {
				handle_route(route, req, res, next);
				return;
			}
		}

		next();
	};
}

/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var parse_1 = parse;
var serialize_1 = serialize;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {};
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim();
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      case 'none':
        str += '; SameSite=None';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

var cookie = {
	parse: parse_1,
	serialize: serialize_1
};

var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
    '<': '\\u003C',
    '>': '\\u003E',
    '/': '\\u002F',
    '\\': '\\\\',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\0': '\\0',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join('\0');
function devalue(value) {
    var counts = new Map();
    function walk(thing) {
        if (typeof thing === 'function') {
            throw new Error("Cannot stringify a function");
        }
        if (counts.has(thing)) {
            counts.set(thing, counts.get(thing) + 1);
            return;
        }
        counts.set(thing, 1);
        if (!isPrimitive(thing)) {
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                case 'Date':
                case 'RegExp':
                    return;
                case 'Array':
                    thing.forEach(walk);
                    break;
                case 'Set':
                case 'Map':
                    Array.from(thing).forEach(walk);
                    break;
                default:
                    var proto = Object.getPrototypeOf(thing);
                    if (proto !== Object.prototype &&
                        proto !== null &&
                        Object.getOwnPropertyNames(proto).sort().join('\0') !== objectProtoOwnPropertyNames) {
                        throw new Error("Cannot stringify arbitrary non-POJOs");
                    }
                    if (Object.getOwnPropertySymbols(thing).length > 0) {
                        throw new Error("Cannot stringify POJOs with symbolic keys");
                    }
                    Object.keys(thing).forEach(function (key) { return walk(thing[key]); });
            }
        }
    }
    walk(value);
    var names = new Map();
    Array.from(counts)
        .filter(function (entry) { return entry[1] > 1; })
        .sort(function (a, b) { return b[1] - a[1]; })
        .forEach(function (entry, i) {
        names.set(entry[0], getName(i));
    });
    function stringify(thing) {
        if (names.has(thing)) {
            return names.get(thing);
        }
        if (isPrimitive(thing)) {
            return stringifyPrimitive(thing);
        }
        var type = getType(thing);
        switch (type) {
            case 'Number':
            case 'String':
            case 'Boolean':
                return "Object(" + stringify(thing.valueOf()) + ")";
            case 'RegExp':
                return thing.toString();
            case 'Date':
                return "new Date(" + thing.getTime() + ")";
            case 'Array':
                var members = thing.map(function (v, i) { return i in thing ? stringify(v) : ''; });
                var tail = thing.length === 0 || (thing.length - 1 in thing) ? '' : ',';
                return "[" + members.join(',') + tail + "]";
            case 'Set':
            case 'Map':
                return "new " + type + "([" + Array.from(thing).map(stringify).join(',') + "])";
            default:
                var obj = "{" + Object.keys(thing).map(function (key) { return safeKey(key) + ":" + stringify(thing[key]); }).join(',') + "}";
                var proto = Object.getPrototypeOf(thing);
                if (proto === null) {
                    return Object.keys(thing).length > 0
                        ? "Object.assign(Object.create(null)," + obj + ")"
                        : "Object.create(null)";
                }
                return obj;
        }
    }
    var str = stringify(value);
    if (names.size) {
        var params_1 = [];
        var statements_1 = [];
        var values_1 = [];
        names.forEach(function (name, thing) {
            params_1.push(name);
            if (isPrimitive(thing)) {
                values_1.push(stringifyPrimitive(thing));
                return;
            }
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                    values_1.push("Object(" + stringify(thing.valueOf()) + ")");
                    break;
                case 'RegExp':
                    values_1.push(thing.toString());
                    break;
                case 'Date':
                    values_1.push("new Date(" + thing.getTime() + ")");
                    break;
                case 'Array':
                    values_1.push("Array(" + thing.length + ")");
                    thing.forEach(function (v, i) {
                        statements_1.push(name + "[" + i + "]=" + stringify(v));
                    });
                    break;
                case 'Set':
                    values_1.push("new Set");
                    statements_1.push(name + "." + Array.from(thing).map(function (v) { return "add(" + stringify(v) + ")"; }).join('.'));
                    break;
                case 'Map':
                    values_1.push("new Map");
                    statements_1.push(name + "." + Array.from(thing).map(function (_a) {
                        var k = _a[0], v = _a[1];
                        return "set(" + stringify(k) + ", " + stringify(v) + ")";
                    }).join('.'));
                    break;
                default:
                    values_1.push(Object.getPrototypeOf(thing) === null ? 'Object.create(null)' : '{}');
                    Object.keys(thing).forEach(function (key) {
                        statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
                    });
            }
        });
        statements_1.push("return " + str);
        return "(function(" + params_1.join(',') + "){" + statements_1.join(';') + "}(" + values_1.join(',') + "))";
    }
    else {
        return str;
    }
}
function getName(num) {
    var name = '';
    do {
        name = chars[num % chars.length] + name;
        num = ~~(num / chars.length) - 1;
    } while (num >= 0);
    return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
    return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
    if (typeof thing === 'string')
        return stringifyString(thing);
    if (thing === void 0)
        return 'void 0';
    if (thing === 0 && 1 / thing < 0)
        return '-0';
    var str = String(thing);
    if (typeof thing === 'number')
        return str.replace(/^(-)?0\./, '$1.');
    return str;
}
function getType(thing) {
    return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
    return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
    return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
    var result = '"';
    for (var i = 0; i < str.length; i += 1) {
        var char = str.charAt(i);
        var code = char.charCodeAt(0);
        if (char === '"') {
            result += '\\"';
        }
        else if (char in escaped$1) {
            result += escaped$1[char];
        }
        else if (code >= 0xd800 && code <= 0xdfff) {
            var next = str.charCodeAt(i + 1);
            // If this is the beginning of a [high, low] surrogate pair,
            // add the next two characters, otherwise escape
            if (code <= 0xdbff && (next >= 0xdc00 && next <= 0xdfff)) {
                result += char + str[++i];
            }
            else {
                result += "\\u" + code.toString(16).toUpperCase();
            }
        }
        else {
            result += char;
        }
    }
    result += '"';
    return result;
}

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = Url.parse;
const format_url = Url.format;

const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parse_url(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parse_url(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parse_url(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream.PassThrough;
const resolve_url = Url.resolve;

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {

	// allow custom promise
	if (!fetch.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https : http).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof Stream.Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
			finalize();
		});

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				const locationURL = location === null ? null : resolve_url(request.url, location);

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout
						};

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib.Z_SYNC_FLUSH,
				finishFlush: zlib.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib.createInflate());
					} else {
						body = body.pipe(zlib.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
				body = body.pipe(zlib.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

function get_page_handler(
	manifest,
	session_getter
) {
	const get_build_info =  () => JSON.parse(fs.readFileSync(path.join(build_dir, 'build.json'), 'utf-8'))
		;

	const template =  () => read_template(src_dir)
		;

	const has_service_worker = fs.existsSync(path.join(build_dir, 'service-worker.js'));

	const { server_routes, pages } = manifest;
	const error_route = manifest.error;

	function bail(req, res, err) {
		console.error(err);

		const message =  escape_html(err.message) ;

		res.statusCode = 500;
		res.end(`<pre>${message}</pre>`);
	}

	function handle_error(req, res, statusCode, error) {
		handle_page({
			pattern: null,
			parts: [
				{ name: null, component: error_route }
			]
		}, req, res, statusCode, error || new Error('Unknown error in preload function'));
	}

	async function handle_page(page, req, res, status = 200, error = null) {
		const is_service_worker_index = req.path === '/service-worker-index.html';
		const build_info




 = get_build_info();

		res.setHeader('Content-Type', 'text/html');
		res.setHeader('Cache-Control',  'no-cache' );

		// preload main.js and current route
		// TODO detect other stuff we can preload? images, CSS, fonts?
		let preloaded_chunks = Array.isArray(build_info.assets.main) ? build_info.assets.main : [build_info.assets.main];
		if (!error && !is_service_worker_index) {
			page.parts.forEach(part => {
				if (!part) return;

				// using concat because it could be a string or an array. thanks webpack!
				preloaded_chunks = preloaded_chunks.concat(build_info.assets[part.name]);
			});
		}

		if (build_info.bundler === 'rollup') {
			// TODO add dependencies and CSS
			const link = preloaded_chunks
				.filter(file => file && !file.match(/\.map$/))
				.map(file => `<${req.baseUrl}/client/${file}>;rel="modulepreload"`)
				.join(', ');

			res.setHeader('Link', link);
		} else {
			const link = preloaded_chunks
				.filter(file => file && !file.match(/\.map$/))
				.map((file) => {
					const as = /\.css$/.test(file) ? 'style' : 'script';
					return `<${req.baseUrl}/client/${file}>;rel="preload";as="${as}"`;
				})
				.join(', ');

			res.setHeader('Link', link);
		}

		const session = session_getter(req, res);

		let redirect;
		let preload_error;

		const preload_context = {
			redirect: (statusCode, location) => {
				if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
					throw new Error(`Conflicting redirects`);
				}
				location = location.replace(/^\//g, ''); // leading slash (only)
				redirect = { statusCode, location };
			},
			error: (statusCode, message) => {
				preload_error = { statusCode, message };
			},
			fetch: (url, opts) => {
				const parsed = new Url.URL(url, `http://127.0.0.1:${process.env.PORT}${req.baseUrl ? req.baseUrl + '/' :''}`);

				if (opts) {
					opts = Object.assign({}, opts);

					const include_cookies = (
						opts.credentials === 'include' ||
						opts.credentials === 'same-origin' && parsed.origin === `http://127.0.0.1:${process.env.PORT}`
					);

					if (include_cookies) {
						opts.headers = Object.assign({}, opts.headers);

						const cookies = Object.assign(
							{},
							cookie.parse(req.headers.cookie || ''),
							cookie.parse(opts.headers.cookie || '')
						);

						const set_cookie = res.getHeader('Set-Cookie');
						(Array.isArray(set_cookie) ? set_cookie : [set_cookie]).forEach(str => {
							const match = /([^=]+)=([^;]+)/.exec(str);
							if (match) cookies[match[1]] = match[2];
						});

						const str = Object.keys(cookies)
							.map(key => `${key}=${cookies[key]}`)
							.join('; ');

						opts.headers.cookie = str;
					}
				}

				return fetch(parsed.href, opts);
			}
		};

		let preloaded;
		let match;
		let params;

		try {
			const root_preloaded = manifest.root_preload
				? manifest.root_preload.call(preload_context, {
					host: req.headers.host,
					path: req.path,
					query: req.query,
					params: {}
				}, session)
				: {};

			match = error ? null : page.pattern.exec(req.path);


			let toPreload = [root_preloaded];
			if (!is_service_worker_index) {
				toPreload = toPreload.concat(page.parts.map(part => {
					if (!part) return null;

					// the deepest level is used below, to initialise the store
					params = part.params ? part.params(match) : {};

					return part.preload
						? part.preload.call(preload_context, {
							host: req.headers.host,
							path: req.path,
							query: req.query,
							params
						}, session)
						: {};
				}));
			}

			preloaded = await Promise.all(toPreload);
		} catch (err) {
			if (error) {
				return bail(req, res, err)
			}

			preload_error = { statusCode: 500, message: err };
			preloaded = []; // appease TypeScript
		}

		try {
			if (redirect) {
				const location = Url.resolve((req.baseUrl || '') + '/', redirect.location);

				res.statusCode = redirect.statusCode;
				res.setHeader('Location', location);
				res.end();

				return;
			}

			if (preload_error) {
				handle_error(req, res, preload_error.statusCode, preload_error.message);
				return;
			}

			const segments = req.path.split('/').filter(Boolean);

			// TODO make this less confusing
			const layout_segments = [segments[0]];
			let l = 1;

			page.parts.forEach((part, i) => {
				layout_segments[l] = segments[i + 1];
				if (!part) return null;
				l++;
			});

			const props = {
				stores: {
					page: {
						subscribe: writable({
							host: req.headers.host,
							path: req.path,
							query: req.query,
							params
						}).subscribe
					},
					preloading: {
						subscribe: writable(null).subscribe
					},
					session: writable(session)
				},
				segments: layout_segments,
				status: error ? status : 200,
				error: error ? error instanceof Error ? error : { message: error } : null,
				level0: {
					props: preloaded[0]
				},
				level1: {
					segment: segments[0],
					props: {}
				}
			};

			if (!is_service_worker_index) {
				let l = 1;
				for (let i = 0; i < page.parts.length; i += 1) {
					const part = page.parts[i];
					if (!part) continue;

					props[`level${l++}`] = {
						component: part.component,
						props: preloaded[i + 1] || {},
						segment: segments[i]
					};
				}
			}

			const { html, head, css } = App$1.render(props);

			const serialized = {
				preloaded: `[${preloaded.map(data => try_serialize(data)).join(',')}]`,
				session: session && try_serialize(session, err => {
					throw new Error(`Failed to serialize session data: ${err.message}`);
				}),
				error: error && try_serialize(props.error)
			};

			let script = `__SAPPER__={${[
				error && `error:${serialized.error},status:${status}`,
				`baseUrl:"${req.baseUrl}"`,
				serialized.preloaded && `preloaded:${serialized.preloaded}`,
				serialized.session && `session:${serialized.session}`
			].filter(Boolean).join(',')}};`;

			if (has_service_worker) {
				script += `if('serviceWorker' in navigator)navigator.serviceWorker.register('${req.baseUrl}/service-worker.js');`;
			}

			const file = [].concat(build_info.assets.main).filter(file => file && /\.js$/.test(file))[0];
			const main = `${req.baseUrl}/client/${file}`;

			if (build_info.bundler === 'rollup') {
				if (build_info.legacy_assets) {
					const legacy_main = `${req.baseUrl}/client/legacy/${build_info.legacy_assets.main}`;
					script += `(function(){try{eval("async function x(){}");var main="${main}"}catch(e){main="${legacy_main}"};var s=document.createElement("script");try{new Function("if(0)import('')")();s.src=main;s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main",main);}document.head.appendChild(s);}());`;
				} else {
					script += `var s=document.createElement("script");try{new Function("if(0)import('')")();s.src="${main}";s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main","${main}")}document.head.appendChild(s)`;
				}
			} else {
				script += `</script><script src="${main}">`;
			}

			let styles;

			// TODO make this consistent across apps
			// TODO embed build_info in placeholder.ts
			if (build_info.css && build_info.css.main) {
				const css_chunks = new Set();
				if (build_info.css.main) css_chunks.add(build_info.css.main);
				page.parts.forEach(part => {
					if (!part) return;
					const css_chunks_for_part = build_info.css.chunks[part.file];

					if (css_chunks_for_part) {
						css_chunks_for_part.forEach(file => {
							css_chunks.add(file);
						});
					}
				});

				styles = Array.from(css_chunks)
					.map(href => `<link rel="stylesheet" href="client/${href}">`)
					.join('');
			} else {
				styles = (css && css.code ? `<style>${css.code}</style>` : '');
			}

			// users can set a CSP nonce using res.locals.nonce
			const nonce_attr = (res.locals && res.locals.nonce) ? ` nonce="${res.locals.nonce}"` : '';

			const body = template()
				.replace('%sapper.base%', () => `<base href="${req.baseUrl}/">`)
				.replace('%sapper.scripts%', () => `<script${nonce_attr}>${script}</script>`)
				.replace('%sapper.html%', () => html)
				.replace('%sapper.head%', () => `<noscript id='sapper-head-start'></noscript>${head}<noscript id='sapper-head-end'></noscript>`)
				.replace('%sapper.styles%', () => styles);

			res.statusCode = status;
			res.end(body);
		} catch(err) {
			if (error) {
				bail(req, res, err);
			} else {
				handle_error(req, res, 500, err);
			}
		}
	}

	return function find_route(req, res, next) {
		if (req.path === '/service-worker-index.html') {
			const homePage = pages.find(page => page.pattern.test('/'));
			handle_page(homePage, req, res);
			return;
		}

		for (const page of pages) {
			if (page.pattern.test(req.path)) {
				handle_page(page, req, res);
				return;
			}
		}

		handle_error(req, res, 404, 'Not found');
	};
}

function read_template(dir = build_dir) {
	return fs.readFileSync(`${dir}/template.html`, 'utf-8');
}

function try_serialize(data, fail) {
	try {
		return devalue(data);
	} catch (err) {
		if (fail) fail(err);
		return null;
	}
}

function escape_html(html) {
	const chars = {
		'"' : 'quot',
		"'": '#39',
		'&': 'amp',
		'<' : 'lt',
		'>' : 'gt'
	};

	return html.replace(/["'&<>]/g, c => `&${chars[c]};`);
}

function middleware(opts


 = {}) {
	const { session, ignore } = opts;

	let emitted_basepath = false;

	return compose_handlers(ignore, [
		(req, res, next) => {
			if (req.baseUrl === undefined) {
				let { originalUrl } = req;
				if (req.url === '/' && originalUrl[originalUrl.length - 1] !== '/') {
					originalUrl += '/';
				}

				req.baseUrl = originalUrl
					? originalUrl.slice(0, -req.url.length)
					: '';
			}

			if (!emitted_basepath && process.send) {
				process.send({
					__sapper__: true,
					event: 'basepath',
					basepath: req.baseUrl
				});

				emitted_basepath = true;
			}

			if (req.path === undefined) {
				req.path = req.url.replace(/\?.*/, '');
			}

			next();
		},

		fs.existsSync(path.join(build_dir, 'service-worker.js')) && serve({
			pathname: '/service-worker.js',
			cache_control: 'no-cache, no-store, must-revalidate'
		}),

		fs.existsSync(path.join(build_dir, 'service-worker.js.map')) && serve({
			pathname: '/service-worker.js.map',
			cache_control: 'no-cache, no-store, must-revalidate'
		}),

		serve({
			prefix: '/client/',
			cache_control:  'no-cache' 
		}),

		get_server_route_handler(manifest.server_routes),

		get_page_handler(manifest, session || noop$1)
	].filter(Boolean));
}

function compose_handlers(ignore, handlers) {
	const total = handlers.length;

	function nth_handler(n, req, res, next) {
		if (n >= total) {
			return next();
		}

		handlers[n](req, res, () => nth_handler(n+1, req, res, next));
	}

	return !ignore
		? (req, res, next) => nth_handler(0, req, res, next)
		: (req, res, next) => {
			if (should_ignore(req.path, ignore)) {
				next();
			} else {
				nth_handler(0, req, res, next);
			}
		};
}

function should_ignore(uri, val) {
	if (Array.isArray(val)) return val.some(x => should_ignore(uri, x));
	if (val instanceof RegExp) return val.test(uri);
	if (typeof val === 'function') return val(uri);
	return uri.startsWith(val.charCodeAt(0) === 47 ? val : `/${val}`);
}

function serve({ prefix, pathname, cache_control }



) {
	const filter = pathname
		? (req) => req.path === pathname
		: (req) => req.path.startsWith(prefix);

	const read =  (file) => fs.readFileSync(path.join(build_dir, file))
		;

	return (req, res, next) => {
		if (filter(req)) {
			const type = lite.getType(req.path);

			try {
				const file = path.posix.normalize(decodeURIComponent(req.path));
				const data = read(file);

				res.setHeader('Content-Type', type);
				res.setHeader('Cache-Control', cache_control);
				res.end(data);
			} catch (err) {
				res.statusCode = 404;
				res.end('not found');
			}
		} else {
			next();
		}
	};
}

function noop$1(){}

const { PORT, NODE_ENV } = process.env;
const dev = NODE_ENV === 'development';
const jstr = JSON.stringify;
let server = http.createServer();
polka({server}) // You can also use Express
	.use(
		compression({ threshold: 0 }),
		sirv('static', { dev }),
		middleware()
	)
	.listen(PORT, err => {
		if (err) console.log('error', err);
	});

let games = [];
let generatenewgame = (state) => { console.log('new game generated: ', state.label);
	state = {...state, game_id:games.length};
	games = [...games,{game:state}];
	return state.game_id;
};
console.log('server started');
let regPlyr = (socket,msg) => socket.join(msg.game_id);
let setState = (msg) => games[msg.game_id] = { game: msg };
let ws = io(server).on('connection', socket => {
	console.log('connection made');
	socket.on('message', msg => {
		msg = JSON.parse(msg);
		switch (msg.header) {
			case 'register' :  console.log(msg.header);
				regPlyr(socket,msg);
				break;
			case 'set' :  //console.log(msg.header);
				setState(msg);
				socket.to(msg.game_id).emit('set',jstr(msg));
				break;
			case 'newgame' : console.log(msg.header);
				socket.emit('id',generatenewgame(msg.game)); 
				break;
			case 'ping': //console.log(msg.header);
				socket.emit(jstr({ header: "pong" }));
				break;
			case 'remove' :  console.log(msg.header);
				games = games.splice(msg.game_id,1);
				break;
			case 'fetchexisting' :  console.log(msg.header);
				socket.emit('fetch',jstr(games));
				break;
			case 'enterexisting' : console.log(msg.header);
				let game_id = msg.game_id,
					game = games[game_id].game,
					slot = msg.slot,
					player_name = msg.player_name;
				if(slot == -1) break;
				game.players[slot] = {...game.players[slot], name:player_name, available:false};
				regPlyr(socket,msg);
				if (game.currentphase < 0) game.currentphase = 0;
				socket.emit('enter',jstr(game));
				ws.to(game_id).emit('join',jstr({slot:slot,player:game.players[slot]}));
				break;
		}
	});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
