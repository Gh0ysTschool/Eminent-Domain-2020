import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as onMount, v as validate_slots, g as globals, e as empty, a as insert_dev, b as detach_dev, n as noop, c as validate_each_argument, f as element, h as claim_element, j as children, k as attr_dev, l as null_to_empty, m as add_location, p as destroy_each, t as text, q as claim_text, r as append_dev, u as run_all, w as listen_dev, x as set_data_dev, y as space, z as claim_space, A as set_style, B as set_input_value, C as is_function } from './client.baecbd12.js';

/* src\routes\index.svelte generated by Svelte v3.20.1 */

const { Object: Object_1, console: console_1 } = globals;
const file = "src\\routes\\index.svelte";

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[179] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[176] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[185] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[185] = list[i];
	return child_ctx;
}

function get_each_context_7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[179] = list[i];
	return child_ctx;
}

function get_each_context_6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[190] = list[i];
	return child_ctx;
}

function get_each_context_8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[190] = list[i];
	return child_ctx;
}

function get_each_context_11(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[185] = list[i];
	return child_ctx;
}

function get_each_context_10(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[185] = list[i];
	return child_ctx;
}

function get_each_context_9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[185] = list[i];
	return child_ctx;
}

function get_each_context_12(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[203] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[182] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[173] = list[i];
	return child_ctx;
}

// (2210:0) {#if mounted}
function create_if_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*game*/ ctx[0].currentphase == -4) return create_if_block_1;
		if (/*game*/ ctx[0].currentphase == -3) return create_if_block_2;
		if (/*game*/ ctx[0].currentphase == -2) return create_if_block_3;
		if (/*game*/ ctx[0].currentphase == -1) return create_if_block_4;
		if (/*game*/ ctx[0].passtoplayer && !/*lobby*/ ctx[1].online) return create_if_block_5;
		if (!!/*game*/ ctx[0].winner) return create_if_block_6;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(2210:0) {#if mounted}",
		ctx
	});

	return block;
}

// (2245:1) {:else}
function create_else_block(ctx) {
	let div;
	let t;
	let each_value_3 = /*game*/ ctx[0].players;
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let if_block = /*game*/ ctx[0].displayinfo.selectionzone == "options" && create_if_block_7(ctx);

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, style: true, class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			t = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", "screen");
			set_style(div, "height", "100%");
			set_style(div, "width", "100%");
			attr_dev(div, "class", "flex svelte-1nwzw2v");
			add_location(div, file, 2245, 2, 84529);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append_dev(div, t);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, drag, drop, move, choosewrapper, pass_priority, pass_turn, choose, unchoose, toggle_center_or_planets, lobby*/ 119035) {
				each_value_3 = /*game*/ ctx[0].players;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}

			if (/*game*/ ctx[0].displayinfo.selectionzone == "options") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_7(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(2245:1) {:else}",
		ctx
	});

	return block;
}

// (2241:25) 
function create_if_block_6(ctx) {
	let div;
	let t0_value = /*game*/ ctx[0].winner + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text(" WON!!!!");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_text(div_nodes, " WON!!!!");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "passtoplayer svelte-1nwzw2v");
			add_location(div, file, 2241, 2, 84457);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && t0_value !== (t0_value = /*game*/ ctx[0].winner + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(2241:25) ",
		ctx
	});

	return block;
}

// (2237:46) 
function create_if_block_5(ctx) {
	let div;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text("pass to next player");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "pass to next player");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "passtoplayer svelte-1nwzw2v");
			add_location(div, file, 2237, 2, 84296);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_8*/ ctx[133], false, false, false),
				listen_dev(div, "tap", /*tap_handler_8*/ ctx[134], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(2237:46) ",
		ctx
	});

	return block;
}

// (2230:33) 
function create_if_block_4(ctx) {
	let div;
	let p;
	let t0;
	let t1;
	let each_value = /*lobby*/ ctx[1].existinggames;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t0 = text("Choose a Game to Join");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Choose a Game to Join");
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-1nwzw2v");
			add_location(p, file, 2231, 3, 84057);
			attr_dev(div, "class", "playercountselector svelte-1nwzw2v");
			add_location(div, file, 2230, 2, 84020);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t0);
			append_dev(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*enterexistinggame, lobby*/ 2050) {
				each_value = /*lobby*/ ctx[1].existinggames;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(2230:33) ",
		ctx
	});

	return block;
}

// (2224:33) 
function create_if_block_3(ctx) {
	let div;
	let p0;
	let t0;
	let t1;
	let input;
	let t2;
	let p1;
	let t3;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text("Choose your Screen Name");
			t1 = space();
			input = element("input");
			t2 = space();
			p1 = element("p");
			t3 = text("Finished");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Choose your Screen Name");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			input = claim_element(div_nodes, "INPUT", { type: true, class: true });
			t2 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "Finished");
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "svelte-1nwzw2v");
			add_location(p0, file, 2225, 2, 83781);
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "svelte-1nwzw2v");
			add_location(input, file, 2226, 2, 83816);
			attr_dev(p1, "class", "svelte-1nwzw2v");
			add_location(p1, file, 2227, 2, 83864);
			attr_dev(div, "class", "playercountselector svelte-1nwzw2v");
			add_location(div, file, 2224, 1, 83745);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, input);
			set_input_value(input, /*lobby*/ ctx[1].name);
			append_dev(div, t2);
			append_dev(div, p1);
			append_dev(p1, t3);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(input, "input", /*input_input_handler*/ ctx[128]),
				listen_dev(p1, "click", /*click_handler_6*/ ctx[129], false, false, false),
				listen_dev(p1, "tap", /*tap_handler_6*/ ctx[130], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*lobby*/ 2 && input.value !== /*lobby*/ ctx[1].name) {
				set_input_value(input, /*lobby*/ ctx[1].name);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(2224:33) ",
		ctx
	});

	return block;
}

// (2217:33) 
function create_if_block_2(ctx) {
	let div;
	let p0;
	let t0;
	let t1;
	let p1;
	let t2;
	let t3;
	let p2;
	let t4;
	let t5;
	let p3;
	let t6;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text("Choose your Game's number of Players");
			t1 = space();
			p1 = element("p");
			t2 = text("2");
			t3 = space();
			p2 = element("p");
			t4 = text("3");
			t5 = space();
			p3 = element("p");
			t6 = text("4");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Choose your Game's number of Players");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, "2");
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, "3");
			p2_nodes.forEach(detach_dev);
			t5 = claim_space(div_nodes);
			p3 = claim_element(div_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t6 = claim_text(p3_nodes, "4");
			p3_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "svelte-1nwzw2v");
			add_location(p0, file, 2218, 2, 83456);
			attr_dev(p1, "class", "svelte-1nwzw2v");
			add_location(p1, file, 2219, 2, 83503);
			attr_dev(p2, "class", "svelte-1nwzw2v");
			add_location(p2, file, 2220, 2, 83570);
			attr_dev(p3, "class", "svelte-1nwzw2v");
			add_location(p3, file, 2221, 2, 83637);
			attr_dev(div, "class", "playercountselector svelte-1nwzw2v");
			add_location(div, file, 2217, 1, 83420);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
			append_dev(div, t3);
			append_dev(div, p2);
			append_dev(p2, t4);
			append_dev(div, t5);
			append_dev(div, p3);
			append_dev(p3, t6);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(p1, "click", /*click_handler_3*/ ctx[122], false, false, false),
				listen_dev(p1, "tap", /*tap_handler_3*/ ctx[123], false, false, false),
				listen_dev(p2, "click", /*click_handler_4*/ ctx[124], false, false, false),
				listen_dev(p2, "tap", /*tap_handler_4*/ ctx[125], false, false, false),
				listen_dev(p3, "click", /*click_handler_5*/ ctx[126], false, false, false),
				listen_dev(p3, "tap", /*tap_handler_5*/ ctx[127], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(2217:33) ",
		ctx
	});

	return block;
}

// (2211:1) {#if game.currentphase==-4}
function create_if_block_1(ctx) {
	let div;
	let p0;
	let t0;
	let t1;
	let p1;
	let t2;
	let t3;
	let p2;
	let t4;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text("Start a New Online Game");
			t1 = space();
			p1 = element("p");
			t2 = text("Join an Existing Online Game");
			t3 = space();
			p2 = element("p");
			t4 = text("Start a New Offline Game");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Start a New Online Game");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, "Join an Existing Online Game");
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t4 = claim_text(p2_nodes, "Start a New Offline Game");
			p2_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "svelte-1nwzw2v");
			add_location(p0, file, 2212, 2, 83076);
			attr_dev(p1, "class", "svelte-1nwzw2v");
			add_location(p1, file, 2213, 2, 83175);
			attr_dev(p2, "class", "svelte-1nwzw2v");
			add_location(p2, file, 2214, 2, 83287);
			attr_dev(div, "class", "playercountselector svelte-1nwzw2v");
			add_location(div, file, 2211, 1, 83040);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
			append_dev(div, t3);
			append_dev(div, p2);
			append_dev(p2, t4);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(p0, "click", /*click_handler*/ ctx[116], false, false, false),
				listen_dev(p0, "tap", /*tap_handler*/ ctx[117], false, false, false),
				listen_dev(p1, "click", /*click_handler_1*/ ctx[118], false, false, false),
				listen_dev(p1, "tap", /*tap_handler_1*/ ctx[119], false, false, false),
				listen_dev(p2, "click", /*click_handler_2*/ ctx[120], false, false, false),
				listen_dev(p2, "tap", /*tap_handler_2*/ ctx[121], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(2211:1) {#if game.currentphase==-4}",
		ctx
	});

	return block;
}

// (2248:4) {#if game.players[game.acting_player_index]!==undefined && ((lobby.screenname==player.name && lobby.online) || (game.players[game.acting_player_index].id==player.id && !lobby.online)) }
function create_if_block_16(ctx) {
	let div9;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;

	let t3_value = (/*game*/ ctx[0].displayinfo.center_or_planets
	? "planets"
	: "center row") + "";

	let t3;
	let t4;
	let t5;
	let t6;
	let div3;
	let t7;
	let t8;
	let t9;
	let div4;
	let t10_value = /*game*/ ctx[0].messagetoplayer[/*game*/ ctx[0].messagetoplayer.length - 1] + "";
	let t10;
	let t11;
	let div8;
	let div5;
	let t12;
	let t13_value = /*player*/ ctx[182].deck.length + "";
	let t13;
	let t14;
	let div6;
	let t15;
	let div7;
	let t16;
	let t17_value = /*player*/ ctx[182].discard.length + "";
	let t17;
	let t18;
	let dispose;
	let each_value_12 = /*game*/ ctx[0].players;
	validate_each_argument(each_value_12);
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_12.length; i += 1) {
		each_blocks_2[i] = create_each_block_12(get_each_context_12(ctx, each_value_12, i));
	}

	function select_block_type_1(ctx, dirty) {
		if (/*game*/ ctx[0].displayinfo.selectionzone == "research") return create_if_block_34;
		if (/*game*/ ctx[0].displayinfo.center_or_planets) return create_if_block_35;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type && current_block_type(ctx);
	let if_block1 = !/*game*/ ctx[0].displayinfo.center_or_planets && create_if_block_26(ctx);

	function select_block_type_3(ctx, dirty) {
		if (/*game*/ ctx[0].displayinfo.showoptiontoskip) return create_if_block_25;
		return create_else_block_5;
	}

	let current_block_type_1 = select_block_type_3(ctx);
	let if_block2 = current_block_type_1(ctx);
	let each_value_5 = /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].limbo;
	validate_each_argument(each_value_5);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks_1[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	function select_block_type_5(ctx, dirty) {
		if (/*game*/ ctx[0].passp) return create_if_block_20;
		if (/*game*/ ctx[0].passt) return create_if_block_21;
		if (/*game*/ ctx[0].displayinfo.allowformultipleselections && /*game*/ ctx[0].choices.length > 0) return create_if_block_22;
		return create_else_block_4;
	}

	let current_block_type_2 = select_block_type_5(ctx);
	let if_block3 = current_block_type_2(ctx);
	let each_value_4 = /*player*/ ctx[182].hand;
	validate_each_argument(each_value_4);
	let each_blocks = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	const block = {
		c: function create() {
			div9 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t1 = space();
			div2 = element("div");
			t2 = text("show ");
			t3 = text(t3_value);
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			if (if_block1) if_block1.c();
			t6 = space();
			div3 = element("div");
			if_block2.c();
			t7 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t8 = space();
			if_block3.c();
			t9 = space();
			div4 = element("div");
			t10 = text(t10_value);
			t11 = space();
			div8 = element("div");
			div5 = element("div");
			t12 = text("cards remaining in deck: ");
			t13 = text(t13_value);
			t14 = space();
			div6 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t15 = space();
			div7 = element("div");
			t16 = text("cards in discard pile: ");
			t17 = text(t17_value);
			t18 = space();
			this.h();
		},
		l: function claim(nodes) {
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div0 = claim_element(div9_nodes, "DIV", { id: true, class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div9_nodes);
			div1 = claim_element(div9_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div9_nodes);
			div2 = claim_element(div9_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t2 = claim_text(div2_nodes, "show ");
			t3 = claim_text(div2_nodes, t3_value);
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(div9_nodes);
			if (if_block0) if_block0.l(div9_nodes);
			t5 = claim_space(div9_nodes);
			if (if_block1) if_block1.l(div9_nodes);
			t6 = claim_space(div9_nodes);
			div3 = claim_element(div9_nodes, "DIV", { id: true, class: true });
			var div3_nodes = children(div3);
			if_block2.l(div3_nodes);
			t7 = claim_space(div3_nodes);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div3_nodes);
			}

			t8 = claim_space(div3_nodes);
			if_block3.l(div3_nodes);
			div3_nodes.forEach(detach_dev);
			t9 = claim_space(div9_nodes);
			div4 = claim_element(div9_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t10 = claim_text(div4_nodes, t10_value);
			div4_nodes.forEach(detach_dev);
			t11 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div5 = claim_element(div8_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t12 = claim_text(div5_nodes, "cards remaining in deck: ");
			t13 = claim_text(div5_nodes, t13_value);
			div5_nodes.forEach(detach_dev);
			t14 = claim_space(div8_nodes);
			div6 = claim_element(div8_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div6_nodes);
			}

			div6_nodes.forEach(detach_dev);
			t15 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			t16 = claim_text(div7_nodes, "cards in discard pile: ");
			t17 = claim_text(div7_nodes, t17_value);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			t18 = claim_space(div9_nodes);
			div9_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "dragged");
			attr_dev(div0, "class", "svelte-1nwzw2v");
			add_location(div0, file, 2249, 6, 84863);
			attr_dev(div1, "class", "playerinfo bordered svelte-1nwzw2v");
			add_location(div1, file, 2250, 6, 84894);
			attr_dev(div2, "class", "svelte-1nwzw2v");
			add_location(div2, file, 2262, 6, 85739);
			attr_dev(div3, "id", "playedcards");
			attr_dev(div3, "class", "flex zone playedcards svelte-1nwzw2v");
			add_location(div3, file, 2354, 6, 90800);
			attr_dev(div4, "class", "messagetoplayer bordered svelte-1nwzw2v");
			add_location(div4, file, 2382, 6, 92563);
			attr_dev(div5, "class", "bordered deck svelte-1nwzw2v");
			add_location(div5, file, 2385, 7, 92729);
			attr_dev(div6, "class", "hand svelte-1nwzw2v");
			add_location(div6, file, 2386, 7, 92816);
			attr_dev(div7, "class", "bordered discard svelte-1nwzw2v");
			add_location(div7, file, 2403, 7, 94377);
			attr_dev(div8, "class", "flex zone ownedcards svelte-1nwzw2v");
			add_location(div8, file, 2384, 6, 92687);
			attr_dev(div9, "class", "bordered playingfield svelte-1nwzw2v");
			add_location(div9, file, 2248, 5, 84821);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div9, anchor);
			append_dev(div9, div0);
			append_dev(div9, t0);
			append_dev(div9, div1);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div1, null);
			}

			append_dev(div9, t1);
			append_dev(div9, div2);
			append_dev(div2, t2);
			append_dev(div2, t3);
			append_dev(div9, t4);
			if (if_block0) if_block0.m(div9, null);
			append_dev(div9, t5);
			if (if_block1) if_block1.m(div9, null);
			append_dev(div9, t6);
			append_dev(div9, div3);
			if_block2.m(div3, null);
			append_dev(div3, t7);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div3, null);
			}

			append_dev(div3, t8);
			if_block3.m(div3, null);
			append_dev(div9, t9);
			append_dev(div9, div4);
			append_dev(div4, t10);
			append_dev(div9, t11);
			append_dev(div9, div8);
			append_dev(div8, div5);
			append_dev(div5, t12);
			append_dev(div5, t13);
			append_dev(div8, t14);
			append_dev(div8, div6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div6, null);
			}

			append_dev(div8, t15);
			append_dev(div8, div7);
			append_dev(div7, t16);
			append_dev(div7, t17);
			append_dev(div9, t18);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div2, "click", /*click_handler_9*/ ctx[135], false, false, false),
				listen_dev(div2, "tap", /*tap_handler_9*/ ctx[136], false, false, false)
			];
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1) {
				each_value_12 = /*game*/ ctx[0].players;
				validate_each_argument(each_value_12);
				let i;

				for (i = 0; i < each_value_12.length; i += 1) {
					const child_ctx = get_each_context_12(ctx, each_value_12, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_12(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div1, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_12.length;
			}

			if (dirty[0] & /*game*/ 1 && t3_value !== (t3_value = (/*game*/ ctx[0].displayinfo.center_or_planets
			? "planets"
			: "center row") + "")) set_data_dev(t3, t3_value);

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if (if_block0) if_block0.d(1);
				if_block0 = current_block_type && current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div9, t5);
				}
			}

			if (!/*game*/ ctx[0].displayinfo.center_or_planets) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_26(ctx);
					if_block1.c();
					if_block1.m(div9, t6);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_3(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type_1(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div3, t7);
				}
			}

			if (dirty[0] & /*game, unchoose*/ 33) {
				each_value_5 = /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].limbo;
				validate_each_argument(each_value_5);
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_5(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div3, t8);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_5.length;
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_5(ctx)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_2(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(div3, null);
				}
			}

			if (dirty[0] & /*game*/ 1 && t10_value !== (t10_value = /*game*/ ctx[0].messagetoplayer[/*game*/ ctx[0].messagetoplayer.length - 1] + "")) set_data_dev(t10, t10_value);
			if (dirty[0] & /*game*/ 1 && t13_value !== (t13_value = /*player*/ ctx[182].deck.length + "")) set_data_dev(t13, t13_value);

			if (dirty[0] & /*game, drag, drop, move, choosewrapper*/ 114697) {
				each_value_4 = /*player*/ ctx[182].hand;
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div6, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_4.length;
			}

			if (dirty[0] & /*game*/ 1 && t17_value !== (t17_value = /*player*/ ctx[182].discard.length + "")) set_data_dev(t17, t17_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div9);
			destroy_each(each_blocks_2, detaching);

			if (if_block0) {
				if_block0.d();
			}

			if (if_block1) if_block1.d();
			if_block2.d();
			destroy_each(each_blocks_1, detaching);
			if_block3.d();
			destroy_each(each_blocks, detaching);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_16.name,
		type: "if",
		source: "(2248:4) {#if game.players[game.acting_player_index]!==undefined && ((lobby.screenname==player.name && lobby.online) || (game.players[game.acting_player_index].id==player.id && !lobby.online)) }",
		ctx
	});

	return block;
}

// (2253:7) {#each game.players as p}
function create_each_block_12(ctx) {
	let div3;
	let div0;
	let t0;
	let t1_value = /*p*/ ctx[203].starfighters.small + "";
	let t1;
	let t2;
	let div1;
	let t3;
	let t4_value = /*p*/ ctx[203].influence.length + "";
	let t4;
	let t5;
	let div2;
	let t6_value = /*p*/ ctx[203].name + "";
	let t6;
	let t7;
	let div3_class_value;

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = text("Military Might ");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			t3 = text("Galactic Influence ");
			t4 = text(t4_value);
			t5 = space();
			div2 = element("div");
			t6 = text(t6_value);
			t7 = space();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { style: true, class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { style: true, class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Military Might ");
			t1 = claim_text(div0_nodes, t1_value);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { style: true, class: true });
			var div1_nodes = children(div1);
			t3 = claim_text(div1_nodes, "Galactic Influence ");
			t4 = claim_text(div1_nodes, t4_value);
			div1_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { style: true, class: true });
			var div2_nodes = children(div2);
			t6 = claim_text(div2_nodes, t6_value);
			div2_nodes.forEach(detach_dev);
			t7 = claim_space(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div0, "width", "33%");
			set_style(div0, "text-align", "center");
			attr_dev(div0, "class", "bordered svelte-1nwzw2v");
			add_location(div0, file, 2254, 9, 85191);
			set_style(div1, "width", "33%");
			set_style(div1, "text-align", "center");
			attr_dev(div1, "class", "bordered svelte-1nwzw2v");
			add_location(div1, file, 2255, 9, 85306);
			set_style(div2, "width", "33%");
			set_style(div2, "text-align", "center");
			attr_dev(div2, "class", "bordered svelte-1nwzw2v");
			add_location(div2, file, 2256, 9, 85423);
			set_style(div3, "width", 100 / /*game*/ ctx[0].number_of_players + "%");

			attr_dev(div3, "class", div3_class_value = "flex " + (/*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index] !== undefined && /*p*/ ctx[203].name == /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].name
			? "selectable"
			: "bordered") + " svelte-1nwzw2v");

			add_location(div3, file, 2253, 8, 84977);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, t0);
			append_dev(div0, t1);
			append_dev(div3, t2);
			append_dev(div3, div1);
			append_dev(div1, t3);
			append_dev(div1, t4);
			append_dev(div3, t5);
			append_dev(div3, div2);
			append_dev(div2, t6);
			append_dev(div3, t7);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && t1_value !== (t1_value = /*p*/ ctx[203].starfighters.small + "")) set_data_dev(t1, t1_value);
			if (dirty[0] & /*game*/ 1 && t4_value !== (t4_value = /*p*/ ctx[203].influence.length + "")) set_data_dev(t4, t4_value);
			if (dirty[0] & /*game*/ 1 && t6_value !== (t6_value = /*p*/ ctx[203].name + "")) set_data_dev(t6, t6_value);

			if (dirty[0] & /*game*/ 1) {
				set_style(div3, "width", 100 / /*game*/ ctx[0].number_of_players + "%");
			}

			if (dirty[0] & /*game*/ 1 && div3_class_value !== (div3_class_value = "flex " + (/*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index] !== undefined && /*p*/ ctx[203].name == /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].name
			? "selectable"
			: "bordered") + " svelte-1nwzw2v")) {
				attr_dev(div3, "class", div3_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_12.name,
		type: "each",
		source: "(2253:7) {#each game.players as p}",
		ctx
	});

	return block;
}

// (2275:51) 
function create_if_block_35(ctx) {
	let div;

	function select_block_type_2(ctx, dirty) {
		if (/*game*/ ctx[0].displayinfo.selectionzone == "rolecards") return create_if_block_36;
		return create_else_block_6;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "flex zone centerrow svelte-1nwzw2v");
			add_location(div, file, 2275, 7, 86462);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_35.name,
		type: "if",
		source: "(2275:51) ",
		ctx
	});

	return block;
}

// (2267:6) {#if game.displayinfo.selectionzone=='research'}
function create_if_block_34(ctx) {
	let div;
	let each_value_9 = /*game*/ ctx[0].research_deck;
	validate_each_argument(each_value_9);
	let each_blocks = [];

	for (let i = 0; i < each_value_9.length; i += 1) {
		each_blocks[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "zone researchrow svelte-1nwzw2v");
			add_location(div, file, 2267, 7, 86006);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, choosewrapper*/ 9) {
				each_value_9 = /*game*/ ctx[0].research_deck;
				validate_each_argument(each_value_9);
				let i;

				for (i = 0; i < each_value_9.length; i += 1) {
					const child_ctx = get_each_context_9(ctx, each_value_9, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_9(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_9.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_34.name,
		type: "if",
		source: "(2267:6) {#if game.displayinfo.selectionzone=='research'}",
		ctx
	});

	return block;
}

// (2284:8) {:else}
function create_else_block_6(ctx) {
	let each_1_anchor;
	let each_value_11 = /*game*/ ctx[0].stacks.rolecards;
	validate_each_argument(each_value_11);
	let each_blocks = [];

	for (let i = 0; i < each_value_11.length; i += 1) {
		each_blocks[i] = create_each_block_11(get_each_context_11(ctx, each_value_11, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1) {
				each_value_11 = /*game*/ ctx[0].stacks.rolecards;
				validate_each_argument(each_value_11);
				let i;

				for (i = 0; i < each_value_11.length; i += 1) {
					const child_ctx = get_each_context_11(ctx, each_value_11, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_11(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_11.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_6.name,
		type: "else",
		source: "(2284:8) {:else}",
		ctx
	});

	return block;
}

// (2277:8) {#if game.displayinfo.selectionzone=='rolecards'}
function create_if_block_36(ctx) {
	let each_1_anchor;
	let each_value_10 = /*game*/ ctx[0].stacks.rolecards;
	validate_each_argument(each_value_10);
	let each_blocks = [];

	for (let i = 0; i < each_value_10.length; i += 1) {
		each_blocks[i] = create_each_block_10(get_each_context_10(ctx, each_value_10, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, choosewrapper, move, drag, drop*/ 114697) {
				each_value_10 = /*game*/ ctx[0].stacks.rolecards;
				validate_each_argument(each_value_10);
				let i;

				for (i = 0; i < each_value_10.length; i += 1) {
					const child_ctx = get_each_context_10(ctx, each_value_10, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_10(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_10.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_36.name,
		type: "if",
		source: "(2277:8) {#if game.displayinfo.selectionzone=='rolecards'}",
		ctx
	});

	return block;
}

// (2285:9) {#each game.stacks.rolecards as card}
function create_each_block_11(ctx) {
	let div1;
	let img;
	let img_class_value;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div0;
	let t1_value = /*game*/ ctx[0].stacks.pilecount[/*card*/ ctx[185].type] + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div1 = element("div");
			img = element("img");
			t0 = space();
			div0 = element("div");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, t1_value);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", img_class_value = "" + (null_to_empty(/*game*/ ctx[0].displayinfo.selectionzone == "rolecards"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v"));

			if (img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);
			add_location(img, file, 2286, 10, 87274);
			attr_dev(div0, "class", "pilecount svelte-1nwzw2v");
			add_location(div0, file, 2287, 10, 87456);
			attr_dev(div1, "class", "svelte-1nwzw2v");
			add_location(div1, file, 2285, 9, 87258);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, img);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, t1);
			append_dev(div1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && img_class_value !== (img_class_value = "" + (null_to_empty(/*game*/ ctx[0].displayinfo.selectionzone == "rolecards"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v"))) {
				attr_dev(img, "class", img_class_value);
			}

			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*game*/ 1 && t1_value !== (t1_value = /*game*/ ctx[0].stacks.pilecount[/*card*/ ctx[185].type] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_11.name,
		type: "each",
		source: "(2285:9) {#each game.stacks.rolecards as card}",
		ctx
	});

	return block;
}

// (2278:9) {#each game.stacks.rolecards as card}
function create_each_block_10(ctx) {
	let div1;
	let img;
	let img_class_value;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div0;
	let t1_value = /*game*/ ctx[0].stacks.pilecount[/*card*/ ctx[185].type] + "";
	let t1;
	let t2;
	let dispose;

	function click_handler_11(...args) {
		return /*click_handler_11*/ ctx[139](/*card*/ ctx[185], ...args);
	}

	function tap_handler_11(...args) {
		return /*tap_handler_11*/ ctx[140](/*card*/ ctx[185], ...args);
	}

	function touchmove_handler(...args) {
		return /*touchmove_handler*/ ctx[141](/*card*/ ctx[185], ...args);
	}

	function touchstart_handler(...args) {
		return /*touchstart_handler*/ ctx[142](/*card*/ ctx[185], ...args);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			img = element("img");
			t0 = space();
			div0 = element("div");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, t1_value);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", img_class_value = "" + (null_to_empty(/*game*/ ctx[0].displayinfo.selectionzone == "rolecards"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v"));

			if (img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);
			add_location(img, file, 2279, 10, 86626);
			attr_dev(div0, "class", "pilecount svelte-1nwzw2v");
			add_location(div0, file, 2280, 10, 87088);
			attr_dev(div1, "class", "svelte-1nwzw2v");
			add_location(div1, file, 2278, 9, 86610);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div1, anchor);
			append_dev(div1, img);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, t1);
			append_dev(div1, t2);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(img, "click", click_handler_11, false, false, false),
				listen_dev(img, "tap", tap_handler_11, false, false, false),
				listen_dev(img, "touchmove", touchmove_handler, false, false, false),
				listen_dev(img, "touchstart", touchstart_handler, false, false, false),
				listen_dev(img, "touchend", /*touchend_handler*/ ctx[143], false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img_class_value !== (img_class_value = "" + (null_to_empty(/*game*/ ctx[0].displayinfo.selectionzone == "rolecards"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v"))) {
				attr_dev(img, "class", img_class_value);
			}

			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*game*/ 1 && t1_value !== (t1_value = /*game*/ ctx[0].stacks.pilecount[/*card*/ ctx[185].type] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_10.name,
		type: "each",
		source: "(2278:9) {#each game.stacks.rolecards as card}",
		ctx
	});

	return block;
}

// (2269:8) {#each game.research_deck as card}
function create_each_block_9(ctx) {
	let div;
	let img;
	let img_src_value;
	let img_class_value;
	let img_alt_value;
	let t;
	let dispose;

	function click_handler_10(...args) {
		return /*click_handler_10*/ ctx[137](/*card*/ ctx[185], ...args);
	}

	function tap_handler_10(...args) {
		return /*tap_handler_10*/ ctx[138](/*card*/ ctx[185], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { src: true, class: true, alt: true });
			t = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*card*/ ctx[185].imgurl)) attr_dev(img, "src", img_src_value);

			attr_dev(img, "class", img_class_value = "" + (null_to_empty(/*game*/ ctx[0].displayinfo.selectionzone == "research"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v"));

			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);
			add_location(img, file, 2270, 9, 86103);
			attr_dev(div, "class", "svelte-1nwzw2v");
			add_location(div, file, 2269, 8, 86088);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(img, "click", click_handler_10, false, false, false),
				listen_dev(img, "tap", tap_handler_10, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = /*card*/ ctx[185].imgurl)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_class_value !== (img_class_value = "" + (null_to_empty(/*game*/ ctx[0].displayinfo.selectionzone == "research"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v"))) {
				attr_dev(img, "class", img_class_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_9.name,
		type: "each",
		source: "(2269:8) {#each game.research_deck as card}",
		ctx
	});

	return block;
}

// (2294:6) {#if !game.displayinfo.center_or_planets}
function create_if_block_26(ctx) {
	let div;
	let t;
	let each_value_8 = /*player*/ ctx[182].unsettled_planets;
	validate_each_argument(each_value_8);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_8.length; i += 1) {
		each_blocks_1[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
	}

	let each_value_6 = [
		.../*player*/ ctx[182].settled_planets,
		.../*player*/ ctx[182].conquered_planets
	];

	validate_each_argument(each_value_6);
	let each_blocks = [];

	for (let i = 0; i < each_value_6.length; i += 1) {
		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div_nodes);
			}

			t = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "flex zone centerrow svelte-1nwzw2v");
			add_location(div, file, 2294, 7, 87649);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div, null);
			}

			append_dev(div, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, choosewrapper*/ 9) {
				each_value_8 = /*player*/ ctx[182].unsettled_planets;
				validate_each_argument(each_value_8);
				let i;

				for (i = 0; i < each_value_8.length; i += 1) {
					const child_ctx = get_each_context_8(ctx, each_value_8, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_8(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div, t);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_8.length;
			}

			if (dirty[0] & /*game, choosewrapper*/ 9) {
				each_value_6 = [
					.../*player*/ ctx[182].settled_planets,
					.../*player*/ ctx[182].conquered_planets
				];

				validate_each_argument(each_value_6);
				let i;

				for (i = 0; i < each_value_6.length; i += 1) {
					const child_ctx = get_each_context_6(ctx, each_value_6, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_6.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_26.name,
		type: "if",
		source: "(2294:6) {#if !game.displayinfo.center_or_planets}",
		ctx
	});

	return block;
}

// (2296:8) {#each player.unsettled_planets as planet}
function create_each_block_8(ctx) {
	let div3;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div0;
	let t1_value = /*planet*/ ctx[190].settle_cost + "";
	let t1;
	let t2;
	let div1;
	let t3_value = /*planet*/ ctx[190].conquer_cost + "";
	let t3;
	let t4;
	let div2;
	let t5_value = /*planet*/ ctx[190].hosted_colonies.length + "";
	let t5;
	let t6;
	let div3_class_value;
	let dispose;

	function click_handler_12(...args) {
		return /*click_handler_12*/ ctx[144](/*planet*/ ctx[190], ...args);
	}

	function tap_handler_12(...args) {
		return /*tap_handler_12*/ ctx[145](/*planet*/ ctx[190], ...args);
	}

	const block = {
		c: function create() {
			div3 = element("div");
			img = element("img");
			t0 = space();
			div0 = element("div");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			t3 = text(t3_value);
			t4 = space();
			div2 = element("div");
			t5 = text(t5_value);
			t6 = text(" colonies");
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			img = claim_element(div3_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div3_nodes);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, t1_value);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t3 = claim_text(div1_nodes, t3_value);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t5 = claim_text(div2_nodes, t5_value);
			t6 = claim_text(div2_nodes, " colonies");
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/" + /*planet*/ ctx[190].type + "back.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = "" + (/*planet*/ ctx[190].settle_cost + " " + /*planet*/ ctx[190].type + " " + /*planet*/ ctx[190].conquer_cost));
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2297, 10, 88014);
			attr_dev(div0, "class", "settle_cost svelte-1nwzw2v");
			add_location(div0, file, 2298, 10, 88129);
			attr_dev(div1, "class", "conquer_cost svelte-1nwzw2v");
			add_location(div1, file, 2299, 10, 88192);
			attr_dev(div2, "class", "hosted_colonies svelte-1nwzw2v");
			add_location(div2, file, 2300, 10, 88257);

			attr_dev(div3, "class", div3_class_value = " unsettled " + (/*game*/ ctx[0].displayinfo.selectionzone == "unsettled_planets"
			? /*planet*/ ctx[190].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v");

			add_location(div3, file, 2296, 9, 87743);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div3, anchor);
			append_dev(div3, img);
			append_dev(div3, t0);
			append_dev(div3, div0);
			append_dev(div0, t1);
			append_dev(div3, t2);
			append_dev(div3, div1);
			append_dev(div1, t3);
			append_dev(div3, t4);
			append_dev(div3, div2);
			append_dev(div2, t5);
			append_dev(div2, t6);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div3, "click", click_handler_12, false, false, false),
				listen_dev(div3, "tap", tap_handler_12, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = "/images/" + /*planet*/ ctx[190].type + "back.png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = "" + (/*planet*/ ctx[190].settle_cost + " " + /*planet*/ ctx[190].type + " " + /*planet*/ ctx[190].conquer_cost))) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*game*/ 1 && t1_value !== (t1_value = /*planet*/ ctx[190].settle_cost + "")) set_data_dev(t1, t1_value);
			if (dirty[0] & /*game*/ 1 && t3_value !== (t3_value = /*planet*/ ctx[190].conquer_cost + "")) set_data_dev(t3, t3_value);
			if (dirty[0] & /*game*/ 1 && t5_value !== (t5_value = /*planet*/ ctx[190].hosted_colonies.length + "")) set_data_dev(t5, t5_value);

			if (dirty[0] & /*game*/ 1 && div3_class_value !== (div3_class_value = " unsettled " + (/*game*/ ctx[0].displayinfo.selectionzone == "unsettled_planets"
			? /*planet*/ ctx[190].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v")) {
				attr_dev(div3, "class", div3_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_8.name,
		type: "each",
		source: "(2296:8) {#each player.unsettled_planets as planet}",
		ctx
	});

	return block;
}

// (2313:12) {#if planet.icons.survey > 0}
function create_if_block_33(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/surveyicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "survey");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2313, 13, 89313);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2313, 61, 89361);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_33.name,
		type: "if",
		source: "(2313:12) {#if planet.icons.survey > 0}",
		ctx
	});

	return block;
}

// (2316:12) {#if planet.icons.warfare > 0}
function create_if_block_32(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/warfareicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "warfare");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2316, 13, 89440);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2316, 63, 89490);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_32.name,
		type: "if",
		source: "(2316:12) {#if planet.icons.warfare > 0}",
		ctx
	});

	return block;
}

// (2319:12) {#if planet.icons.colonize > 0}
function create_if_block_31(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/colonizeicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "colonize");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2319, 13, 89570);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2319, 65, 89622);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_31.name,
		type: "if",
		source: "(2319:12) {#if planet.icons.colonize > 0}",
		ctx
	});

	return block;
}

// (2322:12) {#if planet.icons.research > 0}
function create_if_block_30(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/researchicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "research");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2322, 13, 89702);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2322, 65, 89754);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_30.name,
		type: "if",
		source: "(2322:12) {#if planet.icons.research > 0}",
		ctx
	});

	return block;
}

// (2325:12) {#if planet.icons.trade > 0}
function create_if_block_29(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/tradeicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "trade");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2325, 13, 89831);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2325, 59, 89877);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_29.name,
		type: "if",
		source: "(2325:12) {#if planet.icons.trade > 0}",
		ctx
	});

	return block;
}

// (2328:12) {#if planet.icons.produce > 0}
function create_if_block_28(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/produceicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "produce");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2328, 13, 89956);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2328, 63, 90006);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_28.name,
		type: "if",
		source: "(2328:12) {#if planet.icons.produce > 0}",
		ctx
	});

	return block;
}

// (2332:12) {#each planet.production_zones as zone}
function create_each_block_7(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/" + /*zone*/ ctx[179].type + "productionzoneicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = "" + (/*zone*/ ctx[179].type + " zone"));
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2332, 13, 90132);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2332, 90, 90209);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = "/images/" + /*zone*/ ctx[179].type + "productionzoneicon.png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = "" + (/*zone*/ ctx[179].type + " zone"))) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_7.name,
		type: "each",
		source: "(2332:12) {#each planet.production_zones as zone}",
		ctx
	});

	return block;
}

// (2336:12) {#if planet.handsize_modifier > 0}
function create_if_block_27(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/handsizeicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "produce");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2336, 13, 90330);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2336, 64, 90381);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_27.name,
		type: "if",
		source: "(2336:12) {#if planet.handsize_modifier > 0}",
		ctx
	});

	return block;
}

// (2304:8) {#each [...player.settled_planets, ...player.conquered_planets] as planet}
function create_each_block_6(ctx) {
	let div4;
	let div3;
	let img0;
	let img0_src_value;
	let img0_alt_value;
	let t0;
	let div2;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let div0;
	let t9_value = /*planet*/ ctx[190].influence_value + "";
	let t9;
	let t10;
	let img1;
	let img1_src_value;
	let t11;
	let div1;
	let t12_value = /*planet*/ ctx[190].name + "";
	let t12;
	let t13;
	let div4_class_value;
	let dispose;
	let if_block0 = /*planet*/ ctx[190].icons.survey > 0 && create_if_block_33(ctx);
	let if_block1 = /*planet*/ ctx[190].icons.warfare > 0 && create_if_block_32(ctx);
	let if_block2 = /*planet*/ ctx[190].icons.colonize > 0 && create_if_block_31(ctx);
	let if_block3 = /*planet*/ ctx[190].icons.research > 0 && create_if_block_30(ctx);
	let if_block4 = /*planet*/ ctx[190].icons.trade > 0 && create_if_block_29(ctx);
	let if_block5 = /*planet*/ ctx[190].icons.produce > 0 && create_if_block_28(ctx);
	let each_value_7 = /*planet*/ ctx[190].production_zones;
	validate_each_argument(each_value_7);
	let each_blocks = [];

	for (let i = 0; i < each_value_7.length; i += 1) {
		each_blocks[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
	}

	let if_block6 = /*planet*/ ctx[190].handsize_modifier > 0 && create_if_block_27(ctx);

	function click_handler_13(...args) {
		return /*click_handler_13*/ ctx[146](/*planet*/ ctx[190], ...args);
	}

	function tap_handler_13(...args) {
		return /*tap_handler_13*/ ctx[147](/*planet*/ ctx[190], ...args);
	}

	const block = {
		c: function create() {
			div4 = element("div");
			div3 = element("div");
			img0 = element("img");
			t0 = space();
			div2 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			if (if_block6) if_block6.c();
			t8 = space();
			div0 = element("div");
			t9 = text(t9_value);
			t10 = space();
			img1 = element("img");
			t11 = space();
			div1 = element("div");
			t12 = text(t12_value);
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true, style: true });
			var div3_nodes = children(div3);
			img0 = claim_element(div3_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (if_block0) if_block0.l(div2_nodes);
			t1 = claim_space(div2_nodes);
			if (if_block1) if_block1.l(div2_nodes);
			t2 = claim_space(div2_nodes);
			if (if_block2) if_block2.l(div2_nodes);
			t3 = claim_space(div2_nodes);
			if (if_block3) if_block3.l(div2_nodes);
			t4 = claim_space(div2_nodes);
			if (if_block4) if_block4.l(div2_nodes);
			t5 = claim_space(div2_nodes);
			if (if_block5) if_block5.l(div2_nodes);
			t6 = claim_space(div2_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			t7 = claim_space(div2_nodes);
			if (if_block6) if_block6.l(div2_nodes);
			t8 = claim_space(div2_nodes);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t9 = claim_text(div0_nodes, t9_value);
			div0_nodes.forEach(detach_dev);
			t10 = claim_space(div2_nodes);
			img1 = claim_element(div2_nodes, "IMG", { src: true, alt: true, class: true });
			t11 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t12 = claim_text(div1_nodes, t12_value);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t13 = claim_space(div4_nodes);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img0.src !== (img0_src_value = "/images/" + /*planet*/ ctx[190].type + "100.png")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", img0_alt_value = "" + (/*planet*/ ctx[190].settle_cost + " " + /*planet*/ ctx[190].type + " " + /*planet*/ ctx[190].conquer_cost));
			attr_dev(img0, "class", "svelte-1nwzw2v");
			add_location(img0, file, 2308, 11, 89007);
			attr_dev(div0, "class", "svelte-1nwzw2v");
			add_location(div0, file, 2339, 12, 90453);
			if (img1.src !== (img1_src_value = "/images/influenceicon.png")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "influence");
			attr_dev(img1, "class", "svelte-1nwzw2v");
			add_location(img1, file, 2342, 12, 90528);
			attr_dev(div1, "class", "svelte-1nwzw2v");
			add_location(div1, file, 2344, 12, 90622);
			attr_dev(div2, "class", "planetfrontinfo svelte-1nwzw2v");
			add_location(div2, file, 2311, 11, 89228);
			attr_dev(div3, "class", "planetfront svelte-1nwzw2v");
			set_style(div3, "font-size", "160%");
			add_location(div3, file, 2307, 10, 88944);

			attr_dev(div4, "class", div4_class_value = "" + (null_to_empty(/*game*/ ctx[0].displayinfo.selectionzone == "settled_&_conquered_planets"
			? /*planet*/ ctx[190].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v"));

			add_location(div4, file, 2306, 9, 88654);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, img0);
			append_dev(div3, t0);
			append_dev(div3, div2);
			if (if_block0) if_block0.m(div2, null);
			append_dev(div2, t1);
			if (if_block1) if_block1.m(div2, null);
			append_dev(div2, t2);
			if (if_block2) if_block2.m(div2, null);
			append_dev(div2, t3);
			if (if_block3) if_block3.m(div2, null);
			append_dev(div2, t4);
			if (if_block4) if_block4.m(div2, null);
			append_dev(div2, t5);
			if (if_block5) if_block5.m(div2, null);
			append_dev(div2, t6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append_dev(div2, t7);
			if (if_block6) if_block6.m(div2, null);
			append_dev(div2, t8);
			append_dev(div2, div0);
			append_dev(div0, t9);
			append_dev(div2, t10);
			append_dev(div2, img1);
			append_dev(div2, t11);
			append_dev(div2, div1);
			append_dev(div1, t12);
			append_dev(div4, t13);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div4, "click", click_handler_13, false, false, false),
				listen_dev(div4, "tap", tap_handler_13, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img0.src !== (img0_src_value = "/images/" + /*planet*/ ctx[190].type + "100.png")) {
				attr_dev(img0, "src", img0_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img0_alt_value !== (img0_alt_value = "" + (/*planet*/ ctx[190].settle_cost + " " + /*planet*/ ctx[190].type + " " + /*planet*/ ctx[190].conquer_cost))) {
				attr_dev(img0, "alt", img0_alt_value);
			}

			if (/*planet*/ ctx[190].icons.survey > 0) {
				if (!if_block0) {
					if_block0 = create_if_block_33(ctx);
					if_block0.c();
					if_block0.m(div2, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*planet*/ ctx[190].icons.warfare > 0) {
				if (!if_block1) {
					if_block1 = create_if_block_32(ctx);
					if_block1.c();
					if_block1.m(div2, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*planet*/ ctx[190].icons.colonize > 0) {
				if (!if_block2) {
					if_block2 = create_if_block_31(ctx);
					if_block2.c();
					if_block2.m(div2, t3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*planet*/ ctx[190].icons.research > 0) {
				if (!if_block3) {
					if_block3 = create_if_block_30(ctx);
					if_block3.c();
					if_block3.m(div2, t4);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*planet*/ ctx[190].icons.trade > 0) {
				if (!if_block4) {
					if_block4 = create_if_block_29(ctx);
					if_block4.c();
					if_block4.m(div2, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*planet*/ ctx[190].icons.produce > 0) {
				if (!if_block5) {
					if_block5 = create_if_block_28(ctx);
					if_block5.c();
					if_block5.m(div2, t6);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (dirty[0] & /*game*/ 1) {
				each_value_7 = /*planet*/ ctx[190].production_zones;
				validate_each_argument(each_value_7);
				let i;

				for (i = 0; i < each_value_7.length; i += 1) {
					const child_ctx = get_each_context_7(ctx, each_value_7, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_7(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, t7);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_7.length;
			}

			if (/*planet*/ ctx[190].handsize_modifier > 0) {
				if (!if_block6) {
					if_block6 = create_if_block_27(ctx);
					if_block6.c();
					if_block6.m(div2, t8);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (dirty[0] & /*game*/ 1 && t9_value !== (t9_value = /*planet*/ ctx[190].influence_value + "")) set_data_dev(t9, t9_value);
			if (dirty[0] & /*game*/ 1 && t12_value !== (t12_value = /*planet*/ ctx[190].name + "")) set_data_dev(t12, t12_value);

			if (dirty[0] & /*game*/ 1 && div4_class_value !== (div4_class_value = "" + (null_to_empty(/*game*/ ctx[0].displayinfo.selectionzone == "settled_&_conquered_planets"
			? /*planet*/ ctx[190].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v"))) {
				attr_dev(div4, "class", div4_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			destroy_each(each_blocks, detaching);
			if (if_block6) if_block6.d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_6.name,
		type: "each",
		source: "(2304:8) {#each [...player.settled_planets, ...player.conquered_planets] as planet}",
		ctx
	});

	return block;
}

// (2358:7) {:else}
function create_else_block_5(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[____]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[____]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-right", "auto");
			attr_dev(div, "class", "bordered pass svelte-1nwzw2v");
			add_location(div, file, 2358, 8, 91087);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_5.name,
		type: "else",
		source: "(2358:7) {:else}",
		ctx
	});

	return block;
}

// (2356:7) {#if game.displayinfo.showoptiontoskip}
function create_if_block_25(ctx) {
	let div;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[Choose None]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[Choose None]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-right", "auto");
			attr_dev(div, "class", "selectable pass svelte-1nwzw2v");
			add_location(div, file, 2356, 8, 90909);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_14*/ ctx[148], false, false, false),
				listen_dev(div, "tap", /*tap_handler_14*/ ctx[149], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_25.name,
		type: "if",
		source: "(2356:7) {#if game.displayinfo.showoptiontoskip}",
		ctx
	});

	return block;
}

// (2366:96) 
function create_if_block_24(ctx) {
	let div;
	let img;
	let img_src_value;
	let img_alt_value;
	let dispose;

	function click_handler_16(...args) {
		return /*click_handler_16*/ ctx[152](/*card*/ ctx[185], ...args);
	}

	function tap_handler_16(...args) {
		return /*tap_handler_16*/ ctx[153](/*card*/ ctx[185], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { class: true, src: true, alt: true });
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "minicard svelte-1nwzw2v");
			if (img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);
			add_location(img, file, 2367, 11, 91623);
			attr_dev(div, "class", "bordered minicard svelte-1nwzw2v");
			add_location(div, file, 2366, 10, 91580);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(img, "click", click_handler_16, false, false, false),
				listen_dev(img, "tap", tap_handler_16, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_24.name,
		type: "if",
		source: "(2366:96) ",
		ctx
	});

	return block;
}

// (2362:9) {#if card.research_cost !== undefined}
function create_if_block_23(ctx) {
	let div;
	let img;
	let img_src_value;
	let img_alt_value;
	let dispose;

	function click_handler_15(...args) {
		return /*click_handler_15*/ ctx[150](/*card*/ ctx[185], ...args);
	}

	function tap_handler_15(...args) {
		return /*tap_handler_15*/ ctx[151](/*card*/ ctx[185], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { class: true, src: true, alt: true });
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "minicard svelte-1nwzw2v");
			if (img.src !== (img_src_value = /*card*/ ctx[185].imgurl)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);
			add_location(img, file, 2363, 10, 91333);
			attr_dev(div, "class", "bordered minicard svelte-1nwzw2v");
			add_location(div, file, 2362, 9, 91291);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(img, "click", click_handler_15, false, false, false),
				listen_dev(img, "tap", tap_handler_15, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = /*card*/ ctx[185].imgurl)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_23.name,
		type: "if",
		source: "(2362:9) {#if card.research_cost !== undefined}",
		ctx
	});

	return block;
}

// (2361:7) {#each game.players[game.acting_player_index].limbo as card}
function create_each_block_5(ctx) {
	let if_block_anchor;

	function select_block_type_4(ctx, dirty) {
		if (/*card*/ ctx[185].research_cost !== undefined) return create_if_block_23;
		if (/*card*/ ctx[185].type != "advanced" && /*card*/ ctx[185].type != "fertile" && /*card*/ ctx[185].type != "metallic") return create_if_block_24;
	}

	let current_block_type = select_block_type_4(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_4(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (if_block) {
				if_block.d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_5.name,
		type: "each",
		source: "(2361:7) {#each game.players[game.acting_player_index].limbo as card}",
		ctx
	});

	return block;
}

// (2379:7) {:else}
function create_else_block_4(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[______]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[______]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "bordered pass svelte-1nwzw2v");
			add_location(div, file, 2379, 8, 92488);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_4.name,
		type: "else",
		source: "(2379:7) {:else}",
		ctx
	});

	return block;
}

// (2377:86) 
function create_if_block_22(ctx) {
	let div;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[Choose Selected]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[Choose Selected]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-left", "auto");
			attr_dev(div, "class", "selectable pass svelte-1nwzw2v");
			add_location(div, file, 2377, 8, 92269);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_19*/ ctx[158], false, false, false),
				listen_dev(div, "tap", /*tap_handler_19*/ ctx[159], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_22.name,
		type: "if",
		source: "(2377:86) ",
		ctx
	});

	return block;
}

// (2375:28) 
function create_if_block_21(ctx) {
	let div;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text("[End Turn]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "[End Turn]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "margin-left", "auto");
			attr_dev(div, "class", "selectable pass svelte-1nwzw2v");
			add_location(div, file, 2375, 8, 92047);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_18*/ ctx[156], false, false, false),
				listen_dev(div, "tap", /*tap_handler_18*/ ctx[157], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_21.name,
		type: "if",
		source: "(2375:28) ",
		ctx
	});

	return block;
}

// (2373:7) {#if game.passp }
function create_if_block_20(ctx) {
	let div;
	let t0;
	let br;
	let t1;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("[Pass to ");
			br = element("br");
			t1 = text(" Next Player]");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "[Pass to ");
			br = claim_element(div_nodes, "BR", { class: true });
			t1 = claim_text(div_nodes, " Next Player]");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2373, 134, 91986);
			set_style(div, "margin-left", "auto");
			attr_dev(div, "class", "selectable pass svelte-1nwzw2v");
			add_location(div, file, 2373, 8, 91860);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, br);
			append_dev(div, t1);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", /*click_handler_17*/ ctx[154], false, false, false),
				listen_dev(div, "tap", /*tap_handler_17*/ ctx[155], false, false, false)
			];
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_20.name,
		type: "if",
		source: "(2373:7) {#if game.passp }",
		ctx
	});

	return block;
}

// (2398:10) {:else}
function create_else_block_3(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let img_class_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);

			attr_dev(img, "class", img_class_value = "cutcard " + (/*game*/ ctx[0].displayinfo.selectionzone == "hand"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v");

			add_location(img, file, 2398, 11, 94133);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*game*/ 1 && img_class_value !== (img_class_value = "cutcard " + (/*game*/ ctx[0].displayinfo.selectionzone == "hand"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v")) {
				attr_dev(img, "class", img_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(2398:10) {:else}",
		ctx
	});

	return block;
}

// (2396:10) {#if card.research_cost !== undefined}
function create_if_block_19(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let img_class_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*card*/ ctx[185].imgurl)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);

			attr_dev(img, "class", img_class_value = "cutcard " + (/*game*/ ctx[0].displayinfo.selectionzone == "hand"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v");

			add_location(img, file, 2396, 11, 93939);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = /*card*/ ctx[185].imgurl)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*game*/ 1 && img_class_value !== (img_class_value = "cutcard " + (/*game*/ ctx[0].displayinfo.selectionzone == "hand"
			? /*card*/ ctx[185].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v")) {
				attr_dev(img, "class", img_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_19.name,
		type: "if",
		source: "(2396:10) {#if card.research_cost !== undefined}",
		ctx
	});

	return block;
}

// (2389:9) {#if game.displayinfo.selectionzone=='hand'}
function create_if_block_17(ctx) {
	let if_block_anchor;

	function select_block_type_7(ctx, dirty) {
		if (/*card*/ ctx[185].research_cost !== undefined) return create_if_block_18;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_7(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_7(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_17.name,
		type: "if",
		source: "(2389:9) {#if game.displayinfo.selectionzone=='hand'}",
		ctx
	});

	return block;
}

// (2392:10) {:else}
function create_else_block_2(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let img_class_value;
	let dispose;

	function click_handler_21(...args) {
		return /*click_handler_21*/ ctx[166](/*card*/ ctx[185], ...args);
	}

	function touchmove_handler_2(...args) {
		return /*touchmove_handler_2*/ ctx[167](/*card*/ ctx[185], ...args);
	}

	function tap_handler_21(...args) {
		return /*tap_handler_21*/ ctx[168](/*card*/ ctx[185], ...args);
	}

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);

			attr_dev(img, "class", img_class_value = "cutcard " + (/*game*/ ctx[0].displayinfo.selectionzone == "hand"
			? /*card*/ ctx[185].selected ? "hidden" : "selectable"
			: "bordered") + " svelte-1nwzw2v");

			add_location(img, file, 2392, 11, 93418);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, img, anchor);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(
					img,
					"touchstart",
					function () {
						if (is_function(/*drag*/ ctx[14](touchstart_handler_2, /*card*/ ctx[185], "hand"))) /*drag*/ ctx[14](touchstart_handler_2, /*card*/ ctx[185], "hand").apply(this, arguments);
					},
					false,
					false,
					false
				),
				listen_dev(img, "touchend", /*touchend_handler_2*/ ctx[165], false, false, false),
				listen_dev(img, "click", click_handler_21, false, false, false),
				listen_dev(img, "touchmove", touchmove_handler_2, false, false, false),
				listen_dev(img, "tap", tap_handler_21, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = "/images/" + /*card*/ ctx[185].type + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*game*/ 1 && img_class_value !== (img_class_value = "cutcard " + (/*game*/ ctx[0].displayinfo.selectionzone == "hand"
			? /*card*/ ctx[185].selected ? "hidden" : "selectable"
			: "bordered") + " svelte-1nwzw2v")) {
				attr_dev(img, "class", img_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(2392:10) {:else}",
		ctx
	});

	return block;
}

// (2390:10) {#if card.research_cost !== undefined}
function create_if_block_18(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let img_class_value;
	let dispose;

	function touchstart_handler_1(...args) {
		return /*touchstart_handler_1*/ ctx[160](/*card*/ ctx[185], ...args);
	}

	function touchmove_handler_1(...args) {
		return /*touchmove_handler_1*/ ctx[162](/*card*/ ctx[185], ...args);
	}

	function click_handler_20(...args) {
		return /*click_handler_20*/ ctx[163](/*card*/ ctx[185], ...args);
	}

	function tap_handler_20(...args) {
		return /*tap_handler_20*/ ctx[164](/*card*/ ctx[185], ...args);
	}

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*card*/ ctx[185].imgurl)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*card*/ ctx[185].name);

			attr_dev(img, "class", img_class_value = "cutcard " + (/*game*/ ctx[0].displayinfo.selectionzone == "hand"
			? /*card*/ ctx[185].selected ? "hidden" : "selectable"
			: "bordered") + " svelte-1nwzw2v");

			add_location(img, file, 2390, 11, 92985);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, img, anchor);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(img, "touchstart", touchstart_handler_1, false, false, false),
				listen_dev(img, "touchend", /*touchend_handler_1*/ ctx[161], false, false, false),
				listen_dev(img, "touchmove", touchmove_handler_1, false, false, false),
				listen_dev(img, "click", click_handler_20, false, false, false),
				listen_dev(img, "tap", tap_handler_20, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = /*card*/ ctx[185].imgurl)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = /*card*/ ctx[185].name)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*game*/ 1 && img_class_value !== (img_class_value = "cutcard " + (/*game*/ ctx[0].displayinfo.selectionzone == "hand"
			? /*card*/ ctx[185].selected ? "hidden" : "selectable"
			: "bordered") + " svelte-1nwzw2v")) {
				attr_dev(img, "class", img_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_18.name,
		type: "if",
		source: "(2390:10) {#if card.research_cost !== undefined}",
		ctx
	});

	return block;
}

// (2388:8) {#each player.hand as card}
function create_each_block_4(ctx) {
	let if_block_anchor;

	function select_block_type_6(ctx, dirty) {
		if (/*game*/ ctx[0].displayinfo.selectionzone == "hand") return create_if_block_17;
		if (/*card*/ ctx[185].research_cost !== undefined) return create_if_block_19;
		return create_else_block_3;
	}

	let current_block_type = select_block_type_6(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_6(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(2388:8) {#each player.hand as card}",
		ctx
	});

	return block;
}

// (2247:3) {#each game.players as player}
function create_each_block_3(ctx) {
	let if_block_anchor;
	let if_block = /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index] !== undefined && (/*lobby*/ ctx[1].screenname == /*player*/ ctx[182].name && /*lobby*/ ctx[1].online || /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].id == /*player*/ ctx[182].id && !/*lobby*/ ctx[1].online) && create_if_block_16(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index] !== undefined && (/*lobby*/ ctx[1].screenname == /*player*/ ctx[182].name && /*lobby*/ ctx[1].online || /*game*/ ctx[0].players[/*game*/ ctx[0].acting_player_index].id == /*player*/ ctx[182].id && !/*lobby*/ ctx[1].online)) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_16(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(2247:3) {#each game.players as player}",
		ctx
	});

	return block;
}

// (2410:3) {#if game.displayinfo.selectionzone=='options'}
function create_if_block_7(ctx) {
	let div;
	let div_class_value;
	let each_value_1 = /*game*/ ctx[0].options;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*game*/ ctx[0].options[0] !== undefined && /*game*/ ctx[0].options[0].type !== undefined
			? "talloptions"
			: "options") + " svelte-1nwzw2v"));

			add_location(div, file, 2410, 4, 94587);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game, choosewrapper*/ 9) {
				each_value_1 = /*game*/ ctx[0].options;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty[0] & /*game*/ 1 && div_class_value !== (div_class_value = "" + (null_to_empty(/*game*/ ctx[0].options[0] !== undefined && /*game*/ ctx[0].options[0].type !== undefined
			? "talloptions"
			: "options") + " svelte-1nwzw2v"))) {
				attr_dev(div, "class", div_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(2410:3) {#if game.displayinfo.selectionzone=='options'}",
		ctx
	});

	return block;
}

// (2470:6) {:else}
function create_else_block_1(ctx) {
	let div;
	let t0_value = /*option*/ ctx[176].name + "";
	let t0;
	let t1;
	let div_class_value;
	let dispose;

	function click_handler_23(...args) {
		return /*click_handler_23*/ ctx[171](/*option*/ ctx[176], ...args);
	}

	function tap_handler_23(...args) {
		return /*tap_handler_23*/ ctx[172](/*option*/ ctx[176], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "pass " + (/*game*/ ctx[0].displayinfo.selectionzone == "options"
			? /*option*/ ctx[176].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v");

			add_location(div, file, 2470, 7, 97138);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div, "click", click_handler_23, false, false, false),
				listen_dev(div, "tap", tap_handler_23, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*game*/ 1 && t0_value !== (t0_value = /*option*/ ctx[176].name + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*game*/ 1 && div_class_value !== (div_class_value = "pass " + (/*game*/ ctx[0].displayinfo.selectionzone == "options"
			? /*option*/ ctx[176].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v")) {
				attr_dev(div, "class", div_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(2470:6) {:else}",
		ctx
	});

	return block;
}

// (2413:6) {#if option.type !== undefined}
function create_if_block_8(ctx) {
	let div7;
	let div3;
	let img0;
	let img0_src_value;
	let img0_alt_value;
	let t0;
	let div2;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let div0;
	let t9_value = /*option*/ ctx[176].influence_value + "";
	let t9;
	let t10;
	let img1;
	let img1_src_value;
	let t11;
	let div1;
	let t12_value = /*option*/ ctx[176].name + "";
	let t12;
	let t13;
	let div6;
	let div5;
	let img2;
	let img2_src_value;
	let img2_alt_value;
	let t14;
	let div4;
	let span0;
	let t15_value = /*option*/ ctx[176].settle_cost + "";
	let t15;
	let t16;
	let span1;
	let t17_value = /*option*/ ctx[176].conquer_cost + "";
	let t17;
	let t18;
	let div7_class_value;
	let dispose;
	let if_block0 = /*option*/ ctx[176].icons.survey > 0 && create_if_block_15(ctx);
	let if_block1 = /*option*/ ctx[176].icons.warfare > 0 && create_if_block_14(ctx);
	let if_block2 = /*option*/ ctx[176].icons.colonize > 0 && create_if_block_13(ctx);
	let if_block3 = /*option*/ ctx[176].icons.research > 0 && create_if_block_12(ctx);
	let if_block4 = /*option*/ ctx[176].icons.trade > 0 && create_if_block_11(ctx);
	let if_block5 = /*option*/ ctx[176].icons.produce > 0 && create_if_block_10(ctx);
	let each_value_2 = /*option*/ ctx[176].production_zones;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let if_block6 = /*option*/ ctx[176].handsize_modifier > 0 && create_if_block_9(ctx);

	function click_handler_22(...args) {
		return /*click_handler_22*/ ctx[169](/*option*/ ctx[176], ...args);
	}

	function tap_handler_22(...args) {
		return /*tap_handler_22*/ ctx[170](/*option*/ ctx[176], ...args);
	}

	const block = {
		c: function create() {
			div7 = element("div");
			div3 = element("div");
			img0 = element("img");
			t0 = space();
			div2 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			if (if_block6) if_block6.c();
			t8 = space();
			div0 = element("div");
			t9 = text(t9_value);
			t10 = space();
			img1 = element("img");
			t11 = space();
			div1 = element("div");
			t12 = text(t12_value);
			t13 = space();
			div6 = element("div");
			div5 = element("div");
			img2 = element("img");
			t14 = space();
			div4 = element("div");
			span0 = element("span");
			t15 = text(t15_value);
			t16 = space();
			span1 = element("span");
			t17 = text(t17_value);
			t18 = space();
			this.h();
		},
		l: function claim(nodes) {
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div3 = claim_element(div7_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			img0 = claim_element(div3_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (if_block0) if_block0.l(div2_nodes);
			t1 = claim_space(div2_nodes);
			if (if_block1) if_block1.l(div2_nodes);
			t2 = claim_space(div2_nodes);
			if (if_block2) if_block2.l(div2_nodes);
			t3 = claim_space(div2_nodes);
			if (if_block3) if_block3.l(div2_nodes);
			t4 = claim_space(div2_nodes);
			if (if_block4) if_block4.l(div2_nodes);
			t5 = claim_space(div2_nodes);
			if (if_block5) if_block5.l(div2_nodes);
			t6 = claim_space(div2_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			t7 = claim_space(div2_nodes);
			if (if_block6) if_block6.l(div2_nodes);
			t8 = claim_space(div2_nodes);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t9 = claim_text(div0_nodes, t9_value);
			div0_nodes.forEach(detach_dev);
			t10 = claim_space(div2_nodes);
			img1 = claim_element(div2_nodes, "IMG", { src: true, alt: true, class: true });
			t11 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t12 = claim_text(div1_nodes, t12_value);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t13 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			img2 = claim_element(div5_nodes, "IMG", { src: true, alt: true, class: true });
			t14 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			span0 = claim_element(div4_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t15 = claim_text(span0_nodes, t15_value);
			span0_nodes.forEach(detach_dev);
			t16 = claim_space(div4_nodes);
			span1 = claim_element(div4_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t17 = claim_text(span1_nodes, t17_value);
			span1_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t18 = claim_space(div7_nodes);
			div7_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img0.src !== (img0_src_value = "/images/" + /*option*/ ctx[176].type + "100.png")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", img0_alt_value = "" + (/*option*/ ctx[176].settle_cost + " " + /*option*/ ctx[176].type + " " + /*option*/ ctx[176].conquer_cost));
			attr_dev(img0, "class", "svelte-1nwzw2v");
			add_location(img0, file, 2416, 8, 95068);
			attr_dev(div0, "class", "svelte-1nwzw2v");
			add_location(div0, file, 2447, 9, 96421);
			if (img1.src !== (img1_src_value = "/images/influenceicon.png")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "influence");
			attr_dev(img1, "class", "svelte-1nwzw2v");
			add_location(img1, file, 2450, 9, 96487);
			attr_dev(div1, "class", "svelte-1nwzw2v");
			add_location(div1, file, 2452, 9, 96575);
			attr_dev(div2, "class", "planetfrontinfo svelte-1nwzw2v");
			add_location(div2, file, 2419, 8, 95280);
			attr_dev(div3, "class", "planetfront svelte-1nwzw2v");
			add_location(div3, file, 2415, 7, 95032);
			if (img2.src !== (img2_src_value = "/images/" + /*option*/ ctx[176].type + "back100.png")) attr_dev(img2, "src", img2_src_value);
			attr_dev(img2, "alt", img2_alt_value = "" + (/*option*/ ctx[176].settle_cost + " " + /*option*/ ctx[176].type + " " + /*option*/ ctx[176].conquer_cost));
			attr_dev(img2, "class", "svelte-1nwzw2v");
			add_location(img2, file, 2461, 9, 96770);
			attr_dev(span0, "class", "mini_settle_cost svelte-1nwzw2v");
			add_location(span0, file, 2463, 10, 96927);
			attr_dev(span1, "class", "mini_conquer_cost svelte-1nwzw2v");
			add_location(span1, file, 2464, 10, 96997);
			attr_dev(div4, "class", "unsettled_costs svelte-1nwzw2v");
			add_location(div4, file, 2462, 9, 96887);
			attr_dev(div5, "class", "mini_unsettled svelte-1nwzw2v");
			add_location(div5, file, 2460, 8, 96732);
			attr_dev(div6, "class", "svelte-1nwzw2v");
			add_location(div6, file, 2457, 7, 96657);

			attr_dev(div7, "class", div7_class_value = "bordered flex " + (/*game*/ ctx[0].displayinfo.selectionzone == "options"
			? /*option*/ ctx[176].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v");

			add_location(div7, file, 2414, 6, 94790);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, div7, anchor);
			append_dev(div7, div3);
			append_dev(div3, img0);
			append_dev(div3, t0);
			append_dev(div3, div2);
			if (if_block0) if_block0.m(div2, null);
			append_dev(div2, t1);
			if (if_block1) if_block1.m(div2, null);
			append_dev(div2, t2);
			if (if_block2) if_block2.m(div2, null);
			append_dev(div2, t3);
			if (if_block3) if_block3.m(div2, null);
			append_dev(div2, t4);
			if (if_block4) if_block4.m(div2, null);
			append_dev(div2, t5);
			if (if_block5) if_block5.m(div2, null);
			append_dev(div2, t6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append_dev(div2, t7);
			if (if_block6) if_block6.m(div2, null);
			append_dev(div2, t8);
			append_dev(div2, div0);
			append_dev(div0, t9);
			append_dev(div2, t10);
			append_dev(div2, img1);
			append_dev(div2, t11);
			append_dev(div2, div1);
			append_dev(div1, t12);
			append_dev(div7, t13);
			append_dev(div7, div6);
			append_dev(div6, div5);
			append_dev(div5, img2);
			append_dev(div5, t14);
			append_dev(div5, div4);
			append_dev(div4, span0);
			append_dev(span0, t15);
			append_dev(div4, t16);
			append_dev(div4, span1);
			append_dev(span1, t17);
			append_dev(div7, t18);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(div7, "click", click_handler_22, false, false, false),
				listen_dev(div7, "tap", tap_handler_22, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*game*/ 1 && img0.src !== (img0_src_value = "/images/" + /*option*/ ctx[176].type + "100.png")) {
				attr_dev(img0, "src", img0_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img0_alt_value !== (img0_alt_value = "" + (/*option*/ ctx[176].settle_cost + " " + /*option*/ ctx[176].type + " " + /*option*/ ctx[176].conquer_cost))) {
				attr_dev(img0, "alt", img0_alt_value);
			}

			if (/*option*/ ctx[176].icons.survey > 0) {
				if (!if_block0) {
					if_block0 = create_if_block_15(ctx);
					if_block0.c();
					if_block0.m(div2, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*option*/ ctx[176].icons.warfare > 0) {
				if (!if_block1) {
					if_block1 = create_if_block_14(ctx);
					if_block1.c();
					if_block1.m(div2, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*option*/ ctx[176].icons.colonize > 0) {
				if (!if_block2) {
					if_block2 = create_if_block_13(ctx);
					if_block2.c();
					if_block2.m(div2, t3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*option*/ ctx[176].icons.research > 0) {
				if (!if_block3) {
					if_block3 = create_if_block_12(ctx);
					if_block3.c();
					if_block3.m(div2, t4);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*option*/ ctx[176].icons.trade > 0) {
				if (!if_block4) {
					if_block4 = create_if_block_11(ctx);
					if_block4.c();
					if_block4.m(div2, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*option*/ ctx[176].icons.produce > 0) {
				if (!if_block5) {
					if_block5 = create_if_block_10(ctx);
					if_block5.c();
					if_block5.m(div2, t6);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (dirty[0] & /*game*/ 1) {
				each_value_2 = /*option*/ ctx[176].production_zones;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, t7);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}

			if (/*option*/ ctx[176].handsize_modifier > 0) {
				if (!if_block6) {
					if_block6 = create_if_block_9(ctx);
					if_block6.c();
					if_block6.m(div2, t8);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (dirty[0] & /*game*/ 1 && t9_value !== (t9_value = /*option*/ ctx[176].influence_value + "")) set_data_dev(t9, t9_value);
			if (dirty[0] & /*game*/ 1 && t12_value !== (t12_value = /*option*/ ctx[176].name + "")) set_data_dev(t12, t12_value);

			if (dirty[0] & /*game*/ 1 && img2.src !== (img2_src_value = "/images/" + /*option*/ ctx[176].type + "back100.png")) {
				attr_dev(img2, "src", img2_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img2_alt_value !== (img2_alt_value = "" + (/*option*/ ctx[176].settle_cost + " " + /*option*/ ctx[176].type + " " + /*option*/ ctx[176].conquer_cost))) {
				attr_dev(img2, "alt", img2_alt_value);
			}

			if (dirty[0] & /*game*/ 1 && t15_value !== (t15_value = /*option*/ ctx[176].settle_cost + "")) set_data_dev(t15, t15_value);
			if (dirty[0] & /*game*/ 1 && t17_value !== (t17_value = /*option*/ ctx[176].conquer_cost + "")) set_data_dev(t17, t17_value);

			if (dirty[0] & /*game*/ 1 && div7_class_value !== (div7_class_value = "bordered flex " + (/*game*/ ctx[0].displayinfo.selectionzone == "options"
			? /*option*/ ctx[176].selected ? "selected" : "selectable"
			: "bordered") + " svelte-1nwzw2v")) {
				attr_dev(div7, "class", div7_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div7);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			destroy_each(each_blocks, detaching);
			if (if_block6) if_block6.d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(2413:6) {#if option.type !== undefined}",
		ctx
	});

	return block;
}

// (2421:9) {#if option.icons.survey > 0}
function create_if_block_15(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/surveyicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "survey");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2421, 10, 95359);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2421, 58, 95407);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_15.name,
		type: "if",
		source: "(2421:9) {#if option.icons.survey > 0}",
		ctx
	});

	return block;
}

// (2424:9) {#if option.icons.warfare > 0}
function create_if_block_14(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/warfareicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "warfare");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2424, 10, 95477);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2424, 60, 95527);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_14.name,
		type: "if",
		source: "(2424:9) {#if option.icons.warfare > 0}",
		ctx
	});

	return block;
}

// (2427:9) {#if option.icons.colonize > 0}
function create_if_block_13(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/colonizeicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "colonize");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2427, 10, 95598);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2427, 62, 95650);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_13.name,
		type: "if",
		source: "(2427:9) {#if option.icons.colonize > 0}",
		ctx
	});

	return block;
}

// (2430:9) {#if option.icons.research > 0}
function create_if_block_12(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/researchicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "research");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2430, 10, 95721);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2430, 62, 95773);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_12.name,
		type: "if",
		source: "(2430:9) {#if option.icons.research > 0}",
		ctx
	});

	return block;
}

// (2433:9) {#if option.icons.trade > 0}
function create_if_block_11(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/tradeicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "trade");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2433, 10, 95841);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2433, 56, 95887);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_11.name,
		type: "if",
		source: "(2433:9) {#if option.icons.trade > 0}",
		ctx
	});

	return block;
}

// (2436:9) {#if option.icons.produce > 0}
function create_if_block_10(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/produceicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "produce");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2436, 10, 95957);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2436, 60, 96007);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(2436:9) {#if option.icons.produce > 0}",
		ctx
	});

	return block;
}

// (2440:9) {#each option.production_zones as zone}
function create_each_block_2(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/" + /*zone*/ ctx[179].type + "productionzoneicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = "" + (/*zone*/ ctx[179].type + " zone"));
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2440, 10, 96121);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2440, 87, 96198);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*game*/ 1 && img.src !== (img_src_value = "/images/" + /*zone*/ ctx[179].type + "productionzoneicon.png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*game*/ 1 && img_alt_value !== (img_alt_value = "" + (/*zone*/ ctx[179].type + " zone"))) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(2440:9) {#each option.production_zones as zone}",
		ctx
	});

	return block;
}

// (2444:9) {#if option.handsize_modifier > 0}
function create_if_block_9(ctx) {
	let img;
	let img_src_value;
	let br;

	const block = {
		c: function create() {
			img = element("img");
			br = element("br");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			br = claim_element(nodes, "BR", { class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/images/handsizeicon.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "produce");
			attr_dev(img, "class", "svelte-1nwzw2v");
			add_location(img, file, 2444, 10, 96307);
			attr_dev(br, "class", "svelte-1nwzw2v");
			add_location(br, file, 2444, 61, 96358);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			insert_dev(target, br, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(2444:9) {#if option.handsize_modifier > 0}",
		ctx
	});

	return block;
}

// (2412:5) {#each game.options as option}
function create_each_block_1(ctx) {
	let if_block_anchor;

	function select_block_type_8(ctx, dirty) {
		if (/*option*/ ctx[176].type !== undefined) return create_if_block_8;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_8(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_8(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(2412:5) {#each game.options as option}",
		ctx
	});

	return block;
}

// (2233:3) {#each lobby.existinggames as g}
function create_each_block(ctx) {
	let p;
	let t_value = /*g*/ ctx[173].game_id + "";
	let t;
	let dispose;

	function click_handler_7(...args) {
		return /*click_handler_7*/ ctx[131](/*g*/ ctx[173], ...args);
	}

	function tap_handler_7(...args) {
		return /*tap_handler_7*/ ctx[132](/*g*/ ctx[173], ...args);
	}

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-1nwzw2v");
			add_location(p, file, 2233, 4, 84126);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(p, "click", click_handler_7, false, false, false),
				listen_dev(p, "tap", tap_handler_7, false, false, false)
			];
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*lobby*/ 2 && t_value !== (t_value = /*g*/ ctx[173].game_id + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(2233:3) {#each lobby.existinggames as g}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*mounted*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*mounted*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const touchstart_handler_2 = event => event;

function instance($$self, $$props, $$invalidate) {
	let game, lobby, phases, corephases, actioncardphases, mounted = false;

	onMount(() => {
		////////////////////////////////////////////////////////////////////////////////
		corephases = [
			/*colonize:*/
			{
				actn: [
					genActionPhase("Choose between Settling or Colonizing a Planet", ["colonize"], wrappedOffer(["Colonize", "Settle Coloniies"])),
					genActionPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offer(false, false, ["unsettled_planets"], "subchoices", finish), ["Settle Colonies"]),
					genActionPhase("Settling your Planet", ["colonize"], () => settle_colonies(getSubChoice(), getActPlyr()), ["Settle Colonies"]),
					genActionPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offer(false, false, ["unsettled_planets"], "subchoices", finish), ["Colonize"]),
					genActionPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							colonize(getSubChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				lead: [
					genLeadPhase("Choose between Settling or Colonizing a Planet", ["colonize"], wrappedOffer(["Colonize", "Settle Colonies"])),
					genLeadPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offerUnsettled(), ["Settle Colonies"]),
					genLeadPhase(
						"Settling your Planet",
						["colonize"],
						() => {
							settle_colonies(getSubChoice(), getActPlyr());
							finish();
						},
						["Settle Colonies"]
					),
					genLeadPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offerUnsettled(), ["Colonize"]),
					genLeadPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							if (getSubChoice().name == "Skip") finish();
							let planet = getSubChoice();
							if (planet.hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize, 0) >= planet.settle_cost) colonize(planet, getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				fllw: [
					genFollowPhase("Choose between Settling or Colonizing a Planet", ["colonize"], () => {
						if (0 == getActPlyr().permanents.filter(e => "bureaucracy" == e.type).length) {
							$$invalidate(0, game.choices = [{ name: "Colonize" }], game);
							finish(!0);
						} else simpleOffer(["Colonize", "Settle Colonies"]);
					}),
					genFollowPhase("Choose an Unsettled Planet to Settle", ["colonize"], () => offerUnsettled(), ["Settle Colonies"]),
					genFollowPhase(
						"Settling your Planet",
						["colonize"],
						() => {
							settle_colonies(getSubChoice(), getActPlyr());
							finish(!0);
						},
						["Settle Colonies"]
					),
					genFollowPhase("Choose an Unsettled Planet to Colonize", ["colonize"], () => offerUnsettled(), ["Colonize"]),
					genFollowPhase(
						"Colonizing your Planet",
						["colonize"],
						() => {
							let planet = getSubChoices().find(planet => planet.hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize) >= planet.settle_cost);
							colonize(planet, getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "colonize")[0]);
							finish(true);
						},
						["Colonize"]
					)
				],
				clnp: []
			},
			/*/producetrade:/*/
			{
				actn: [
					genActionPhase("Choose between Producing or Trading Resources", ["producetrade"], wrappedOffer(["produce", "trade"])),
					genActionPhase("Choose a Planet to Produce Resources on", ["producetrade"], () => offer(false, false, ["settled_&_conquered_planets"], "subchoices", finish), ["produce"]),
					genActionPhase(
						"Producing a Resource",
						["producetrade"],
						() => {
							produce(getSubChoices());
							finish(true);
						},
						["produce"]
					),
					genActionPhase("Choose a Planet to Trade Resources from", ["producetrade"], () => offer(false, false, ["settled_&_conquered_planets"], "subchoices", finish), ["trade"]),
					genActionPhase(
						"Trading a Resource",
						["producetrade"],
						() => {
							trade(getSubChoices(), getActPlyr());
							finish();
						},
						["trade"]
					)
				],
				lead: [
					genLeadPhase("Choose between Producing or Trading Resources", ["producetrade"], () => offer(false, false, ["options", [{ name: "produce" }, { name: "trade" }]], "choices", finish)),
					genLeadPhase("Choose a Planet to Produce Resources on", ["producetrade"], () => offer(true, true, ["settled_&_conquered_planets"], "subchoices", finish), ["produce"]),
					genLeadPhase(
						"Producing a Resource",
						["producetrade"],
						() => {
							getActPlyr().activerole = "produce";
							let prd = produce(getSubChoices(), getActPlyr().bstIcons.produce);

							if (getActvActn() == "genetic_engineering") prd.forEach(plyr => plyr = [
								...plyr,
								{
									influence: [...plyr.influence, game.influence.pop()]
								}
							]);

							finish(true);
						},
						["produce"]
					),
					genLeadPhase("Choose a Planet to Trade Resources from", ["producetrade"], () => offer(true, true, ["settled_&_conquered_planets"], "subchoices", finish), ["trade"]),
					genLeadPhase(
						"Trading a Resource",
						["producetrade"],
						() => {
							getActPlyr().activerole = "trade";
							let prd = trade(getSubChoices(), getActPlyr(), getActPlyr().bstIcons.trade);

							if (getActvActn() == "diverse_markets") {
								for (let i in prd) {
									if (prd[i] > 1) {
										getActPlyr().influence.push(game.influence.pop());
									}
								}
							}

							if (getActvActn() == "specialization") {
								for (let i in Array.from(prd[getActPlyr().specialization])) {
									//what on earth is this doing?
									getActPlyr().influence.push(game.influence.pop());
								}
							}

							finish(true);
						},
						["trade"]
					)
				],
				fllw: [
					genFollowPhase("Choose a Planet to Produce Resources on", ["produce"], () => offer(!0, !0, ["settled_&_conquered_planets"], "subchoices", finish)),
					genFollowPhase("Producing a Resource", ["produce"], () => {
						let e = game;
						getActPlyr().activerole = "produce";
						produce(e.subchoices, e.players[game.acting_player_index].bstIcons.produce);
						finish(!0);
					}),
					genFollowPhase("Choose a Planet to Trade Resources from", ["trade"], () => offer(!0, !0, ["settled_&_conquered_planets"], "subchoices", finish)),
					genFollowPhase("Trading a Resource", ["trade"], () => {
						let e = game;
						getActPlyr().activerole = "trade";
						trade(e.subchoices, getActPlyr(), getActPlyr().bstIcons.trade);
						finish(!0);
					})
				],
				clnp: []
			},
			/*/politics:/*/
			{
				actn: [
					genActionPhase("Choose a Role Card to Replace Politics with", ["politics"], () => offer(false, false, ["rolecards"], "choices", finish)),
					genActionPhase("Swapping the Role Card for your Politics Card", ["politics"], () => {
						politics(getActPlyr().limbo.filter(el => el.type == "politics")[0], getChoices()[0], getActPlyr());
						finish(true);
					})
				],
				lead: [],
				fllw: [],
				clnp: []
			},
			/*/research:/*/
			{
				actn: [
					genActionPhase("Choose up to 2 Cards from your Hand to Remove from the Game", ["research"], () => offer(false, true, ["hand"], "choices", finish)),
					genActionPhase("Removing your Cards from the Game", ["research"], () => {
						research(getChoices(), getActPlyr());
						finish(true);
					})
				],
				lead: [
					genLeadPhase("Choose a Technology to Research", ["research"], () => offer(true, false, ["research"], "choices", finish)),
					genLeadPhase("Researching your Technology", ["research"], () => {
						if (getChoice() == "Skip") {
							finish(true);
							return;
						}

						let card = getChoices()[0];
						let p = { advanced: 0, metallic: 0, fertile: 0 };
						[...getActPlyr().settled_planets, ...getActPlyr().conquered_planets].map(el => p[el.type]++);
						let condition = Object.values(card.planet_requirements).reduce((acc, cur, i) => acc ? cur > p[Object.keys(p)[i]] : acc, true);

						if (condition && getActPlyr().bstIcons.research >= card.research_cost) play(
							game.research_deck,
							card.is_permanent
							? getActPlyr().permanents
							: getActPlyr().limbo,
							card.is_permanent ? "" : "discard",
							card.id
						);

						finish(true);
					})
				],
				fllw: [
					genFollowPhase("Choose a Technology to Research", ["research"], () => offer(!0, !1, ["research"], "choices", finish)),
					genFollowPhase("Researching your Technology", ["survey"], () => {
						let e = game;

						if ("Skip" != e.choices[0].name) {
							let a = { advanced: 0, metallic: 0, fertile: 0 };

							[
								...e.players[game.acting_player_index].settled_planets,
								...e.players[game.acting_player_index].conquered_planets
							].map(e => {
								a[e.type]++;
							});

							let p = !0;
							for (let i in e.choices[0].planet_requirements) e.choices[0].planet_requirements[i] > a[i] && (p = !1);
							p && e.players[game.acting_player_index].bstIcons.research >= e.choices[0].research_cost && play(e.research_deck, e.players[game.acting_player_index].limbo, "discard", e.choices[0].id);
						}

						finish(!0);
					})
				],
				clnp: []
			},
			/*/survey:/*/
			{
				actn: [
					genActionPhase("Surveying your Empire", ["survey"], () => {
						survey(getActPlyr());
						finish(true);
					})
				],
				lead: [
					genLeadPhase("Choose a Planet from your Galaxy to Explore", ["survey"], () => {
						for (let i = 0; i < getActPlyr().bstIcons.survey; i++) {
							explore_planet(getActPlyr());
						}

						offer(true, false, ["options", game.options], "choices", finish);
					}),
					genLeadPhase("Surveying your Empire", ["survey"], () => {
						if (getChoice() == "Skip") finish();
						catalog_planet(getActPlyr());
						finish(true);
					})
				],
				fllw: [
					genFollowPhase("Choose a Planet from your Galaxy to Explore", ["survey"], () => {
						let e = game;
						for (let a = 0; a < e.players[game.acting_player_index].bstIcons.survey - 1; a++) explore_planet(e.players[game.acting_player_index]);
						offer(!0, !1, ["options"], "choices", finish);
					}),
					genFollowPhase("Surveying your Empire", ["survey"], () => {
						if (getChoice() == "Skip") finish();
						catalog_planet(game.players[game.acting_player_index]);
						finish(!0);
					})
				],
				clnp: [
					{
						"": () => {
							
						}
					}
				]
			},
			/*/warfare:/*/
			{
				actn: [
					genActionPhase("Choose between Collecting a Starfighter or Conquering a Planet", ["warfare"], wrappedOffer(["Conquer a Planet", "Collect a Starfighter"])),
					genActionPhase(
						"Adding a Starfighter to your Fleet",
						["warfare"],
						() => {
							warfare(getActPlyr());
							finish(true);
						},
						["Collect a Starfighter"]
					),
					genActionPhase("Choose a Planet to Conquer", ["warfare"], () => offer(false, false, ["unsettled_planets"], "subchoices", finish), ["Conquer a Planet"]),
					genActionPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(getSubChoice(), getActPlyr());
							finish(true);
						},
						["Conquer a Planet"]
					)
				],
				lead: [
					genLeadPhase("Choose between Collecting Starfighters or Conquering a Planet", ["warfare"], wrappedOffer(["Conquer a Planet", "Collect Starfighters"])),
					genLeadPhase(
						"Adding Starfighters to your Fleet",
						["warfare"],
						() => {
							range(1, getActPlyr().bstIcons.warfare).forEach(() => warfare(getActPlyr()));
							finish(true);
						},
						["Collect Starfighters"]
					),
					genLeadPhase("Choose a Planet to Conquer", ["warfare"], () => offerUnsettled(), ["Conquer a Planet"]),
					genLeadPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(getSubChoice(), getActPlyr());
							finish(true);
						},
						["Conquer a Planet"]
					)
				],
				fllw: [
					genFollowPhase("Choose between Collecting Starfighters or Conquering a Planet", ["warfare"], () => {
						if (0 == game.players[game.acting_player_index].permanents.filter(e => "bureaucracy" == e.type).length) {
							let e = game;
							e.choices = [{ name: "Collect Starfighters" }];
							finish(!0);
						} else offer(
							!1,
							!1,
							[
								"options",
								[{ name: "Conquer a Planet" }, { name: "Collect Starfighters" }]
							],
							"choices",
							finish
						);
					}),
					genFollowPhase(
						"Adding Starfighters to your Fleet",
						["warfare"],
						() => {
							for (let e = 0; e < game.players[game.acting_player_index].bstIcons.warfare; e++) warfare(game.players[game.acting_player_index]);
							finish(!0);
						},
						["Collect Starfighters"]
					),
					genFollowPhase("Choose a Planet to Conquer", ["warfare"], () => offer(!1, !1, ["unsettled_planets"], "subchoices", finish), ["Conquer a Planet"]),
					genFollowPhase(
						"Conquering your planet",
						["warfare"],
						() => {
							conquer(game.subchoices[0], game.players[game.acting_player_index]);
							finish(!0);
						},
						["Conquer a Planet"]
					)
				],
				clnp: [
					{
						"": () => {
							
						}
					}
				]
			}
		];

		actioncardphases = [
			// #######################################################################################################################################################################################
			// improved_colonize 
			genActionPhase("Choose wether or not to Settle a Planet", ["improved_colonize"], () => offer(true, false, ["options", [{ name: "settle" }, { name: "Skip" }]], "choices", finish)),
			genActionPhase("Choose a Planet to Settle", ["improved_colonize"], () => offerUnsettled(), ["settle"]),
			genActionPhase(
				"Settling your Planet",
				["improved_colonize"],
				() => {
					settle_colonies(getSubChoice(), getActvPlyr());
					finish(true);
				},
				["settle"]
			),
			genActionPhase("Choose between Settling or Colonizing a Planet", ["improved_colonize"], wrappedOffer(["Colonize", "Settle Colonies"])),
			genActionPhase("Choose an Unsettled Planet to Settle", ["improved_colonize"], () => offerUnsettled(), ["Settle Colonies"]),
			genActionPhase(
				"Settling your Planet",
				["improved_colonize"],
				() => {
					settle_colonies(getSubChoice(), getActPlyr());
					finish(true);
				},
				["Settle Colonies"]
			),
			genActionPhase("Choose an Unsettled Planet to Colonize", ["improved_colonize"], () => offerUnsettled(), ["Colonize"]),
			genActionPhase(
				"Colonizing your Planet",
				["improved_colonize"],
				() => {
					colonize(getSubChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "improved_colonize")[0]);
					finish(true);
				},
				["Colonize"]
			),
			// #######################################################################################################################################################################################
			// improved_produce : 4
			genActionPhase("Choose an empty Production Zone to Produce in", ["improved_production"], () => offer(true, false, ["settled_&_conquered_planets"], "choices", finish)),
			genActionPhase("Producing your Resource", ["improved_production"], () => {
				if (getChoice() == "Skip") finish();
				produce(game.choices);
				finish(true);
			}),
			genActionPhase("Choose an empty Production Zone to Produce in", ["improved_production"], () => offer(true, false, ["settled_&_conquered_planets"], "choices", finish)),
			genActionPhase("Producing your Resource", ["improved_production"], () => {
				if (getChoice() == "Skip") finish();
				produce(game.choices);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_trade : 1
			genActionPhase("Trading your Stocks and Bonds", ["improved_trade"], () => {
				game.players[game.acting_player_index].influence.push(game.influence.pop());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_research : 2
			genActionPhase("Choose up to 3 Cards from your Hand to Remove from the Game", ["improved_research"], () => {
				draw(getActPlyr());
				offer(false, true, ["hand"], "choices", finish);
			}),
			genActionPhase("Removing your Cards from the Game", ["improved_research"], () => {
				research(getChoices(), getActPlyr(), 3);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_survey : 1
			genActionPhase("Drawing your Cards", ["improved_survey"], () => {
				draw(getActPlyr());
				draw(getActPlyr());
				draw(getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// improved_warfare : 4
			genActionPhase("Choose between Collecting a Starfighter or Conquering a Planet", ["improved_warfare"], wrappedOffer("Conquer a Planet", "Collect a Starfighter")),
			genActionPhase(
				"Adding a Starfighter to your Fleet",
				["improved_warfare"],
				() => {
					warfare(getActPlyr());
					warfare(getActPlyr());
					finish(true);
				},
				["Collect a Starfighter"]
			),
			genActionPhase("Choose a Planet to Conquer", ["improved_warfare"], () => offerUnsettled(), ["Conquer a Planet"]),
			genActionPhase(
				"Conquering your planet",
				["improved_warfare"],
				() => {
					conquer(getSubChoice(), getActPlyr());
					finish(true);
				},
				["Conquer a Planet"]
			),
			// #######################################################################################################################################################################################
			// mobilization : 4
			genActionPhase("Collecting your Star Fighters", ["mobilization"], () => {
				warfare(getActPlyr());
				warfare(getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// survey_team : 1
			genActionPhase("Adding Top Card of the Planet deck to your Empire", ["survey_team"], () => {
				let { game, game: { acting_player: player, planet_deck } } = get();
				player = game.players[game.acting_player_index];
				let planet = planet_deck.pop();
				player.unsettled_planets.push(planet);
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// war_path : 4
			genActionPhase("Choose a Planet to Conquer", ["war_path"], () => offerUnsettled()),
			genActionPhase("Conquering your planet", ["war_path"], () => {
				if (getChoice() == "Skip") finish();
				conquer(getChoice(), getActPlyr());
				finish(true);
			}),
			genActionPhase("Choose a Planet to Conquer", ["war_path"], () => offerUnsettled()),
			genActionPhase("Conquering your planet", ["war_path"], () => {
				if (getChoice() == "Skip") finish();
				conquer(getChoice(), getActPlyr());
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// terraforming : 2
			genActionPhase("Choose an Unsettled Planet to Terraform", ["terraforming"], () => offerUnsettled()),
			genActionPhase(
				"Terraforming your Planet",
				["terraforming"],
				() => {
					colonize(getChoice(), getActPlyr().limbo, getActPlyr().limbo.filter(el => el.type == "terraforming")[0]);

					if (getChoice().hosted_colonies.length > 0) {
						let c = getChoice().hosted_colonies.reduce((acc, cur) => acc + cur.icons.colonize, 0);
						if (c >= getChoice().settle_cost) settle_colonies(getChoice(), getActPlyr());
					}

					finish(true);
				},
				["Colonize"]
			),
			// #######################################################################################################################################################################################
			// genetic_engineering :1
			// UNIMPLIMENTED
			genActionPhase("Engineering Genetics", ["genetic_engineering"], finish),
			// #######################################################################################################################################################################################
			// artificial_intelligence : 4
			genActionPhase("Select a Role Card to take into your Hand", ["artificial_intelligence"], () => offer(false, false, ["rolecards"], "choices", finish)),
			genActionPhase("Adding Role Card to your Machine Learning Model", ["artificial_intelligence"], () => {
				let { game, game: { acting_player: player } } = get();
				player = game.players[game.acting_player_index];

				if (game.stacks.pilecount[game.choices[0].type] >= 1) {
					player.hand.push(Object.assign({ id: gen_unique_id() }, game.stacks.rolecards[game.stacks[game.choices[0].type]]));
					game.stacks.pilecount[game.choices[0].type]--;
				}

				finish(true);
			}),
			genActionPhase("Select a Role Card to take into your Hand", ["artificial_intelligence"], () => offer(false, false, ["rolecards"], "choices", finish)),
			genActionPhase("Adding Role Card to your Machine Learning Model", ["artificial_intelligence"], () => {
				let { game, game: { acting_player: player } } = get();
				player = game.players[game.acting_player_index];

				if (game.stacks.pilecount[game.choices[0].type] >= 1) {
					player.hand.push(Object.assign({ id: gen_unique_id() }, game.stacks.rolecards[game.stacks[game.choices[0].type]]));
					game.stacks.pilecount[game.choices[0].type]--;
				}

				finish(true);
			}),
			// #######################################################################################################################################################################################
			// diverse_markets : 1
			// UNIMPLIMENTED
			genActionPhase("Diversifying Markets", ["diverse_markets"], finish),
			// #######################################################################################################################################################################################
			// specialization : 2
			genActionPhase("Choose a Resource to Specialize in", ["specialization"], wrappedOffer("red", "blue", "gren", "purple")),
			genActionPhase("Specializaing in your Seleted Resource", ["specialization"], () => {
				getActPlyr().specialization = getChoice();
				finish(true);
			}),
			// #######################################################################################################################################################################################
			// data_network : 3
			genActionPhase("Drawing Your Cards", ["data_network"], () => {
				draw(getActPlyr());
				draw(getActPlyr());
				finish(true);
			}),
			genActionPhase("Choose any number of Cards from your Hand to Remove from the Game", ["data_network"], () => offer(true, true, ["hand"], "choices", finish)),
			genActionPhase("Removing the Selected Cards from the Game", ["data_network"], () => {
				if (getChoice() == "Skip") finish();
				let { game, game: { choices, acting_player: player } } = get();
				player = game.players[game.acting_player_index];
				research(choices, player, choices.length);
				finish(true);
			})
		];

		let nonce = 0;

		$$invalidate(0, game = {
			minPlyrs: 2,
			maaxPlyrs: 4,
			passtoplayer: false,
			nonce: 0,
			displayinfo: {
				selectionzone: "",
				dragged: null,
				showoptiontoskip: false,
				allowformultipleselections: false,
				center_or_planets: true, //true = center, false = planets
				choicelabel: "choices"
			},
			subchoices: [],
			influence: [
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			messagetoplayer: [],
			options: [],
			planet_deck: [],
			currentphase: -4,
			leading_player_index: 0,
			acting_player_index: 0,
			number_of_players: 2,
			started: false,
			gamephases: [
				{
					start: [
						{
							"set active player": () => {
								if (game.started) {
									$$invalidate(0, game.started = true, game);
									$$invalidate(0, game.passt = false, game);
									$$invalidate(0, game.leading_player_index = (game.leading_player_index + 1) % game.number_of_players, game);
									$$invalidate(0, game.acting_player_index = game.leading_player_index, game);
									$$invalidate(0, game.leadingplayer = game.players[game.leading_player_index], game);
									$$invalidate(0, game.acting_player = game.players[game.leading_player_index], game);
									openFullscreen();
								}

								if (game.leadingplayer !== undefined) {
									$$invalidate(0, game.players[game.leading_player_index].rounds++, game);
								}

								let planets = [
									...game.players[game.leading_player_index].settled_planets,
									...game.players[game.leading_player_index].conquered_planets
								];

								for (let p in planets) {
									tallyIcons(game.players[game.leading_player_index], planets[p]);
								}

								for (let p in game.players[game.leading_player_index].permanents) {
									tallyIcons(game.players[game.leading_player_index], permanents[p]);
								}

								finish(true);
							}
						},
						{
							Productivity: () => {
								if (getActPlyr().permanents.filter(el => el.type == "productivity").length != 0) {
									getActPlyr().actionrolesequence = "aar";
								}

								finish();
							}
						},
						{
							"Choose an Order to Perform Your Action and Role Phases": () => {
								if (getActPlyr().permanents.filter(el => el.type == "logistics").length != 0) {
									let options = ["Action Phase then Role Phase", "Role Phase then Action Phase"];

									if (getActPlyr().permanents.filter(el => el.type == "productivity").length != 0) {
										//add aar,ara,and raa as options
										options.push("Action Phase then another Action Phase then Role Phase");

										options.push("Action Phase then Role Phase then another Action Phase");
										options.push("Role Phase then Action Phase then another Action Phase");
									}

									//offer ar or ra
									simpleOffer(options);
								} else {
									finish();
								}
							}
						},
						{
							Logistics: () => {
								if (getActPlyr().permanents.filter(el => el.type == "logistics").length != 0) {
									if (getChoice() == "Action Phase then Role Phase") {
										getActPlyr().actionrolesequence = "ar";
									} else if (getChoice() == "Role Phase then Action Phase") {
										getActPlyr().actionrolesequence = "ra";
									} else if (getChoice() == "Action Phase then another Action Phase then Role Phase") {
										getActPlyr().actionrolesequence = "aar";
									} else if (getChoice() == "Action Phase then Role Phase then another Action Phase") {
										getActPlyr().actionrolesequence = "ara";
									} else if (getChoice() == "Role Phase then Action Phase then another Action Phase") {
										getActPlyr().actionrolesequence = "raa";
									}

									finish(true);
								} else {
									finish();
								}
							}
						}
					]
				},
				{
					action: [
						{
							"Choose an Action to Play": () => {
								offer(true, false, ["hand"], "choices", finish);
							}
						},
						{
							"Playing your Action": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									let card = getChoices()[0], plyr = getActPlyr();
									plyr.activeaction = card.type;
									handToLimbo(plyr, card);
									finish(true);
								}
							}
						},
						...getActionCorePhases(),
						...getActionCardPhases()
					]
				},
				{
					role: [
						{
							"Choose a Role Card to Lead with": () => {
								offer(false, false, ["rolecards"], "choices", finish);
							}
						},
						{
							"Performing your Role": () => {
								let card = getChoices()[0];

								if (game.stacks.pilecount[card.type] >= 1) {
									if (card.type == "producetrade") {
										getActPlyr().bstIcons["produce"]++;
										getActPlyr().bstIcons["trade"]++;
									} else {
										getActPlyr().bstIcons[card.type]++;
									}

									let newcard = Object.assign(
										{
											id: gen_unique_id(),
											finDest: "discard",
											selected: true
										},
										game.stacks.rolecards[game.stacks[card.type]]
									);

									getActPlyr().limbo = [...getActPlyr().limbo, newcard];
									$$invalidate(0, game.stacks.pilecount[card.type]--, game);
								} else if (card.type != "colonize") {
									getActPlyr().bstIcons[card.type]++;
								}

								getActPlyr().activerole = card.type;
								finish(true);
							}
						}
					]
				},
				{
					lead: [
						{
							"Choose cards from your hand to Boost the effectiveness of your Role": () => {
								offer(true, true, ["hand"], "choices", finish);
							}
						},
						{
							"Boosting your Role": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									getChoices().forEach(card => {
										boostWithIcons(getActPlyr(), card);
										card.finDest = "discard";
									});

									//TODO: tally up icons on planets
									//TODO: tally up icons on technologies
									finish(true);
								}
							}
						},
						...getLeadCorePhases(),
						{
							"Pass the device to the Next Player": () => {
								$$invalidate(0, game.displayinfo.selectionzone = "", game);
								$$invalidate(0, game.passp = true, game);
							}
						},
						{
							"You passed Priority": () => {
								$$invalidate(0, game.passp = false, game);
								finish(true);
							}
						}
					]
				},
				{
					follow: [
						{
							"Choose between Following or Dissent the Leading Role": () => {
								simpleOffer(["dissent", getLeadPlyr().activerole]);
							}
						},
						{
							Dissenting: () => {
								getActPlyr().activerole = getChoice();

								if (getActPlyr().activerole != "dissent") {
									let card = getChoices()[0];

									if (game.stacks.pilecount[card.name] >= 1) {
										getActPlyr().bstIcons[card.name]++;

										let newcard = Object.assign(
											{
												id: gen_unique_id(),
												finDest: "discard",
												selected: true
											},
											game.stacks.rolecards[game.stacks[card.name]]
										);

										getActPlyr().limbo = [...getActPlyr().limbo, newcard];
										$$invalidate(0, game.stacks.pilecount[card.name]--, game);
									} else if (card.name != "colonize") {
										boostWithIcons(getActPlyr(), card);
									}

									finish(true);
								} else {
									draw(getActPlyr());

									if (getActPlyr().permanents.filter(el => el.type == "dissension").length != 0) {
										draw(getActPlyr());
									}

									finish(true);
								}
							}
						},
						{
							"Choose cards from your hand to Boost the effectiveness of your Role": () => {
								if (getActPlyr().activerole == "dissent") {
									finish(); //will auto pass to next phase if follow has been selected
								} else {
									offer(true, true, ["hand"], "choices", finish);
								}
							}
						},
						{
							"Boosting your Role": () => {
								if (getActPlyr().activerole == "dissent") {
									finish();
								} else {
									if (getChoice() == "Skip") {
										finish();
									} else {
										let cards = getChoices;

										for (let i in cards) {
											boostWithIcons(getActPlyr(), cards[i]);
										}

										//TODO: tally up icons on planets
										//TODO: tally up icons on technologies
										finish(true);
									}
								}
							}
						},
						...getFollowCorePhases(),
						{
							"Pass the device to the Next Player": () => {
								$$invalidate(0, game.displayinfo.selectionzone = "", game);
								$$invalidate(0, game.passp = true, game);
							}
						},
						{
							"You passed Priority": () => {
								$$invalidate(0, game.passp = false, game);
								finish(true);
							}
						}
					]
				},
				// discard : 2
				{
					discard: [
						{
							"Would you like to Mobilize against a Planet": () => {
								if (getActPlyr().activeaction != "mobilization") {
									finish();
								} else {
									offer(true, false, ["options", [{ name: "mobilize" }, { name: "skip" }]], "choices", finish);
								}
							}
						},
						{
							"Choose a Planet to Mobilize Against": () => {
								if (getActPlyr().activeaction != "mobilization" || getChoice() != "mobilize") {
									finish();
								} else {
									offerUnsettled();
								}
							}
						},
						{
							"Mobalizing against your Planet": () => {
								if (getActPlyr().activeaction != "mobilization") {
									finish();
								} else {
									conquer(getSubChoice(), getActPlyr());
									finish(true);
								}
							}
						},
						{
							"Would you like to Streamline Your Empire": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0) {
									finish();
								} else {
									offer(
										false,
										false,
										[
											"options",
											[{ name: "Decline" }, { name: "Streamline Empire" }]
										],
										"choices",
										finish
									);
								}
							}
						},
						{
							"Choose a Card from Your Hand to Remove from the Game": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0 || getChoice() != "Streamline Empire") {
									finish();
								} else {
									offer(true, false, ["hand"], "subchoices", finish);
								}
							}
						},
						{
							"Streamlining Your Empire": () => {
								if (getActPlyr().permanents.filter(el => el.type == "streamlining").length == 0 || getChoice() != "Streamline Empire" || getChoice() == "Skip") {
									finish();
								} else {
									research(getChoices(), getActPlyr(), 1);
								}
							}
						},
						{
							"Would you like to Utilize Your Empire's Hyperefficiency": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0) {
									finish();
								} else {
									simpleOffer(["Decline", "Utilize Hyperefficiency"]);
								}
							}
						},
						{
							"Choose a Card from Your Hand to Remove from the Game": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0 || getChoice() != "Utilize Hyperefficiency") {
									finish();
								} else {
									offer(true, true, ["hand"], "subchoices", finish);
								}
							}
						},
						{
							"Your Empire is Hyperefficient": () => {
								if (getActPlyr().permanents.filter(el => el.type == "hyperefficiency").length == 0 || getChoice() != "Utilize Hyperefficiency" || getChoice() == "Skip") {
									finish();
								} else {
									research(getChoices(), getActPlyr(), getChoices().length);
								}
							}
						},
						{
							"Choose any Cards you would like to Discard": () => {
								offer(true, true, ["hand"], "choices", finish);
							}
						},
						{
							"Discarding your Selected Cards": () => {
								if (getChoice() == "Skip") {
									finish();
								} else {
									getChoices().forEach(card => {
										getActPlyr().discard = [...getActPlyr().discard, card];
										getActPlyr().limbo = getActPlyr().limbo.filter(c => c.id != card.id);
									});

									finish(true);
								}
							}
						}
					]
				},
				//cleanup : 1
				{
					cleanup: [
						{
							"Drawing up to your Hand Size": () => {
								cleanup();
								let handsize = getActPlyr().handsize;

								for (let index in getActPlyr().settled_planets) {
									handsize += getActPlyr().settled_planets[index].handsize_modifier;
								}

								for (let index in getActPlyr().conquered_planets) {
									handsize += getActPlyr().conquered_planets[index].handsize_modifier;
								}

								let l = getActPlyr().hand.length;

								if (l < handsize) {
									draw(getActPlyr(), handsize - l);
								}

								game.players.forEach(resetIconBoost);

								if (game.started && checkforendgame() && game.players.reduce((t, p) => t + p.rounds, 0) % game.number_of_players == 0) {
									totalinfluence();
									$$invalidate(0, game.nextphase = endgame, game);
								}

								finish(true);
							}
						},
						{
							"Pass the device to the Next Player": () => {
								$$invalidate(0, game.displayinfo.selectionzone = "", game);
								$$invalidate(0, game.displayinfo.showoptiontoskip = false, game);
								$$invalidate(0, game.displayinfo.allowformultipleselections = false, game);
								$$invalidate(0, game.passp = false, game);
								$$invalidate(0, game.passt = true, game);
							}
						},
						{
							"You passed the Turn": () => {
								$$invalidate(0, game.passt = false, game);
								finish(true);
							}
						}
					]
				}
			],
			players: [],
			winner: false,
			stacks: {
				pilecount: {
					research: 20,
					producetrade: 16,
					colonize: 20,
					warfare: 16,
					survey: 20
				},
				survey: 0,
				warfare: 1,
				colonize: 2,
				producetrade: 3,
				research: 4, //indexes
				rolecards: [
					genEmptyCard("survey", "Survey", { survey: 1 }),
					genEmptyCard("warfare", "Warfare", { warfare: 1 }),
					genEmptyCard("colonize", "Colonize", { colonize: 1 }),
					genEmptyCard("producetrade", "Produce / Trade", { produce: 1, trade: 1 }),
					genEmptyCard("research", "Research", { research: 1 }, { research_deck: [] })
				]
			}
		});

		let url = location.origin.replace(/^http/, "ws");

		$$invalidate(1, lobby = {
			screenname: "",
			url,
			sets: ["Base Game"],
			number_of_players: [2, 3, 4],
			existinggames: []
		});

		$$invalidate(0, game.nonce = nonce, game);
		$$invalidate(2, mounted = true);
	});

	///////////////////////////////////////////////////////////////////////////////
	let clearOptions = () => $$invalidate(0, game.options = [], game),
		offerUnsettled = () => offer(false, false, ["unsettled_planets"], "subchoices", finish),
		getActionCardPhases = () => actioncardphases,
		getActvActn = () => getActPlyr().activeaction,
		getActvRole = () => getActPlyr().activerole,
		getChoice = () => game.choices[0].name,
		getChoices = () => game.choices,
		getSubChoice = () => getSubChoices()[0],
		getSubChoices = () => game.subchoices,
		finish = (cond = false) => phasefinishfunction(cond),
		getActPlyr = () => game.players[game.acting_player_index],
		getLeadPlyr = () => game.players[game.leading_player_index],
		simpleOffer = choices => offer(false, false, ["options", choices.reduce((acc, cur) => [...acc, { name: cur }], [])], "choices", finish),
		wrappedOffer = choices => () => simpleOffer(choices),
		getActionCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.actn], []).reduce((acc, cur) => [...acc, ...cur], []),
		getLeadCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.lead], []).reduce((acc, cur) => [...acc, ...cur], []),
		getFollowCorePhases = () => corephases.reduce((acc, cur) => [...acc, cur.fllw], []).reduce((acc, cur) => [...acc, ...cur], []),
		genActionPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvActn()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genLeadPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvRole()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genFollowPhase = (name, actions, phase, choices = [], cond = false) => ({
			[name]: () => {
				if (actions.includes(getActvRole()) && (choices.length == 0 || choices.includes(getChoice()))) {
					phase();
				} else {
					finish(cond);
				}
			}
		}),
		genEmptyCard = (type, name, symbols, extras = {}) => ({
			type,
			selected: false,
			name,
			selected: false,
			icons: {
				...{
					survey: 0,
					warfare: 0,
					colonize: 0,
					produce: 0,
					trade: 0,
					research: 1
				},
				...symbols
			},
			image: null,
			...extras
		}),
		tallyIcons = (dest, src) => ["survey", "warfare", "trade", "produce", "research"].forEach(icon => dest.icons[icon] += src.icons[icon]),
		handToLimboWithLimboDuplicatePurge = (plyr, card) => {
			rmFromField("limbo", plyr, card); /*"colonize"*/
			handToLimbo(plyr, card);
		},
		handToLimbo = (plyr, card) => {
			playToField("limbo", plyr, card, "discard");
			rmFromField("hand", plyr, card);
		},
		limboToHand = (plyr, card) => {
			playToField("hand", plyr, card, "");
			rmFromField("limbo", plyr, card);
		},
		playToField = (fld, plyr, card, fDest) => plyr[fld] = [...plyr[fld], { ...card, finDest: fDest }],
		rmFromField = (fld, plyr, card) => plyr[fld] = plyr[fld].filter(el => card.id != el.id),
		boostWithIcons = (plyr, src) => Object.keys(src.icons).forEach(icon => plyr.bstIcons[icon] += src.icons[icon]),
		resetIconBoost = plyr => plyr.bstIcons = {
			survey: 0,
			warfare: 0,
			colonize: 0,
			produce: 0,
			trade: 0,
			research: 0
		},
		resetSelection = selected => selected.forEach(s => s.selected = false),
		offlineOrIsClientTurn = () => lobby.screenname == getActPlyr().name || !lobby.online,
		setChoice = chc => $$invalidate(0, game[game.displayinfo.choicelabel] = chc, game),
		cleanOptions = () => $$invalidate(0, game.options = [], game),
		displayPlanets = () => $$invalidate(0, game.displayinfo.center_or_planets = false, game),
		displayCenter = () => $$invalidate(0, game.displayinfo.center_or_planets = true, game),
		clearChoices = () => $$invalidate(0, game[game.displayinfo.choicelabel] = [], game),
		setDisplayInfo = (zone, multiple, skippable, label) => $$invalidate(
			0,
			game.displayinfo = {
				...game.displayinfo,
				...{
					selectionzone: zone,
					allowformultipleselections: multiple,
					showoptiontoskip: skippable,
					choicelabel: label
				}
			},
			game
		),
		getAllCards = plyr => [...plyr.deck, ...plyr.discard, ...plyr.limbo, ...plyr.hand],
		isPlanet = p => p.type == "planet" || p.type == "fertile" || p.type == "metallic" || p.type == "advanced",
		chkForPerm = perm => getActPlyr().permanents.filter(el => el.type == perm).length != 0,
		range = (min, max) => min <= max ? [...range(min, max - 1), max] : [],
		singleCllBck = (cllBck, e, func) => () => {
			func();
			document.removeEventListener(e, this);
			cllBck();
		},
		produceTradeHelper = (filled, planets, resources, func = () => {
				
			}) => {
			let prd = { blue: 0, green: 0, purple: 0, red: 0 };

			planets.forEach(planet => planet.production_zones.forEach(zone => {
				if (!zone.filled && resources > 0) {
					zone.filled = filled;
					prd[zone.type]++;
					resources--;
					func();
				}
			}));

			return prd;
		};

	let choosewrapper = (c, zone) => {
		if (game.displayinfo.selectionzone == zone && offlineOrIsClientTurn()) {
			game.displayinfo.allowformultipleselections
			? multiplechoose(c)
			: choose([c]);
		}
	};

	let multiplechoose = choice => {
		if (offlineOrIsClientTurn()) {
			if (!game[game.displayinfo.choicelabel].includes(choice)) {
				setChoice([...game[game.displayinfo.choicelabel], choice]);
				choice.selected = true;
				if (!isPlanet(choice) && choice.name != "Skip") handToLimbo(getActPlyr(), choice);
			} else {
				choice.selected = false;

				if (!isPlanet(choice) && choice.name != "Skip") {
					setChoice(game[game.displayinfo.choicelabel].filter(el => el.id != choice.id));
					limboToHand(getActPlyr(), choice);
				}
			}
		}
	};

	let choose = choices => {
		if (offlineOrIsClientTurn()) {
			clearOptions();
			resetSelection(choices);
			setChoice(choices);
			finish();
		}
	};

	let unchoose = choice => {
		if (offlineOrIsClientTurn()) {
			if (game[game.displayinfo.choicelabel].includes(choice)) {
				choice.selected = false;
				setChoice(game[game.displayinfo.choicelabel].filter(el => el.id != choice.id));
				limboToHand(getActPlyr(), choice);
			}
		}
	};

	let offer = (skippable, multiple, [field_label, choices], choice_label, callback) => {
		setDisplayInfo(field_label, multiple, skippable, choice_label); /*option to skip | sets game.displayinfo.showoptiontoskip=boolean */ /*allows multiple choices | sets game.displayinfo.allowformultipleselections=boolean */ /* available cards to choose from | game.displayinfo.selectionzone={'hand|discard|options|planets|research|rolecards'}, sets choices=array if specified*/ /* label for where the choice is stored | set with game[label]=*/ /*callback that handles the choice or finishes the phase*/

		switch (field_label) {
			case "hand":
				choices = getActPlyr().hand;
				break;
			case "research":
				choices = game.research_deck;
				break;
			case "discard":
				choices = getActPlyr().discard;
				break;
			case "planets":
				choices = game.planet_deck;
				break;
			case "rolecards":
				choices = game.stacks.rolecards;
				displayCenter();
				break;
			case "unsettled_planets":
				choices = getActPlyr().unsettled_planets;
				displayPlanets();
				break;
			case "settled_planets":
				choices = getActPlyr().settled_planets;
				displayPlanets();
				break;
			case "conquered_planets":
				choices = getActPlyr().conquered_planets;
				displayPlanets();
				break;
			case "settled_&_conquered_planets":
				choices = [...getActPlyr().settled_planets, ...getActPlyr().conquered_planets];
				displayPlanets();
				break;
		}

		clearChoices();
		present_as_choice(choices);
	};

	let discard = (source_array, destination_array, id) => {
		let toRemove = source_array.find(e => id == e.id);
		source_array = source_array.filter(e => e.id != toRemove.id);
	};

	//draw deck->hand
	let totalinfluence = () => {
		game.players.forEach(plyr => {
			plyr.influence = plyr.influence.reduce((acc, cur) => acc + cur, 0) + getAllCards(plyr).reduce((acc, cur) => acc + cur.influence);
		});
	};

	let endgame = () => {
		//display victor
		let scores = game.players.map(e => e.influence);

		let winner = "";
		let highest = scores[0];

		game.players.map(e => {
			if (highest < e.influence) {
				winner = e.name;
				highest = e.influence;
			}
		});
	};

	let checkforendgame = () => {
		let depletedstacks = game.stacks.pilecount.reduce((acc, cur) => acc + (cur < 1) ? 1 : 0, 0);

		let stacklimit = game.number_of_players == 1 || game.number_of_players == 2
		? 1
		: 2;

		return stacklimit <= depletedstacks || game.influence.length == 0;
	};

	let draw = (player, quantity = 1) => {
		for (let i = 0; i < quantity; i++) {
			if (player.deck.length == 0) {
				if (player.discard.length == 0) return player;
				player.deck = knuthshuffle([...player.discard]);
				player.discard = [];
			}

			player.hand = [...player.hand, player.deck.pop()];
			player.deck = player.deck;
		}

		return player;
	};

	let play = (source_array, destination_array, finDest, id) => {
		let toRemove = source_array.find(e => id == e.id);
		source_array = source_array.filter(e => e.id != toRemove.id);
	};

	// send(state){
	//     set(state);
	//     if (ws!==undefined){
	//         sendstate();
	//     }
	// },
	let gen_research_card = name => {
		return {
			name,
			type: name,
			id: gen_unique_id(),
			icons: {
				"survey": 0,
				"warfare": 0,
				"colonize": 0,
				"produce": 0,
				"trade": 0,
				"research": 0
			},
			planet_requirements: {
				"advanced": 0,
				"metallic": 0,
				"fertile": 0
			},
			research_cost: 0,
			action: () => {
				
			},
			is_permanent: false,
			is_doublesided: false,
			imgurl: "/images/",
			Influence_value: 0,
			img(im) {
				this.imgurl += im;
				return this;
			},
			influence(inf) {
				this.influence_value = inf;
				return this;
			},
			metallic(met) {
				this.planet_requirements.metallic = met;
				return this;
			},
			advanced(adv) {
				this.planet_requirements.advanced = adv;
				return this;
			},
			fertile(fer) {
				this.planet_requirements.fertile = fer;
				return this;
			},
			research(res) {
				this.research_cost = res;
				return this;
			},
			permanent() {
				this.is_permanent = true;
				return this;
			},
			doubleside() {
				this.is_doublesided = true;
				return this;
			},
			icons(icons) {
				this.icons = Object.assign(this.icons, icons);
				return this;
			},
			improved_colonize() {
				this.research(3);
				this.imgurl += "improvedcolonize";
				return this;
			},
			improved_survey() {
				this.research(3);
				this.imgurl += "improvedsurvey";
				return this;
			},
			improved_research() {
				this.research(3);
				this.imgurl += "improvedresearch";
				return this;
			},
			improved_warfare() {
				this.research(3);
				this.imgurl += "improvedwarfare";
				return this;
			},
			improved_production() {
				this.research(3);
				this.imgurl += "improvedproduction";
				return this;
			},
			improved_trade() {
				this.research(3);
				this.imgurl += "improvedtrade";
				return this;
			},
			surveyteam() {
				return this.research(5).metallic(2).influence(2).icons({ "survey": 2 }).img("surveyteam");
			},
			warpath() {
				return this.research(5).metallic(2).influence(2).icons({ "warfare": 2 }).img("warpath");
			},
			terraforming() {
				return this.research(5).fertile(2).influence(2).icons({ "colonize": 2 }).img("terraforming");
			},
			geneticengineering() {
				return this.research(5).fertile(2).influence(2).icons({ "produce": 2 }).img("geneticengineering");
			},
			artificialintelligence() {
				return this.research(5).fertile(2).influence(2).icons({ "colonize": 1, "produce": 1 }).img("artificialintelligence");
			},
			diversemarkets() {
				return this.research(5).advanced(2).influence(2).icons({ "research": 1, "trade": 1 }).img("diversemarkets");
			},
			specialization() {
				return this.research(5).advanced(2).influence(2).icons({ "trade": 2 }).img("specialization");
			},
			mobilization() {
				return this.research(5).metallic(2).influence(2).icons({ "survey": 1, "warfare": 1 }).img("mobilization");
			},
			datanetwork() {
				return this.research(5).advanced(2).influence(2).icons({ "research": 2 }).img("datanetwork");
			},
			abundance() {
				this.research(5);
				this.imgurl += "abundance";
				this.is_doublesided = true;
				this.is_permanent = true;
				return this.fertile(2).influence(2);
			},
			adaptability() {
				this.research(7);
				this.imgurl += "adaptability";
				this.is_doublesided = true;
				this.is_permanent = true;
				return this.advanced(3).influence(5);
			},
			bureaucracy() {
				this.research(7);
				this.imgurl += "bureaucracy";
				this.is_doublesided = true;
				this.is_permanent = true;
				return this.fertile(3).influence(5);
			},
			dissension() {
				return this.research(7).fertile(3).influence(5).permanent().doubleside().img("dissension");
			},
			hyperefficiency() {
				return this.research(7).advanced(3).influence(5).permanent().doubleside().img("hyperefficiency");
			},
			imperialism() {
				return this.research(5).metallic(2).influence(2).permanent().doubleside().img("imperialism").icons({ "survey": 1, "trade": 1, "warfare": 1 });
			},
			logistics() {
				return this.research(7).metallic(3).influence(5).permanent().doubleside().img("logistics");
			},
			productivity() {
				return this.research(7).metallic(3).influence(5).permanent().doubleside().img("productivity");
			},
			scorchedearthpolicy() {
				return this.research(5).metallic(2).influence(2).permanent().doubleside().img("scorchedearthpolicy");
			},
			streamlining() {
				return this.research(5).advanced(2).influence(2).permanent().doubleside().img("streamlining");
			},
			weaponsemporium() {
				return this.research(5).advanced(2).influence(2).permanent().doubleside().img("weaponemporium");
			},
			fertilegrounds() {
				return this.research(5).fertile(2).influence(2).permanent().doubleside().img("fertilegrounds").icons({
					"research": 1,
					"colonize": 1,
					"produce": 1
				});
			}
		};
	};

	let gen_research_deck = () => {
		$$invalidate(
			0,
			game.research_deck = [
				gen_research_card("improved_production").metallic(1).icons({ "warfare": 1, "produce": 1 }).improved_production().img("wp.png"),
				gen_research_card("improved_production").metallic(1).icons({ "survey": 1, "produce": 1 }).improved_production().img("sp.png"),
				gen_research_card("improved_trade").metallic(1).icons({ "survey": 1, "trade": 1 }).improved_trade().img("st.png"),
				gen_research_card("improved_trade").metallic(1).icons({ "warfare": 1, "trade": 1 }).improved_trade().img("wt.png"),
				gen_research_card("improved_research").metallic(1).icons({ "warfare": 1, "research": 1 }).improved_research().img("wr.png"),
				gen_research_card("improved_research").metallic(1).icons({ "survey": 1, "research": 1 }).improved_research().img("sr.png"),
				gen_research_card("improved_colonize").metallic(1).icons({ "warfare": 1, "colonize": 1 }).improved_colonize().img("wc.png"),
				gen_research_card("improved_colonize").metallic(1).icons({ "survey": 1, "colonize": 1 }).improved_colonize().img("sc.png"),
				gen_research_card("improved_warfare").fertile(1).icons({ "produce": 1, "warfare": 1 }).improved_warfare().img("pw.png"),
				gen_research_card("improved_warfare").fertile(1).icons({ "colonize": 1, "warfare": 1 }).improved_warfare().img("cw.png"),
				gen_research_card("improved_trade").fertile(1).icons({ "produce": 1, "trade": 1 }).improved_trade().img("pt.png"),
				gen_research_card("improved_trade").fertile(1).icons({ "colonize": 1, "trade": 1 }).improved_trade().img("ct.png"),
				gen_research_card("improved_research").fertile(1).icons({ "produce": 1, "research": 1 }).improved_research().img("pr.png"),
				gen_research_card("improved_research").fertile(1).icons({ "colonize": 1, "research": 1 }).improved_research().img("cr.png"),
				gen_research_card("improved_survey").fertile(1).icons({ "produce": 1, "survey": 1 }).improved_survey().img("ps.png"),
				gen_research_card("improved_survey").fertile(1).icons({ "colonize": 1, "survey": 1 }).improved_survey().img("cs.png"),
				gen_research_card("improved_production").advanced(1).icons({ "research": 1, "produce": 1 }).improved_production().img("rp.png"),
				gen_research_card("improved_production").advanced(1).icons({ "trade": 1, "produce": 1 }).improved_production().img("tp.png"),
				gen_research_card("improved_warfare").advanced(1).icons({ "warfare": 1, "trade": 1 }).improved_warfare().img("tw.png"),
				gen_research_card("improved_warfare").advanced(1).icons({ "research": 1, "warfare": 1 }).improved_warfare().img("rw.png"),
				gen_research_card("improved_colonize").advanced(1).icons({ "colonize": 1, "trade": 1 }).improved_colonize().img("tc.png"),
				gen_research_card("improved_colonize").advanced(1).icons({ "research": 1, "colonize": 1 }).improved_colonize().img("rc.png"),
				gen_research_card("improved_survey").advanced(1).icons({ "trade": 1, "survey": 1 }).improved_survey().img("ts.png"),
				gen_research_card("improved_survey").advanced(1).icons({ "research": 1, "survey": 1 }).improved_survey().img("rs.png"),
				gen_research_card("survey_team").surveyteam().img(".png"),
				gen_research_card("war_path").warpath().img(".png"),
				gen_research_card("terraforming").terraforming().img(".png"),
				gen_research_card("genetic_engineering").geneticengineering().img(".png"),
				gen_research_card("artificial_intelligence").artificialintelligence().img(".png"),
				gen_research_card("diverse_markets").diversemarkets().img(".png"),
				gen_research_card("specialization").specialization().img(".png"),
				gen_research_card("mobilization").mobilization().img(".png"),
				gen_research_card("data_network").datanetwork().img(".png"),
				gen_research_card("abundance").abundance().img(".png"),
				gen_research_card("adaptability").adaptability().img(".png"),
				gen_research_card("bureaucracy").bureaucracy().img(".png"),
				gen_research_card("dissension").dissension().img(".png"),
				gen_research_card("hyperefficiency").hyperefficiency().img(".png"),
				gen_research_card("imperialism").imperialism().img(".png"),
				gen_research_card("logistics").logistics().img(".png"),
				gen_research_card("productivity").productivity().img(".png"),
				gen_research_card("scorched_earth_policy").scorchedearthpolicy().img(".png"),
				gen_research_card("streamlining").streamlining().img(".png"),
				gen_research_card("weapons_emporium").weaponsemporium().img(".png"),
				gen_research_card("fertile_grounds").fertilegrounds().img(".png")
			],
			game
		);
	};

	let genplayer = _id => {
		let _player = {
			"id": _id,
			"actionrolesequence": "ar", //can be ar. ra, aar, ara, raa
			"specialization": "",
			"available": true,
			"rounds": 0,
			"limbo": [],
			"deck": knuthshuffle(gennewdeck()),
			"hand": [],
			"permanents": [],
			"discard": [],
			"handsize": 5,
			"activeaction": null,
			"activerole": "",
			"handsize": 5,
			"bstIcons": {
				"survey": 0,
				"warfare": 0,
				"colonize": 0,
				"produce": 0,
				"trade": 0,
				"research": 0
			},
			"unsettled_planets": [game.stacks.startingplanets.pop()],
			"settled_planets": [],
			"conquered_planets": [],
			"starfighters": { "small": 0, "medium": 0, "large": 0 },
			"combatvalue": 0,
			"influence": []
		};

		draw(_player, _player.handsize);
		$$invalidate(0, game.players = [...game.players, _player], game);
	};

	let genplanet = name_in => {
		return {
			id: gen_unique_id(),
			name: name_in,
			type: "planet",
			settle_cost: 2,
			settled: false,
			conquer_cost: 2,
			production_zones: [],
			influence_value: 2,
			icons: {
				"survey": 0,
				"warfare": 0,
				"colonize": 0,
				"produce": 0,
				"trade": 0,
				"research": 0
			},
			handsize_modifier: 0,
			hosted_colonies: [],
			metallic() {
				this.type = "metallic";
				return this;
			},
			advanced() {
				this.type = "advanced";
				return this;
			},
			fertile() {
				this.type = "fertile";
				return this;
			},
			icon(icon_name) {
				this.icons[icon_name]++;
				return this;
			},
			handsize(modifier) {
				this.handsize_modifier = modifier;
				return this;
			},
			influence(influence) {
				this.influence_value = influence;
				return this;
			},
			settle(cost) {
				this.settle_cost = cost;
				return this;
			},
			conquer(cost) {
				this.conquer_cost = cost;
				return this;
			},
			zone(zone) {
				this.production_zones.push({ type: zone, filled: false });
				return this;
			}
		};
	};

	let genplanetdeck = () => {
		$$invalidate(
			0,
			game.planet_deck = knuthshuffle([
				//fertile planets
				genplanet("MISHBURR ITO-A").fertile().settle(5).conquer(4).zone("green").influence(3).icon("produce"),
				genplanet("STYKU").fertile().settle(4).conquer(5).zone("blue").influence(3).icon("colonize"),
				genplanet("ANGUS DUFFY").fertile().settle(3).conquer(6).zone("green").zone("blue").influence(3),
				genplanet("GERDLAND").fertile().settle(4).conquer(5).zone("blue").influence(3).icon("produce"),
				genplanet("MIK-MIK").fertile().settle(5).conquer(4).zone("green").influence(3).icon("colonize"),
				genplanet("NELOS IV").fertile().settle(5).conquer(4).zone("green").influence(2).handsize(1),
				genplanet("SPIELBANY VI").fertile().settle(4).conquer(5).zone("blue").influence(2).handsize(1),
				genplanet("NEW TEXAS").fertile().settle(3).conquer(6).zone("green").zone("blue").influence(2).icon("colonize"),
				genplanet("ARTIGAS GNS-111").fertile().settle(3).conquer(6).zone("green").zone("blue").influence(2).icon("produce"),
				//advanced planets
				genplanet("HANOJ - T").advanced().settle(5).conquer(4).influence(3).zone("purple").icon("trade"),
				genplanet("OKNOW").advanced().settle(4).conquer(5).influence(2).zone("purple").handsize(1),
				genplanet("SROD AVEIN N2").advanced().settle(3).conquer(6).influence(4).icon("research"),
				genplanet("RAL GAI'GAW").advanced().settle(4).conquer(5).influence(3).zone("purple").icon("trade"),
				genplanet("ECHO ROSE").advanced().settle(5).conquer(4).influence(3).zone("purple").icon("research"),
				genplanet("SHOLMICAN").advanced().settle(3).conquer(6).influence(4).zone("purple"),
				genplanet("ZEPHAN").advanced().settle(3).conquer(6).influence(4).icon("trade"),
				genplanet("SIMA-07C").advanced().settle(5).conquer(4).influence(2).zone("purple").handsize(1),
				genplanet("LYTTLE").advanced().settle(4).conquer(5).influence(3).zone("purple").icon("research"),
				//mettalic planets
				genplanet("KYRIE & JUNO").metallic().settle(3).conquer(6).influence(4).icon("survey"),
				genplanet("MARGHANNAH PRIME").metallic().settle(4).conquer(5).influence(3).handsize(1),
				genplanet("TANKAHSHIN").metallic().settle(4).conquer(5).influence(3).zone("red").icon("warfare"),
				genplanet("VOSON").metallic().settle(4).conquer(5).influence(3).zone("red").icon("survey"),
				genplanet("PINK SONAR").metallic().settle(5).conquer(4).influence(3).zone("red").icon("survey"),
				genplanet("OVERLORD BETZEL'S DOMAIN").metallic().settle(3).conquer(6).influence(4).icon("warfare"),
				genplanet("8910 SPIELEN").metallic().settle(4).conquer(5).influence(2).zone("red").handsize(1),
				genplanet("IDROYOS").metallic().settle(3).conquer(6).influence(5),
				genplanet("ERKAM-W").metallic().settle(5).conquer(4).influence(3).zone("red").icon("warfare")
			]),
			game
		);

		$$invalidate(
			0,
			game.stacks.startingplanets = knuthshuffle([
				genplanet("MESIA SEDNIM").fertile().settle(2).conquer(2).influence(2).zone("blue"),
				genplanet("DRAWDE").fertile().settle(2).conquer(2).influence(2).zone("green"),
				genplanet("LIAGIBA").advanced().settle(2).conquer(2).influence(2).zone("purple"),
				genplanet("POMERENE").advanced().settle(2).conquer(2).influence(2).zone("purple"),
				genplanet("CHRISPEN").metallic().settle(2).conquer(2).influence(2).zone("red"),
				genplanet("PIEDRA SECA").metallic().settle(2).conquer(2).influence(2).zone("red")
			]),
			game
		);
	};

	let cleanup = () => {
		getActPlyr().limbo.forEach(card => {
			getActPlyr()[card.finDest] = [...getActPlyr()[card.finDest], card];
		});
	};

	let purchase = (src, dest, finDest, id) => {
		// duplicate of discard & duplicate of play
		let toRemove = src.find(e => id == e.id);
		src = src.filter(e => e.id != toRemove.id);
	};

	let remove_from_game = (source_array, toRemove) => {
		//remove_from_game hand->exile\
		toRemove.finDest = "exile";

		return source_array.filter(e => e.id != toRemove.id);
	};

	let present_as_choice = options => $$invalidate(0, game.options = options, game);

	let settle_colonies = (planet, plyr) => {
		let planets = [...plyr.settled_planets, ...plyr.conquered_planets];
		let reduction = [...planets, ...getLeadPlyr().permanents].reduce((acc, cur) => acc + cur.icons.colonize, 0);

		if (planet.settle_cost - reduction <= planet.hosted_colonies.length) {
			if (chkForPerm("abundance") && planet.production_zones.length != 0) {
				planet.production_zones = planet.production_zones.map(pz => {
					return { type: pz.type, filled: true };
				});
			}

			plyr.discard = [...plyr.discard, ...planet.hosted_colonies];
			planet.hosted_colonies = [];
			planet.settled = true;
			discard(plyr.unsettled_planets, plyr.settled_planets, planet.id);
		}
	};

	//pass_turn leadingplayer->nextplayer
	let pass_turn = () => {
		if (!lobby.online || lobby.screenname == getActPlyr().name) {
			$$invalidate(0, game.passt = false, game);
			$$invalidate(0, game.acting_player_index = $$invalidate(0, game.leading_player_index = (game.leading_player_index + 1) % game.number_of_players, game), game);
			$$invalidate(0, game.leadingplayer = game.players[game.leading_player_index], game);
			$$invalidate(0, game.acting_player = game.players[game.leading_player_index], game);
			finish();
		}
	};

	//pass_priority actingplayer->nextplayer
	let pass_priority = () => {
		if (offlineOrIsClientTurn()) {
			$$invalidate(0, game.passp = false, game);
			$$invalidate(0, game.acting_player_index = (game.acting_player_index + 1) % game.number_of_players, game);
			$$invalidate(0, game.acting_player = getActPlyr(), game);
			finish();
		}
	};

	//determine_number_of_players logic->options->choice->number_of_players
	let determine_number_of_players = callback => {
		document.addEventListener("choicemade", singleCllBck(callback, "choicemade", () => $$invalidate(0, game.number_of_players = game.choices, game)));
		present_as_choice(range(game.minPlyrs, game.maxPlyrs));
	};

	//produce poduction_pile->host
	let produce = (planets, resources = 1) => produceTradeHelper(true, planets, resources);

	//trade host->production_pile, influence_pile->player_influence
	//let trade = (planets, player, resources=1) => produceTradeHelper(false,planets,resources,()=>player.influence.push(game.influence.pop()));
	let trade = (plnt, plyr, res) => {
		let prd = { blue: 0, green: 0, purple: 0, red: 0 };
		console.log(res < 1);
		if (res < 1) return prd;
		console.log(plnt.length);

		for (let i = 0; i < plnt.length; i++) {
			console.log(plnt[i].production_zones.length);

			for (let j = 0; j < plnt[i].production_zones.length; j++) {
				console.log(res > 0 && plnt[i].production_zones[j].filled);

				if (res > 0 && plnt[i].production_zones[j].filled) {
					console.log(game.influence.length != 1);
					if (game.influence.length != 1) $$invalidate(0, game.influence = game.influence.slice(1), game);
					plnt[i].production_zones[j].filled = false;
					prd[plnt[i].production_zones[j].type]++;
					console.log(plyr.influence.length);
					plyr.influence = [...plyr.influence, 1];
					console.log(plyr.influence.length);
					res--;
				}
			}
		}

		return prd;
	};

	//politics hand->limbo->exile, stacks->hand
	let politics = (politics_card, card, player) => {
		politics_card.finDest = "exile";

		if (game.stacks.pilecount[card.type] >= 1) {
			player.hand = [
				...player.hand,
				{
					...game.stacks.rolecards[game.stacks[card.type]],
					"id": gen_unique_id()
				}
			];

			$$invalidate(0, game.stacks.pilecount[card.type]--, game);
		}
	};

	//research hand->exile
	let research = (cards, player, limit = 2) => {
		for (let i = 0; i < cards.length && i < limit; i++) {
			getActPlyr().limbo = remove_from_game(getActPlyr().limbo, cards[i]);
		}
	};

	//boost logic->player_icons
	let boost = (cards, plyr) => cards.forEach(card => boostWithIcons(plyr, card));

	//survey deck->hand
	let survey = player => player = draw(player, 2);

	//colonize hand/limbo->host
	let colonize = (planet, source_array, card, isRole = false) => {
		let l = isRole ? getActPlyr().bstIcons.colonize : 1;

		for (let i = 0; i < l; i++) {
			let toRemove = source_array.find(e => card.type == e.type && e.finDest != "exile");
			planet.hosted_colonies = [...planet.hosted_colonies, toRemove];
			source_array = source_array.filter((e, i) => e.id != toRemove.id);
		}
	};

	//warfare starship_pile->player_starship_pile
	let warfare = player => player.starfighters.small++;

	//conquer player_starship_pile->starship_pile, player_unconquered_planets->player_conquered_planets
	let conquer = (planet, player) => {
		if (chkForPerm("scorched_earth_policy")) {
			planet.production_zones = [];
			planet.conquer_cost -= 2;

			if (planet.conquer_cost < 0) {
				planet.conquer_cost = 0;
			}
		}

		if (player.starfighters.small >= planet.conquer_cost) {
			if (chkForPerm("abundance")) {
				if (planet.production_zones.length != 0) {
					planet.production_zones = planet.production_zones.map(pz => {
						return { type: pz.type, filled: true };
					});
				}
			}

			player.starfighters.small -= planet.conquer_cost;
			planet = select_via_id(player.unsettled_planets, planet.id);
			planet.conquered = true;
			player.conquered_planets.push(planet);
		}
	};

	//offer_to_boost present_as_choice, choose, boost
	let offer_to_boost = player => {
		$$invalidate(0, game.displayinfo.selectionzone = "hand", game);
		$$invalidate(0, game.displayinfo.allowformultipleselections = true, game);
		$$invalidate(0, game.displayinfo.showoptiontoskip = true, game);
		present_as_choice(player.hand);

		document.addEventListener("choicemade", singleCllBck(
			() => {
				
			},
			"choicemade",
			() => boost(game.choices, player)
		));
	};

	let select_via_id = (source, id) => {
		let temp = source.find(p => p.id == id);
		source = source.filter(p => p.id != id);
		return temp;
	};

	let boostrolewithcards = (choices, callback = () => {
			
		}) => {
		if (choices[0].name == "Skip") return;

		choices.forEach(card => {
			boostWithIcons(getActPlyr(), card);
			play(getActPlyr().hand, getActPlyr().limbo, "discard", cards[i].id);
		});

		callback();
	};

	let gen_unique_id = () => {
		$$invalidate(0, game.nonce++, game);
		return game.nonce;
	};

	let performleaderrole = (callback = () => {
			
		}) => getActPlyr().activerole.role.role.leader(callback);

	let performfollowerrole = (callback = null) => {
		getActPlyr().activerole.set(game.players[game.leading_player_index].activerole.role);
		getActPlyr().activerole.role.role.follower(callback);
	};

	let explore_planet = player => {
		let planet = game.planet_deck.pop();
		player.limbo = [...player.limbo, { "finDest": "planetdeck", ...planet }];
		$$invalidate(0, game.options = [...game.options, planet], game);
	};

	let catalog_planet = player => {
		$$invalidate(0, game.choices[0].finDest = "unsetttled", game);
		player.unsettled_planets = [...player.unsettled_planets, game.choices[0]];
		player.limbo = player.limbo.filter(p => p.id != game.choices[0].id);
		player.limbo.filter(card => card.finDest == "planetdeck").forEach(planet => discard(player.limbo, game.planet_deck, planet.id));
	};

	let followcentercardrole = (choices, callback = null) => {
		let card = choices[0];
		getActPlyr().activerole.set(card);

		if (game.stacks.pilecount[card.type] >= 1) {
			getActPlyr().bstIcons[card.type]++;

			getActPlyr().limbo.push(Object.assign(
				{
					"id": gen_unique_id(),
					"finDest": "discard"
				},
				game.stacks.rolecards[game.stacks[card.type]]
			));

			$$invalidate(0, game.stacks.pilecount[card.type]--, game);
		}

		let [,,...arr] = arguments;
		callback(card, arr);
	};

	let discardcardsfromhand = (choices, callback = null) => {
		if (choices[0].name != "Skip") {
			choices.forEach(card => discard(getActPlyr().hand, getActPlyr().discard, card.id));
		}

		let [,,...arr] = arguments;
		callback(choices, arr);
	};

	let phasefinishfunction = (send = false) => {
		$$invalidate(0, game.currentphase = (game.currentphase + 1) % game.gamesequence.length, game);
		let jsobj = game.gamesequence[game.currentphase];
		let nextphase, msg;

		for (let key in jsobj) {
			msg = key;
			nextphase = jsobj[key];
		}

		if (game.nextphase !== endgame) {
			$$invalidate(0, game.nextphase = nextphase, game);
			game.messagetoplayer.push(msg);
		}

		game.nextphase();
	};

	let gengamesequence = () => {
		let _gamesequence = [];
		_gamesequence = gshelper([...game.gamephases[0].start], _gamesequence);

		//ar. ra, aar, ara, raa
		_gamesequence = gshelper([...game.gamephases[1].action], _gamesequence, () => {
			return getActPlyr().actionrolesequence == "aar";
		});

		_gamesequence = gshelper([...game.gamephases[1].action], _gamesequence, () => {
			return getActPlyr().actionrolesequence == "aar" || getActPlyr().actionrolesequence == "ar";
		});

		_gamesequence = gshelper([...game.gamephases[2].role], _gamesequence);
		_gamesequence = gshelper([...game.gamephases[3].lead], _gamesequence);

		for (let i = 1; i < game.number_of_players; i++) {
			_gamesequence = gshelper([...game.gamephases[4].follow], _gamesequence);
		}

		_gamesequence = gshelper([...game.gamephases[1].action], _gamesequence, () => {
			return getActPlyr().actionrolesequence == "raa" || getActPlyr().actionrolesequence == "ara";
		});

		_gamesequence = gshelper([...game.gamephases[1].action], _gamesequence, () => {
			return getActPlyr().actionrolesequence == "raa";
		});

		_gamesequence = gshelper([...game.gamephases[5].discard], _gamesequence);
		_gamesequence = gshelper([...game.gamephases[6].cleanup], _gamesequence);
		$$invalidate(0, game.gamesequence = _gamesequence, game);
	};

	let gshelper = (source_array, destination_array, wrapperfunction = false) => {
		for (let i in source_array) {
			if (wrapperfunction) {
				let jsobj = source_array[i];
				let func, key;
				let item = {};

				for (key in jsobj) {
					func = jsobj[key];
				}

				item[key] = () => {
					if (wrapperfunction()) {
						func();
					} else {
						finish();
					}
				};

				destination_array.push(item);
			} else {
				destination_array.push(source_array[i]);
			}
		}

		return destination_array;
	};

	let gennewdeck = () => {
		let deck = [
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.survey]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.survey]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.warfare]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.producetrade]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.producetrade]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.colonize]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.colonize]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.research]),
			Object.assign({ "id": gen_unique_id() }, game.stacks.rolecards[game.stacks.research]),
			{
				"id": gen_unique_id(),
				type: "politics",
				"selected": false,
				action: callback => {
					let callbackwrapper = () => {
						document.removeEventListener("choicemade", callbackwrapper);
						politics(getActPlyr().activeaction, game.choices[0], getActPlyr());
						callback();
					};

					$$invalidate(0, game.displayinfo.center_or_planets = true, game);
					$$invalidate(0, game.displayinfo.selectionzone = "rolecards", game);
					$$invalidate(0, game.displayinfo.allowformultipleselections = false, game);
					$$invalidate(0, game.displayinfo.showoptiontoskip = false, game);
					game.messagetoplayer.push("choose a card from the center row to add to your hand");
					document.addEventListener("choicemade", callbackwrapper);
					present_as_choice(game.stacks.rolecards);
				},
				role: null,
				icons: {
					"survey": 0,
					"warfare": 0,
					"colonize": 0,
					"produce": 0,
					"trade": 0,
					"research": 0,
					"politics": 1
				},
				name: "Politics",
				image: null
			}
		];

		return deck;
	};

	let phaseincrement = () => $$invalidate(0, game.currentphase++, game);

	let newgame = number_of_players => {
		let sets = lobby.sets;
		let ws = new WebSocket(lobby.url);
		$$invalidate(1, lobby.online = true, lobby);
		initgame(number_of_players);

		ws.onmessage = evt => {
			$$invalidate(0, game.game_id = JSON.parse(evt.data), game);
			$$invalidate(0, game.header = "", game);
			lobby.existinggames.push(game);
			$$invalidate(1, lobby.online = true, lobby);
			$$invalidate(0, game.currentphase++, game);
			ws.close();
		}; //enterexistinggame(game);

		ws.onopen = evt => {
			if (ws.readyState == 1) {
				ws.send(JSON.stringify({
					"header": "newgame",
					game,
					sets,
					number_of_players
				}));
			}
		};
	};

	let fetchexistinggames = () => {
		let ws = new WebSocket(lobby.url);

		//let ws = new io(lobby.url);
		ws.onmessage = evt => {
			$$invalidate(0, game.currentphase = -2, game);

			$$invalidate(
				1,
				lobby.existinggames = JSON.parse(evt.data).map(el => {
					return el.game;
				}).filter(el => {
					return el.players.filter(ll => {
						return ll.available;
					}).length > 0;
				}),
				lobby
			);

			$$invalidate(1, lobby.online = true, lobby);
			ws.close();
		};

		ws.onopen = evt => {
			if (ws.readyState == 1) {
				ws.send(JSON.stringify({ "header": "fetchexisting" }));
			}
		};
	};

	let enterexistinggame = g => {
		let game_id = g.game_id;
		let slot = 0, player_name = lobby.screename;

		for (let i = 0; i < g.players.length; i++) {
			if (g.players[i].available) {
				slot = i;
				break;
			}
		}

		if (!lobby.init) {
			initgame(g.number_of_players);
		}

		let ws = new WebSocket(lobby.url);

		//let ws = new io(lobby.url);
		ws.onmessage = evt => {
			// on receiving a message, add it to the list of messages
			g = JSON.parse(evt.data);

			g.gamesequence = phases;
			$$invalidate(0, game = g);

			if (game.currentphase != 0) {
				$$invalidate(0, game.currentphase = -1, game);
			}

			ws.close();
			$$invalidate(1, lobby.online = true, lobby);
			$$invalidate(1, lobby.player_id = Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 10), lobby);

			if (game.currentphase != 0) {
				finish();
			}
		};

		ws.onopen = evt => {
			if (ws.readyState == 1) {
				ws.send(JSON.stringify({
					"header": "enterexisting",
					game_id,
					player_name,
					slot
				}));
			}
		};
	};

	let initgame = number_of_players => {
		$$invalidate(1, lobby.init = true, lobby);
		genplanetdeck();

		for (let i = 0; i < number_of_players; i++) {
			genplayer(i);
		}

		gen_research_deck();
		gengamesequence();
		if (lobby.online) makews(location.origin.replace(/^http/, "ws"));

		if (!lobby.online) {
			gen_game_id();
			gen_player_names();
		}
	};

	let gen_player_names = () => game.players.forEach((plyr, i) => plyr.name = "Player " + (i + 1));
	let toggle_center_or_planets = () => $$invalidate(0, game.displayinfo.center_or_planets = !game.displayinfo.center_or_planets, game);

	let togglepasstoplayer = () => {
		$$invalidate(0, game.passtoplayer = !game.passtoplayer, game);
		openFullscreen();
	};

	let class_gen = (zone, item) => game.displayinfo.selectionzone == zone
	? item.selected ? "selected" : "selectable"
	: "bordered";

	let makews = () => {
		let ws = new WebSocket(lobby.url);

		let ping = () => {
			setTimeout(
				() => {
					ws.send(JSON.stringify({ header: "ping" }));
					ping();
				},
				2000
			);
		};

		ws.onmessage = evt => {
			let g = JSON.parse(evt.data);

			if (game.game_id == g.game_id && g.sender != lobby.player_id) {
				$$invalidate(0, game.gamesequence = phases, game);
				$$invalidate(0, game = g);
			}
		};

		ws.onopen = evt => ping();

		ws.onclose = () => {
			
		};
	};

	let sendstate = () => {
		if (ws.readyState == 1) {
			ws.send(JSON.stringify({
				...game,
				"header": "set",
				"sender": lobby.player_id
			}));
		}
	};

	let gen_game_id = () => {
		$$invalidate(0, game.game_id = "", game);
		$$invalidate(0, game.game_id += Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 10), game);
	};

	let knuthshuffle = array => {
		let currentIndex = array.length;
		let temporaryValue, randomIndex;

		// While there remain elements to shuffle...
		while (0 !== currentIndex) {
			// Pick a remaining element...
			randomIndex = Math.floor(Math.random() * currentIndex);

			currentIndex -= 1;

			// And swap it with the current element.
			temporaryValue = array[currentIndex];

			array[currentIndex] = array[randomIndex];
			array[randomIndex] = temporaryValue;
		}

		return array;
	};

	let drag = (evt, item) => () => $$invalidate(0, game.displayinfo.dragged = item, game);

	let drop = (evt, zone) => () => {
		let el = document.getElementById("playedcards").getBoundingClientRect();

		if (evt.changedTouches[0].clientX > el.left && evt.changedTouches[0].clientX < el.left + el.width && evt.changedTouches[0].clientY < el.top + el.height && evt.changedTouches[0].clientY > el.top) {
			if (game.displayinfo.dragged !== null) choosewrapper(game.displayinfo.dragged, zone);
			game.displayinfo.dragged != null;
		}

		let ll = document.querySelector("#dragged");
		ll.style.visibility = "hidden";
	};

	let move = (evt, img) => () => {
		let touch = evt.targetTouches[0];

		// Place element where the finger is
		let el = document.querySelector("#dragged");

		el.style.position = "absolute";
		el.style.visibility = "visible";
		el.style.top = touch.pageY - 75 + "px";
		el.style.left = touch.pageX - 50 + "px";
		el.style.width = "100px";
		el.style.height = "137px";
		el.style.zIndex = "4";
		el.style.backgroundImage = "url('" + img + "')";
	};

	let newoffline = () => {
		$$invalidate(1, lobby.online = false, lobby);
		$$invalidate(0, game.currentphase = -1, game);
		initgame(2);
		finish();
	};

	let setplayername = name => {
		$$invalidate(1, lobby.screename = name, lobby);
		$$invalidate(0, game.currentphase++, game);
	};

	let openFullscreen = () => {
		let elem = document.getElementById("screen");

		if (elem.requestFullscreen) {
			elem.requestFullscreen();
		} else if (elem.mozRequestFullScreen) {
			/* Firefox */
			elem.mozRequestFullScreen();
		} else if (elem.webkitRequestFullscreen) {
			/* Chrome, Safari and Opera */
			elem.webkitRequestFullscreen();
		} else if (elem.msRequestFullscreen) {
			/* IE/Edge */
			elem.msRequestFullscreen();
		}
	};

	let registerws = () => {
		if (ws.readyState == 1) ws.send(JSON.stringify({
			...game,
			"header": "register",
			"sender": lobby.player_id
		}));
	};

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);
	const click_handler = () => phaseincrement();
	const tap_handler = () => phaseincrement();
	const click_handler_1 = () => fetchexistinggames();
	const tap_handler_1 = () => fetchexistinggames();
	const click_handler_2 = () => newoffline();
	const tap_handler_2 = () => newoffline();
	const click_handler_3 = e => newgame(2);
	const tap_handler_3 = e => newgame(2);
	const click_handler_4 = e => newgame(3);
	const tap_handler_4 = e => newgame(3);
	const click_handler_5 = e => newgame(4);
	const tap_handler_5 = e => newgame(4);

	function input_input_handler() {
		lobby.name = this.value;
		$$invalidate(1, lobby);
	}

	const click_handler_6 = () => setplayername(lobby.screenname);
	const tap_handler_6 = () => setplayername(lobby.screenname);
	const click_handler_7 = g => enterexistinggame(g);
	const tap_handler_7 = g => enterexistinggame(g.game_id);
	const click_handler_8 = () => togglepasstoplayer();
	const tap_handler_8 = () => togglepasstoplayer();
	const click_handler_9 = () => toggle_center_or_planets();
	const tap_handler_9 = () => toggle_center_or_planets();
	const click_handler_10 = card => choosewrapper(card, "research");
	const tap_handler_10 = card => choosewrapper(card, "research");
	const click_handler_11 = card => choosewrapper(card, "rolecards");
	const tap_handler_11 = card => choosewrapper(card, "rolecards");
	const touchmove_handler = (card, event) => move(event, "/images/" + card.type + ".png", "rolecards");
	const touchstart_handler = (card, event) => drag(event, card, "rolecards");
	const touchend_handler = event => drop(event, "rolecards");
	const click_handler_12 = planet => choosewrapper(planet, "unsettled_planets");
	const tap_handler_12 = planet => choosewrapper(planet, "unsettled_planets");
	const click_handler_13 = planet => choosewrapper(planet, "settled_&_conquered_planets");
	const tap_handler_13 = planet => choosewrapper(planet, "settled_&_conquered_planets");
	const click_handler_14 = () => choose([{ name: "Skip" }]);
	const tap_handler_14 = () => choose([{ name: "Skip" }]);
	const click_handler_15 = card => unchoose(card);
	const tap_handler_15 = card => unchoose(card);
	const click_handler_16 = card => unchoose(card);
	const tap_handler_16 = card => unchoose(card);
	const click_handler_17 = () => pass_priority();
	const tap_handler_17 = () => pass_priority();
	const click_handler_18 = () => pass_turn();
	const tap_handler_18 = () => pass_turn();
	const click_handler_19 = () => choose(game[game.displayinfo.choicelabel]);
	const tap_handler_19 = () => choose(game[game.displayinfo.choicelabel]);
	const touchstart_handler_1 = (card, event) => drag(event, card, "hand");
	const touchend_handler_1 = event => drop(event, "hand");
	const touchmove_handler_1 = (card, event) => move(event, card.imgurl, "hand");
	const click_handler_20 = card => choosewrapper(card, "hand");
	const tap_handler_20 = card => choosewrapper(card, "hand");
	const touchend_handler_2 = event => drop(event, "hand");
	const click_handler_21 = card => choosewrapper(card, "hand");
	const touchmove_handler_2 = (card, event) => move(event, "/images/" + card.type + ".png", "hand");
	const tap_handler_21 = card => choosewrapper(card, "hand");
	const click_handler_22 = option => choosewrapper(option, "options");
	const tap_handler_22 = option => choosewrapper(option, "options");
	const click_handler_23 = option => choosewrapper(option, "options");
	const tap_handler_23 = option => choosewrapper(option, "options");

	$$self.$capture_state = () => ({
		game,
		lobby,
		phases,
		corephases,
		actioncardphases,
		mounted,
		onMount,
		clearOptions,
		offerUnsettled,
		getActionCardPhases,
		getActvActn,
		getActvRole,
		getChoice,
		getChoices,
		getSubChoice,
		getSubChoices,
		finish,
		getActPlyr,
		getLeadPlyr,
		simpleOffer,
		wrappedOffer,
		getActionCorePhases,
		getLeadCorePhases,
		getFollowCorePhases,
		genActionPhase,
		genLeadPhase,
		genFollowPhase,
		genEmptyCard,
		tallyIcons,
		handToLimboWithLimboDuplicatePurge,
		handToLimbo,
		limboToHand,
		playToField,
		rmFromField,
		boostWithIcons,
		resetIconBoost,
		resetSelection,
		offlineOrIsClientTurn,
		setChoice,
		cleanOptions,
		displayPlanets,
		displayCenter,
		clearChoices,
		setDisplayInfo,
		getAllCards,
		isPlanet,
		chkForPerm,
		range,
		singleCllBck,
		produceTradeHelper,
		choosewrapper,
		multiplechoose,
		choose,
		unchoose,
		offer,
		discard,
		totalinfluence,
		endgame,
		checkforendgame,
		draw,
		play,
		gen_research_card,
		gen_research_deck,
		genplayer,
		genplanet,
		genplanetdeck,
		cleanup,
		purchase,
		remove_from_game,
		present_as_choice,
		settle_colonies,
		pass_turn,
		pass_priority,
		determine_number_of_players,
		produce,
		trade,
		politics,
		research,
		boost,
		survey,
		colonize,
		warfare,
		conquer,
		offer_to_boost,
		select_via_id,
		boostrolewithcards,
		gen_unique_id,
		performleaderrole,
		performfollowerrole,
		explore_planet,
		catalog_planet,
		followcentercardrole,
		discardcardsfromhand,
		phasefinishfunction,
		gengamesequence,
		gshelper,
		gennewdeck,
		phaseincrement,
		newgame,
		fetchexistinggames,
		enterexistinggame,
		initgame,
		gen_player_names,
		toggle_center_or_planets,
		togglepasstoplayer,
		class_gen,
		makews,
		sendstate,
		gen_game_id,
		knuthshuffle,
		drag,
		drop,
		move,
		newoffline,
		setplayername,
		openFullscreen,
		registerws
	});

	$$self.$inject_state = $$props => {
		if ("game" in $$props) $$invalidate(0, game = $$props.game);
		if ("lobby" in $$props) $$invalidate(1, lobby = $$props.lobby);
		if ("phases" in $$props) phases = $$props.phases;
		if ("corephases" in $$props) corephases = $$props.corephases;
		if ("actioncardphases" in $$props) actioncardphases = $$props.actioncardphases;
		if ("mounted" in $$props) $$invalidate(2, mounted = $$props.mounted);
		if ("clearOptions" in $$props) clearOptions = $$props.clearOptions;
		if ("offerUnsettled" in $$props) offerUnsettled = $$props.offerUnsettled;
		if ("getActionCardPhases" in $$props) getActionCardPhases = $$props.getActionCardPhases;
		if ("getActvActn" in $$props) getActvActn = $$props.getActvActn;
		if ("getActvRole" in $$props) getActvRole = $$props.getActvRole;
		if ("getChoice" in $$props) getChoice = $$props.getChoice;
		if ("getChoices" in $$props) getChoices = $$props.getChoices;
		if ("getSubChoice" in $$props) getSubChoice = $$props.getSubChoice;
		if ("getSubChoices" in $$props) getSubChoices = $$props.getSubChoices;
		if ("finish" in $$props) finish = $$props.finish;
		if ("getActPlyr" in $$props) getActPlyr = $$props.getActPlyr;
		if ("getLeadPlyr" in $$props) getLeadPlyr = $$props.getLeadPlyr;
		if ("simpleOffer" in $$props) simpleOffer = $$props.simpleOffer;
		if ("wrappedOffer" in $$props) wrappedOffer = $$props.wrappedOffer;
		if ("getActionCorePhases" in $$props) getActionCorePhases = $$props.getActionCorePhases;
		if ("getLeadCorePhases" in $$props) getLeadCorePhases = $$props.getLeadCorePhases;
		if ("getFollowCorePhases" in $$props) getFollowCorePhases = $$props.getFollowCorePhases;
		if ("genActionPhase" in $$props) genActionPhase = $$props.genActionPhase;
		if ("genLeadPhase" in $$props) genLeadPhase = $$props.genLeadPhase;
		if ("genFollowPhase" in $$props) genFollowPhase = $$props.genFollowPhase;
		if ("genEmptyCard" in $$props) genEmptyCard = $$props.genEmptyCard;
		if ("tallyIcons" in $$props) tallyIcons = $$props.tallyIcons;
		if ("handToLimboWithLimboDuplicatePurge" in $$props) handToLimboWithLimboDuplicatePurge = $$props.handToLimboWithLimboDuplicatePurge;
		if ("handToLimbo" in $$props) handToLimbo = $$props.handToLimbo;
		if ("limboToHand" in $$props) limboToHand = $$props.limboToHand;
		if ("playToField" in $$props) playToField = $$props.playToField;
		if ("rmFromField" in $$props) rmFromField = $$props.rmFromField;
		if ("boostWithIcons" in $$props) boostWithIcons = $$props.boostWithIcons;
		if ("resetIconBoost" in $$props) resetIconBoost = $$props.resetIconBoost;
		if ("resetSelection" in $$props) resetSelection = $$props.resetSelection;
		if ("offlineOrIsClientTurn" in $$props) offlineOrIsClientTurn = $$props.offlineOrIsClientTurn;
		if ("setChoice" in $$props) setChoice = $$props.setChoice;
		if ("cleanOptions" in $$props) cleanOptions = $$props.cleanOptions;
		if ("displayPlanets" in $$props) displayPlanets = $$props.displayPlanets;
		if ("displayCenter" in $$props) displayCenter = $$props.displayCenter;
		if ("clearChoices" in $$props) clearChoices = $$props.clearChoices;
		if ("setDisplayInfo" in $$props) setDisplayInfo = $$props.setDisplayInfo;
		if ("getAllCards" in $$props) getAllCards = $$props.getAllCards;
		if ("isPlanet" in $$props) isPlanet = $$props.isPlanet;
		if ("chkForPerm" in $$props) chkForPerm = $$props.chkForPerm;
		if ("range" in $$props) range = $$props.range;
		if ("singleCllBck" in $$props) singleCllBck = $$props.singleCllBck;
		if ("produceTradeHelper" in $$props) produceTradeHelper = $$props.produceTradeHelper;
		if ("choosewrapper" in $$props) $$invalidate(3, choosewrapper = $$props.choosewrapper);
		if ("multiplechoose" in $$props) multiplechoose = $$props.multiplechoose;
		if ("choose" in $$props) $$invalidate(4, choose = $$props.choose);
		if ("unchoose" in $$props) $$invalidate(5, unchoose = $$props.unchoose);
		if ("offer" in $$props) offer = $$props.offer;
		if ("discard" in $$props) discard = $$props.discard;
		if ("totalinfluence" in $$props) totalinfluence = $$props.totalinfluence;
		if ("endgame" in $$props) endgame = $$props.endgame;
		if ("checkforendgame" in $$props) checkforendgame = $$props.checkforendgame;
		if ("draw" in $$props) draw = $$props.draw;
		if ("play" in $$props) play = $$props.play;
		if ("gen_research_card" in $$props) gen_research_card = $$props.gen_research_card;
		if ("gen_research_deck" in $$props) gen_research_deck = $$props.gen_research_deck;
		if ("genplayer" in $$props) genplayer = $$props.genplayer;
		if ("genplanet" in $$props) genplanet = $$props.genplanet;
		if ("genplanetdeck" in $$props) genplanetdeck = $$props.genplanetdeck;
		if ("cleanup" in $$props) cleanup = $$props.cleanup;
		if ("purchase" in $$props) purchase = $$props.purchase;
		if ("remove_from_game" in $$props) remove_from_game = $$props.remove_from_game;
		if ("present_as_choice" in $$props) present_as_choice = $$props.present_as_choice;
		if ("settle_colonies" in $$props) settle_colonies = $$props.settle_colonies;
		if ("pass_turn" in $$props) $$invalidate(6, pass_turn = $$props.pass_turn);
		if ("pass_priority" in $$props) $$invalidate(7, pass_priority = $$props.pass_priority);
		if ("determine_number_of_players" in $$props) determine_number_of_players = $$props.determine_number_of_players;
		if ("produce" in $$props) produce = $$props.produce;
		if ("trade" in $$props) trade = $$props.trade;
		if ("politics" in $$props) politics = $$props.politics;
		if ("research" in $$props) research = $$props.research;
		if ("boost" in $$props) boost = $$props.boost;
		if ("survey" in $$props) survey = $$props.survey;
		if ("colonize" in $$props) colonize = $$props.colonize;
		if ("warfare" in $$props) warfare = $$props.warfare;
		if ("conquer" in $$props) conquer = $$props.conquer;
		if ("offer_to_boost" in $$props) offer_to_boost = $$props.offer_to_boost;
		if ("select_via_id" in $$props) select_via_id = $$props.select_via_id;
		if ("boostrolewithcards" in $$props) boostrolewithcards = $$props.boostrolewithcards;
		if ("gen_unique_id" in $$props) gen_unique_id = $$props.gen_unique_id;
		if ("performleaderrole" in $$props) performleaderrole = $$props.performleaderrole;
		if ("performfollowerrole" in $$props) performfollowerrole = $$props.performfollowerrole;
		if ("explore_planet" in $$props) explore_planet = $$props.explore_planet;
		if ("catalog_planet" in $$props) catalog_planet = $$props.catalog_planet;
		if ("followcentercardrole" in $$props) followcentercardrole = $$props.followcentercardrole;
		if ("discardcardsfromhand" in $$props) discardcardsfromhand = $$props.discardcardsfromhand;
		if ("phasefinishfunction" in $$props) phasefinishfunction = $$props.phasefinishfunction;
		if ("gengamesequence" in $$props) gengamesequence = $$props.gengamesequence;
		if ("gshelper" in $$props) gshelper = $$props.gshelper;
		if ("gennewdeck" in $$props) gennewdeck = $$props.gennewdeck;
		if ("phaseincrement" in $$props) $$invalidate(8, phaseincrement = $$props.phaseincrement);
		if ("newgame" in $$props) $$invalidate(9, newgame = $$props.newgame);
		if ("fetchexistinggames" in $$props) $$invalidate(10, fetchexistinggames = $$props.fetchexistinggames);
		if ("enterexistinggame" in $$props) $$invalidate(11, enterexistinggame = $$props.enterexistinggame);
		if ("initgame" in $$props) initgame = $$props.initgame;
		if ("gen_player_names" in $$props) gen_player_names = $$props.gen_player_names;
		if ("toggle_center_or_planets" in $$props) $$invalidate(12, toggle_center_or_planets = $$props.toggle_center_or_planets);
		if ("togglepasstoplayer" in $$props) $$invalidate(13, togglepasstoplayer = $$props.togglepasstoplayer);
		if ("class_gen" in $$props) class_gen = $$props.class_gen;
		if ("makews" in $$props) makews = $$props.makews;
		if ("sendstate" in $$props) sendstate = $$props.sendstate;
		if ("gen_game_id" in $$props) gen_game_id = $$props.gen_game_id;
		if ("knuthshuffle" in $$props) knuthshuffle = $$props.knuthshuffle;
		if ("drag" in $$props) $$invalidate(14, drag = $$props.drag);
		if ("drop" in $$props) $$invalidate(15, drop = $$props.drop);
		if ("move" in $$props) $$invalidate(16, move = $$props.move);
		if ("newoffline" in $$props) $$invalidate(17, newoffline = $$props.newoffline);
		if ("setplayername" in $$props) $$invalidate(18, setplayername = $$props.setplayername);
		if ("openFullscreen" in $$props) openFullscreen = $$props.openFullscreen;
		if ("registerws" in $$props) registerws = $$props.registerws;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		game,
		lobby,
		mounted,
		choosewrapper,
		choose,
		unchoose,
		pass_turn,
		pass_priority,
		phaseincrement,
		newgame,
		fetchexistinggames,
		enterexistinggame,
		toggle_center_or_planets,
		togglepasstoplayer,
		drag,
		drop,
		move,
		newoffline,
		setplayername,
		corephases,
		actioncardphases,
		phases,
		clearOptions,
		offerUnsettled,
		getActionCardPhases,
		getActvActn,
		getActvRole,
		getChoice,
		getChoices,
		getSubChoice,
		getSubChoices,
		finish,
		getActPlyr,
		getLeadPlyr,
		simpleOffer,
		wrappedOffer,
		getActionCorePhases,
		getLeadCorePhases,
		getFollowCorePhases,
		genActionPhase,
		genLeadPhase,
		genFollowPhase,
		genEmptyCard,
		tallyIcons,
		handToLimboWithLimboDuplicatePurge,
		handToLimbo,
		limboToHand,
		playToField,
		rmFromField,
		boostWithIcons,
		resetIconBoost,
		resetSelection,
		offlineOrIsClientTurn,
		setChoice,
		cleanOptions,
		displayPlanets,
		displayCenter,
		clearChoices,
		setDisplayInfo,
		getAllCards,
		isPlanet,
		chkForPerm,
		range,
		singleCllBck,
		produceTradeHelper,
		multiplechoose,
		offer,
		discard,
		totalinfluence,
		endgame,
		checkforendgame,
		draw,
		play,
		gen_research_card,
		gen_research_deck,
		genplayer,
		genplanet,
		genplanetdeck,
		cleanup,
		purchase,
		remove_from_game,
		present_as_choice,
		settle_colonies,
		determine_number_of_players,
		produce,
		trade,
		politics,
		research,
		boost,
		survey,
		colonize,
		warfare,
		conquer,
		offer_to_boost,
		select_via_id,
		boostrolewithcards,
		gen_unique_id,
		performleaderrole,
		performfollowerrole,
		explore_planet,
		catalog_planet,
		followcentercardrole,
		discardcardsfromhand,
		phasefinishfunction,
		gengamesequence,
		gshelper,
		gennewdeck,
		initgame,
		gen_player_names,
		class_gen,
		makews,
		sendstate,
		gen_game_id,
		knuthshuffle,
		openFullscreen,
		registerws,
		click_handler,
		tap_handler,
		click_handler_1,
		tap_handler_1,
		click_handler_2,
		tap_handler_2,
		click_handler_3,
		tap_handler_3,
		click_handler_4,
		tap_handler_4,
		click_handler_5,
		tap_handler_5,
		input_input_handler,
		click_handler_6,
		tap_handler_6,
		click_handler_7,
		tap_handler_7,
		click_handler_8,
		tap_handler_8,
		click_handler_9,
		tap_handler_9,
		click_handler_10,
		tap_handler_10,
		click_handler_11,
		tap_handler_11,
		touchmove_handler,
		touchstart_handler,
		touchend_handler,
		click_handler_12,
		tap_handler_12,
		click_handler_13,
		tap_handler_13,
		click_handler_14,
		tap_handler_14,
		click_handler_15,
		tap_handler_15,
		click_handler_16,
		tap_handler_16,
		click_handler_17,
		tap_handler_17,
		click_handler_18,
		tap_handler_18,
		click_handler_19,
		tap_handler_19,
		touchstart_handler_1,
		touchend_handler_1,
		touchmove_handler_1,
		click_handler_20,
		tap_handler_20,
		touchend_handler_2,
		click_handler_21,
		touchmove_handler_2,
		tap_handler_21,
		click_handler_22,
		tap_handler_22,
		click_handler_23,
		tap_handler_23
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {}, [-1, -1, -1, -1, -1, -1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
