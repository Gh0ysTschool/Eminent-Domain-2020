.hidden.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{display:none}.hand.svelte-1nwzw2v.svelte-1nwzw2v img.svelte-1nwzw2v.svelte-1nwzw2v{height:20vh;width:14vh;margin-right:5px;margin-left:5px}.settle_cost.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{position:relative;bottom:-webkit-calc(88% - 26px);right:10%;text-align:right;font-size:120%}.conquer_cost.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{position:relative;bottom:88%;left:10%;text-align:left;font-size:120%}.planetfrontinfo.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{position:absolute;top:0px}.unsettled_costs.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{position:absolute;top:0px}.mini_settle_cost.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{position:relative;text-align:right;font-size:80%}.mini_conquer_cost.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{position:relative;text-align:left;font-size:80%}.hosted_colonies.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{position:relative;bottom:38%;text-align:center;font-size:120%}.unsettled.svelte-1nwzw2v.svelte-1nwzw2v>img.svelte-1nwzw2v.svelte-1nwzw2v{width:auto;height:100%}.unsettled.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{height:95%}.mini_unsettled.svelte-1nwzw2v.svelte-1nwzw2v>img.svelte-1nwzw2v.svelte-1nwzw2v{width:auto;height:100%}.mini_unsettled.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{height:100%}.planetfront.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{font-weight:bolder;font-size:50%;height:100%;background-repeat:no-repeat}.planetfront.svelte-1nwzw2v>div.svelte-1nwzw2v>img.svelte-1nwzw2v{flex-direction:column;height:2em;background-repeat:no-repeat}.planetfront.svelte-1nwzw2v.svelte-1nwzw2v>img.svelte-1nwzw2v.svelte-1nwzw2v{height:100%}.pass.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{background-repeat:no-repeat;height:50px;min-width:200px;background-image:url("/images/EMbutton200.png");align-self:center;text-align:center}.pilecount.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{position:relative;font-size:200%;bottom:20%}.messagetoplayer.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{text-align:center;width:100%;position:absolute;top:75%}.selectable.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{border:solid rgb(114, 210, 223);border-width:4px;border-left-width:2px;border-right-width:2px}.selected.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{border:solid rgb(50, 190, 132);border-width:4px;border-left-width:2px;border-right-width:2px}.centerrow.svelte-1nwzw2v.svelte-1nwzw2v div.svelte-1nwzw2v.svelte-1nwzw2v{max-width:14vw;min-width:14vw;margin-left:5px;margin-right:5px}.flex.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{display:flex;flex-direction:row;justify-content:center}.playerinfo.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{display:flex;flex-direction:row;justify-content:flex-start;width:100%;height:10%}.playingfield.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{overflow:hidden;min-height:100vh;min-width:100vw;min-height:100vh;min-width:100vw;background-image:url("/images/embackground.png");background-repeat:no-repeat;background-size:cover}.options.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v,.talloptions.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{background-image:url("/images/embackground.png");background-repeat:no-repeat;display:flex;flex-direction:row;justify-content:space-around;position:absolute;right:10%;top:50%;height:15%;width:80%;font-size:150%}.talloptions.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{height:30%}.ownedcards.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{display:flex;flex-direction:row;height:20%;position:absolute;top:80%}.hand.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{margin:auto;display:flex;flex-direction:row;max-width:90%;max-height:100%;overflow-x:scroll;overflow-y:hidden}.hand.svelte-1nwzw2v.svelte-1nwzw2v>img.svelte-1nwzw2v.svelte-1nwzw2v{position:relative}.deck.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{max-width:5%;margin-right:auto}.discard.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{max-width:5%;margin-left:auto}.zone.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{width:100%;overflow-x:scroll;overflow-y:hidden;display:flex;flex-direction:row}.centerrow.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{height:40%;position:absolute;top:15%}.researchrow.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{height:40%}.researchrow.svelte-1nwzw2v.svelte-1nwzw2v>div.svelte-1nwzw2v.svelte-1nwzw2v{height:95%}.researchrow.svelte-1nwzw2v>div.svelte-1nwzw2v>img.svelte-1nwzw2v{width:auto;height:100%}.centerrow.svelte-1nwzw2v>div.svelte-1nwzw2v>img.svelte-1nwzw2v{height:100%}.playedcards.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{height:20%;overflow-x:scroll;position:absolute;top:55%;justify-content:flex-start}.minicard.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{height:100%}.bordered.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{border:solid #000;border-width:1px}.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v::-webkit-scrollbar{display:none}.playercountselector.svelte-1nwzw2v.svelte-1nwzw2v>p.svelte-1nwzw2v.svelte-1nwzw2v{height:33%;text-align:center;font-size:300%;background-color:rgb(34, 26, 59);border:solid #000;border-width:1px}.playercountselector.svelte-1nwzw2v.svelte-1nwzw2v>input.svelte-1nwzw2v.svelte-1nwzw2v{height:33%;text-align:center;width:100%;font-size:300%;background-color:rgb(34, 26, 59);border:solid #000;border-width:1px;color:rgb(49, 158, 177);padding:0px;margin:0px}.passtoplayer.svelte-1nwzw2v.svelte-1nwzw2v.svelte-1nwzw2v{height:80%;width:100%;top:10%;border:solid #000;border-width:1px;text-align:center;font-size:300%;color:white;background-color:rgb(34, 26, 59)}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */